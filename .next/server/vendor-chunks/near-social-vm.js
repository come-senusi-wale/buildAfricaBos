/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/near-social-vm";
exports.ids = ["vendor-chunks/near-social-vm"];
exports.modules = {

/***/ "(ssr)/./node_modules/near-social-vm/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/near-social-vm/dist/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! For license information please see index.js.LICENSE.txt */\n!function(t,e){if(true)module.exports=e(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));else { var n, r; }}(global,(t=>(()=>{\"use strict\";var e={764:(t,e,r)=>{const n=r(238),o=r(665),i=\"function\"==typeof Symbol&&\"function\"==typeof Symbol.for?Symbol.for(\"nodejs.util.inspect.custom\"):null;e.lW=u,e.h2=50;const a=2147483647;function c(t){if(t>a)throw new RangeError('The value \"'+t+'\" is invalid for option \"size\"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if(\"number\"==typeof t){if(\"string\"==typeof e)throw new TypeError('The \"string\" argument must be of type string. Received type number');return f(t)}return s(t,e,r)}function s(t,e,r){if(\"string\"==typeof t)return function(t,e){if(\"string\"==typeof e&&\"\"!==e||(e=\"utf8\"),!u.isEncoding(e))throw new TypeError(\"Unknown encoding: \"+e);const r=0|y(t,e);let n=c(r);const o=n.write(t,e);return o!==r&&(n=n.slice(0,o)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(X(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return h(t)}(t);if(null==t)throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof t);if(X(t,ArrayBuffer)||t&&X(t.buffer,ArrayBuffer))return p(t,e,r);if(\"undefined\"!=typeof SharedArrayBuffer&&(X(t,SharedArrayBuffer)||t&&X(t.buffer,SharedArrayBuffer)))return p(t,e,r);if(\"number\"==typeof t)throw new TypeError('The \"value\" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);const o=function(t){if(u.isBuffer(t)){const e=0|d(t.length),r=c(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?\"number\"!=typeof t.length||H(t.length)?c(0):h(t):\"Buffer\"===t.type&&Array.isArray(t.data)?h(t.data):void 0}(t);if(o)return o;if(\"undefined\"!=typeof Symbol&&null!=Symbol.toPrimitive&&\"function\"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive](\"string\"),e,r);throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof t)}function l(t){if(\"number\"!=typeof t)throw new TypeError('\"size\" argument must be of type number');if(t<0)throw new RangeError('The value \"'+t+'\" is invalid for option \"size\"')}function f(t){return l(t),c(t<0?0:0|d(t))}function h(t){const e=t.length<0?0:0|d(t.length),r=c(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('\"offset\" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('\"length\" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=a)throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+a.toString(16)+\" bytes\");return 0|t}function y(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||X(t,ArrayBuffer))return t.byteLength;if(\"string\"!=typeof t)throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let o=!1;for(;;)switch(e){case\"ascii\":case\"latin1\":case\"binary\":return r;case\"utf8\":case\"utf-8\":return V(t).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*r;case\"hex\":return r>>>1;case\"base64\":return W(t).length;default:if(o)return n?-1:V(t).length;e=(\"\"+e).toLowerCase(),o=!0}}function v(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return\"\";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return\"\";if((r>>>=0)<=(e>>>=0))return\"\";for(t||(t=\"utf8\");;)switch(t){case\"hex\":return A(this,e,r);case\"utf8\":case\"utf-8\":return j(this,e,r);case\"ascii\":return P(this,e,r);case\"latin1\":case\"binary\":return L(this,e,r);case\"base64\":return O(this,e,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return C(this,e,r);default:if(n)throw new TypeError(\"Unknown encoding: \"+t);t=(t+\"\").toLowerCase(),n=!0}}function m(t,e,r){const n=t[e];t[e]=t[r],t[r]=n}function g(t,e,r,n,o){if(0===t.length)return-1;if(\"string\"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),H(r=+r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if(\"string\"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,o);if(\"number\"==typeof e)return e&=255,\"function\"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,o);throw new TypeError(\"val must be string, number or Buffer\")}function b(t,e,r,n,o){let i,a=1,c=t.length,u=e.length;if(void 0!==n&&(\"ucs2\"===(n=String(n).toLowerCase())||\"ucs-2\"===n||\"utf16le\"===n||\"utf-16le\"===n)){if(t.length<2||e.length<2)return-1;a=2,c/=2,u/=2,r/=2}function s(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){let n=-1;for(i=r;i<c;i++)if(s(t,i)===s(e,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===u)return n*a}else-1!==n&&(i-=i-n),n=-1}else for(r+u>c&&(r=c-u),i=r;i>=0;i--){let r=!0;for(let n=0;n<u;n++)if(s(t,i+n)!==s(e,n)){r=!1;break}if(r)return i}return-1}function w(t,e,r,n){r=Number(r)||0;const o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;const i=e.length;let a;for(n>i/2&&(n=i/2),a=0;a<n;++a){const n=parseInt(e.substr(2*a,2),16);if(H(n))return a;t[r+a]=n}return a}function E(t,e,r,n){return K(V(e,t.length-r),t,r,n)}function x(t,e,r,n){return K(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function S(t,e,r,n){return K(W(e),t,r,n)}function k(t,e,r,n){return K(function(t,e){let r,n,o;const i=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function O(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function j(t,e,r){r=Math.min(t.length,r);const n=[];let o=e;for(;o<r;){const e=t[o];let i=null,a=e>239?4:e>223?3:e>191?2:1;if(o+a<=r){let r,n,c,u;switch(a){case 1:e<128&&(i=e);break;case 2:r=t[o+1],128==(192&r)&&(u=(31&e)<<6|63&r,u>127&&(i=u));break;case 3:r=t[o+1],n=t[o+2],128==(192&r)&&128==(192&n)&&(u=(15&e)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(i=u));break;case 4:r=t[o+1],n=t[o+2],c=t[o+3],128==(192&r)&&128==(192&n)&&128==(192&c)&&(u=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&c,u>65535&&u<1114112&&(i=u))}}null===i?(i=65533,a=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),o+=a}return function(t){const e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);let r=\"\",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=I));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||\"undefined\"==typeof console||\"function\"!=typeof console.error||console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"),Object.defineProperty(u.prototype,\"parent\",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,\"offset\",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return s(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return l(t),t<=0?c(t):void 0!==e?\"string\"==typeof r?c(t).fill(e,r):c(t).fill(e):c(t)}(t,e,r)},u.allocUnsafe=function(t){return f(t)},u.allocUnsafeSlow=function(t){return f(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(X(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('\"list\" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=u.allocUnsafe(e);let o=0;for(r=0;r<t.length;++r){let e=t[r];if(X(e,Uint8Array))o+e.length>n.length?(u.isBuffer(e)||(e=u.from(e)),e.copy(n,o)):Uint8Array.prototype.set.call(n,e,o);else{if(!u.isBuffer(e))throw new TypeError('\"list\" argument must be an Array of Buffers');e.copy(n,o)}o+=e.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){const t=this.length;return 0===t?\"\":0===arguments.length?j(this,0,t):v.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError(\"Argument must be a Buffer\");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){let t=\"\";const r=e.h2;return t=this.toString(\"hex\",0,r).replace(/(.{2})/g,\"$1 \").trim(),this.length>r&&(t+=\" ... \"),\"<Buffer \"+t+\">\"},i&&(u.prototype[i]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,o){if(X(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError(\"out of range index\");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;let i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0);const c=Math.min(i,a),s=this.slice(n,o),l=t.slice(e,r);for(let t=0;t<c;++t)if(s[t]!==l[t]){i=s[t],a=l[t];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return g(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return g(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n=\"utf8\",r=this.length,e=0;else if(void 0===r&&\"string\"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n=\"utf8\")):(n=r,r=void 0)}const o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError(\"Attempt to write outside buffer bounds\");n||(n=\"utf8\");let i=!1;for(;;)switch(n){case\"hex\":return w(this,t,e,r);case\"utf8\":case\"utf-8\":return E(this,t,e,r);case\"ascii\":case\"latin1\":case\"binary\":return x(this,t,e,r);case\"base64\":return S(this,t,e,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return k(this,t,e,r);default:if(i)throw new TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};const I=4096;function P(t,e,r){let n=\"\";r=Math.min(t.length,r);for(let o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function L(t,e,r){let n=\"\";r=Math.min(t.length,r);for(let o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function A(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let o=\"\";for(let n=e;n<r;++n)o+=Y[t[n]];return o}function C(t,e,r){const n=t.slice(e,r);let o=\"\";for(let t=0;t<n.length-1;t+=2)o+=String.fromCharCode(n[t]+256*n[t+1]);return o}function N(t,e,r){if(t%1!=0||t<0)throw new RangeError(\"offset is not uint\");if(t+e>r)throw new RangeError(\"Trying to access beyond buffer length\")}function T(t,e,r,n,o,i){if(!u.isBuffer(t))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('\"value\" argument is out of bounds');if(r+n>t.length)throw new RangeError(\"Index out of range\")}function _(t,e,r,n,o){D(e,n,o,t,r,7);let i=Number(e&BigInt(4294967295));t[r++]=i,i>>=8,t[r++]=i,i>>=8,t[r++]=i,i>>=8,t[r++]=i;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=a,a>>=8,t[r++]=a,a>>=8,t[r++]=a,a>>=8,t[r++]=a,r}function B(t,e,r,n,o){D(e,n,o,t,r,7);let i=Number(e&BigInt(4294967295));t[r+7]=i,i>>=8,t[r+6]=i,i>>=8,t[r+5]=i,i>>=8,t[r+4]=i;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=a,a>>=8,t[r+2]=a,a>>=8,t[r+1]=a,a>>=8,t[r]=a,r+8}function U(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError(\"Index out of range\");if(r<0)throw new RangeError(\"Index out of range\")}function R(t,e,r,n,i){return e=+e,r>>>=0,i||U(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function M(t,e,r,n,i){return e=+e,r>>>=0,i||U(t,0,r,8),o.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);let n=this[t],o=1,i=0;for(;++i<e&&(o*=256);)n+=this[t+i]*o;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);let n=this[t+--e],o=1;for(;e>0&&(o*=256);)n+=this[t+--e]*o;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||N(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readBigUInt64LE=Z((function(t){J(t>>>=0,\"offset\");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||$(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,o=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(o)<<BigInt(32))})),u.prototype.readBigUInt64BE=Z((function(t){J(t>>>=0,\"offset\");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||$(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],o=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(o)})),u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);let n=this[t],o=1,i=0;for(;++i<e&&(o*=256);)n+=this[t+i]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||N(t,e,this.length);let n=e,o=1,i=this[t+--n];for(;n>0&&(o*=256);)i+=this[t+--n]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return t>>>=0,e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||N(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||N(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readBigInt64LE=Z((function(t){J(t>>>=0,\"offset\");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||$(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),u.prototype.readBigInt64BE=Z((function(t){J(t>>>=0,\"offset\");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||$(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),u.prototype.readFloatLE=function(t,e){return t>>>=0,e||N(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||N(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||N(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||N(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||T(this,t,e,r,Math.pow(2,8*r)-1,0);let o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||T(this,t,e,r,Math.pow(2,8*r)-1,0);let o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigUInt64LE=Z((function(t,e=0){return _(this,t,e,BigInt(0),BigInt(\"0xffffffffffffffff\"))})),u.prototype.writeBigUInt64BE=Z((function(t,e=0){return B(this,t,e,BigInt(0),BigInt(\"0xffffffffffffffff\"))})),u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);T(this,t,e,r,n-1,-n)}let o=0,i=1,a=0;for(this[e]=255&t;++o<r&&(i*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/i>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);T(this,t,e,r,n-1,-n)}let o=r-1,i=1,a=0;for(this[e+o]=255&t;--o>=0&&(i*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/i>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigInt64LE=Z((function(t,e=0){return _(this,t,e,-BigInt(\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))})),u.prototype.writeBigInt64BE=Z((function(t,e=0){return B(this,t,e,-BigInt(\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))})),u.prototype.writeFloatLE=function(t,e,r){return R(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return R(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return M(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return M(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError(\"argument should be a Buffer\");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError(\"targetStart out of bounds\");if(r<0||r>=this.length)throw new RangeError(\"Index out of range\");if(n<0)throw new RangeError(\"sourceEnd out of bounds\");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const o=n-r;return this===t&&\"function\"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),o},u.prototype.fill=function(t,e,r,n){if(\"string\"==typeof t){if(\"string\"==typeof e?(n=e,e=0,r=this.length):\"string\"==typeof r&&(n=r,r=this.length),void 0!==n&&\"string\"!=typeof n)throw new TypeError(\"encoding must be a string\");if(\"string\"==typeof n&&!u.isEncoding(n))throw new TypeError(\"Unknown encoding: \"+n);if(1===t.length){const e=t.charCodeAt(0);(\"utf8\"===n&&e<128||\"latin1\"===n)&&(t=e)}}else\"number\"==typeof t?t&=255:\"boolean\"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError(\"Out of range index\");if(r<=e)return this;let o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),\"number\"==typeof t)for(o=e;o<r;++o)this[o]=t;else{const i=u.isBuffer(t)?t:u.from(t,n),a=i.length;if(0===a)throw new TypeError('The value \"'+t+'\" is invalid for argument \"value\"');for(o=0;o<r-e;++o)this[o+e]=i[o%a]}return this};const F={};function q(t,e,r){F[t]=class extends r{constructor(){super(),Object.defineProperty(this,\"message\",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,\"code\",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function G(t){let e=\"\",r=t.length;const n=\"-\"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function D(t,e,r,n,o,i){if(t>r||t<e){const n=\"bigint\"==typeof e?\"n\":\"\";let o;throw o=i>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(i+1)}${n}`:`>= -(2${n} ** ${8*(i+1)-1}${n}) and < 2 ** ${8*(i+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new F.ERR_OUT_OF_RANGE(\"value\",o,t)}!function(t,e,r){J(e,\"offset\"),void 0!==t[e]&&void 0!==t[e+r]||$(e,t.length-(r+1))}(n,o,i)}function J(t,e){if(\"number\"!=typeof t)throw new F.ERR_INVALID_ARG_TYPE(e,\"number\",t)}function $(t,e,r){if(Math.floor(t)!==t)throw J(t,r),new F.ERR_OUT_OF_RANGE(r||\"offset\",\"an integer\",t);if(e<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(r||\"offset\",`>= ${r?1:0} and <= ${e}`,t)}q(\"ERR_BUFFER_OUT_OF_BOUNDS\",(function(t){return t?`${t} is outside of buffer bounds`:\"Attempt to access memory outside buffer bounds\"}),RangeError),q(\"ERR_INVALID_ARG_TYPE\",(function(t,e){return`The \"${t}\" argument must be of type number. Received type ${typeof e}`}),TypeError),q(\"ERR_OUT_OF_RANGE\",(function(t,e,r){let n=`The value of \"${t}\" is out of range.`,o=r;return Number.isInteger(r)&&Math.abs(r)>2**32?o=G(String(r)):\"bigint\"==typeof r&&(o=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(o=G(o)),o+=\"n\"),n+=` It must be ${e}. Received ${o}`,n}),RangeError);const z=/[^+/0-9A-Za-z-_]/g;function V(t,e){let r;e=e||1/0;const n=t.length;let o=null;const i=[];for(let a=0;a<n;++a){if(r=t.charCodeAt(a),r>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error(\"Invalid code point\");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function W(t){return n.toByteArray(function(t){if((t=(t=t.split(\"=\")[0]).trim().replace(z,\"\")).length<2)return\"\";for(;t.length%4!=0;)t+=\"=\";return t}(t))}function K(t,e,r,n){let o;for(o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}function X(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function H(t){return t!=t}const Y=function(){const t=\"0123456789abcdef\",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let o=0;o<16;++o)e[n+o]=t[r]+t[o]}return e}();function Z(t){return\"undefined\"==typeof BigInt?Q:t}function Q(){throw new Error(\"BigInt not supported\")}},238:t=>{t.exports=__webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\")},665:t=>{t.exports=__webpack_require__(/*! ieee754 */ \"(ssr)/./node_modules/ieee754/index.js\")},359:e=>{e.exports=t}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})};var o={};return(()=>{n.r(o),n.d(o,{CommitButton:()=>Mr,EthersProviderContext:()=>ln,Widget:()=>Uo,useAccount:()=>ue,useAccountId:()=>se,useCache:()=>jr,useInitNear:()=>Ft,useNear:()=>Dt,utils:()=>t});var t={};n.r(t),n.d(t,{ErrorFallback:()=>L,Loading:()=>P,MaxGasPerTransaction:()=>E,OneNear:()=>j,ReactKey:()=>it,StorageCostPerByte:()=>x,TGas:()=>w,availableNearBalance:()=>J,bigMax:()=>R,bigMin:()=>U,bigToString:()=>M,computeSrcOrCode:()=>lt,computeWritePermission:()=>nt,convertToStringLeaves:()=>Y,dateToString:()=>G,deepCopy:()=>ct,deepEqual:()=>st,deepFreeze:()=>ot,displayGas:()=>q,displayNear:()=>F,displayTime:()=>D,estimateDataSize:()=>W,extractKeys:()=>K,filterValues:()=>ut,indexMatch:()=>et,ipfsUpload:()=>z,ipfsUrl:()=>V,isArray:()=>C,isFunction:()=>_,isObject:()=>N,isReactObject:()=>at,isString:()=>T,isValidAccountId:()=>A,isoDate:()=>$,keysToCamel:()=>B,patternMatch:()=>tt,removeDuplicates:()=>X});var e=n(359),r=n.n(e);const i=__webpack_require__(/*! react-singleton-hook */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/index.js\"),a=__webpack_require__(/*! near-api-js */ \"(ssr)/./node_modules/near-api-js/lib/index.js\"),c=__webpack_require__(/*! big.js */ \"(ssr)/./node_modules/big.js/big.js\");var u=n.n(c);const s=__webpack_require__(/*! deep-equal */ \"(ssr)/./node_modules/deep-equal/index.js\");var l=n.n(s);const f=__webpack_require__(/*! ethers */ \"(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/index.js\");var h=n(764).lW;function p(t){return function(t){if(Array.isArray(t))return m(t)}(t)||function(t){if(\"undefined\"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t[\"@@iterator\"])return Array.from(t)}(t)||v(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function d(t){return d=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},d(t)}function y(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||v(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function v(t,e){if(t){if(\"string\"==typeof t)return m(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?m(t,e):void 0}}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function g(){g=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},\"\")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,o){var i=e&&e.prototype instanceof h?e:h,a=Object.create(i.prototype),c=new I(o||[]);return n(a,\"_invoke\",{value:S(t,r,c)}),a}function l(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var f={};function h(){}function p(){}function y(){}var v={};u(v,i,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(P([])));b&&b!==e&&r.call(b,i)&&(v=b);var w=y.prototype=h.prototype=Object.create(v);function E(t){[\"next\",\"throw\",\"return\"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function o(n,i,a,c){var u=l(t[n],t,i);if(\"throw\"!==u.type){var s=u.arg,f=s.value;return f&&\"object\"==d(f)&&r.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,c)}),(function(t){o(\"throw\",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return o(\"throw\",t,a,c)}))}c(u.arg)}var i;n(this,\"_invoke\",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function S(t,e,r){var n=\"suspendedStart\";return function(o,i){if(\"executing\"===n)throw new Error(\"Generator is already running\");if(\"completed\"===n){if(\"throw\"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=k(a,r);if(c){if(c===f)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(\"suspendedStart\"===n)throw n=\"completed\",r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=\"executing\";var u=l(t,e,r);if(\"normal\"===u.type){if(n=r.done?\"completed\":\"suspendedYield\",u.arg===f)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(n=\"completed\",r.method=\"throw\",r.arg=u.arg)}}}function k(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,\"throw\"===r&&t.iterator.return&&(e.method=\"return\",e.arg=void 0,k(t,e),\"throw\"===e.method)||\"return\"!==r&&(e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),f;var o=l(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,f):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,f)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function I(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:L}}function L(){return{value:void 0,done:!0}}return p.prototype=y,n(w,\"constructor\",{value:y,configurable:!0}),n(y,\"constructor\",{value:p,configurable:!0}),p.displayName=u(y,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===p||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(x.prototype),u(x.prototype,a,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new x(s(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(w),u(w,c,\"Generator\"),u(w,i,(function(){return this})),u(w,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=P,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(j),!t)for(var e in this)\"t\"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type=\"throw\",a.arg=t,e.next=r,n&&(e.method=\"next\",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return n(\"end\");if(i.tryLoc<=this.prev){var c=r.call(i,\"catchLoc\"),u=r.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;j(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},\"next\"===this.method&&(this.arg=void 0),f}},t}function b(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}var w=u()(10).pow(12),E=w.mul(250),x=u()(10).pow(19),S=2,k=64,O=/^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/,j=u()(10).pow(24),I=j.div(2),P=r().createElement(\"span\",{className:\"spinner-grow spinner-grow-sm me-1\",role:\"status\",\"aria-hidden\":\"true\"}),L=function(t){var e=t.error;return r().createElement(\"div\",{role:\"alert\"},r().createElement(\"p\",null,\"Something went wrong:\"),r().createElement(\"pre\",null,e.message))};function A(t){return t&&t.length>=S&&t.length<=k&&t.match(O)}var C=function(t){return Array.isArray(t)},N=function(t){return t===Object(t)&&!C(t)&&\"function\"!=typeof t},T=function(t){return\"string\"==typeof t},_=function(t){return\"function\"==typeof t},B=function t(e){if(N(e)){var r={};return Object.keys(e).forEach((function(n){var o;r[(o=n,o.replace(/([-_][a-z])/gi,(function(t){return t.toUpperCase().replace(\"-\",\"\").replace(\"_\",\"\")})))]=t(e[n])})),r}return C(e)?e.map((function(e){return t(e)})):e},U=function(t,e){return t&&e?t.lt(e)?t:e:t||e},R=function(t,e){return t&&e?t.gt(e)?t:e:t||e},M=function(t,e,r){if(null===t)return\"???\";var n=t.toFixed(),o=n.indexOf(\".\");if(e=e||6,r=r||7,o>0){var i=Math.min(e,Math.max(r-o,0));i>0&&(i+=1),o+i<n.length&&(n=n.substring(0,o+i))}else o=n.length;for(var a=o-4;a>=0;a-=3)n=n.slice(0,a+1)+\",\"+n.slice(a+1);return\"0.000000\"===n&&6===e&&7===r?\"<0.000001\":n},F=function(t){return t?t.eq(1)?r().createElement(r().Fragment,null,\"1 \",r().createElement(\"span\",{className:\"text-secondary\"},\"yoctoNEAR\")):r().createElement(r().Fragment,null,M(t.div(j)),\" \",r().createElement(\"span\",{className:\"text-secondary\"},\"NEAR\")):\"???\"},q=function(t){return t?r().createElement(r().Fragment,null,M(t.div(w)),\" \",r().createElement(\"span\",{className:\"text-secondary\"},\"TGas\")):\"???\"},G=function(t){return t.toLocaleString(\"en-us\",{day:\"numeric\",month:\"short\",year:\"numeric\"})},D=function(t){return t.toLocaleString()},J=function(t){if(t&&!t.loading&&t.state){var e=u()(t.state.amount).sub(u()(t.state.storage_usage).mul(u()(x)));if(e.gt(I))return e.sub(I)}return u()(0)},$=function(t){return t?new Date(t).toISOString().substring(0,10):\"\"},z=function(){var t,e=(t=g().mark((function t(e){var r;return g().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(\"https://ipfs.near.social/add\",{method:\"POST\",headers:{Accept:\"application/json\"},body:e});case 2:return r=t.sent,t.next=5,r.json();case 5:return t.abrupt(\"return\",t.sent.cid);case 6:case\"end\":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){b(i,n,o,a,c,\"next\",t)}function c(t){b(i,n,o,a,c,\"throw\",t)}a(void 0)}))});return function(t){return e.apply(this,arguments)}}(),V=function(t){return\"https://ipfs.near.social/ipfs/\".concat(t)},W=function t(e,r){return N(e)?Object.entries(e).reduce((function(e,n){var o=y(n,2),i=o[0],a=o[1],c=N(r)?r[i]:void 0;return e+(void 0!==c?t(a,c):2*i.length+t(a,void 0)+140)}),N(r)?0:98):((null==e?void 0:e.length)||8)-(T(r)?r.length:0)},K=function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";return Object.entries(e).map((function(e){var n=y(e,2),o=n[0],i=n[1];return N(i)?t(i,\"\".concat(r).concat(o,\"/\")):\"\".concat(r).concat(o)})).flat()},X=function t(e,r){var n=Object.entries(e).reduce((function(e,n){var o=y(n,2),i=o[0],a=o[1],c=N(r)?r[i]:void 0;if(N(a)){var u=N(c)?t(a,c):a;void 0!==u&&(e[i]=u)}else a!==c&&(e[i]=a);return e}),{});return Object.keys(n).length?n:void 0},H=function(t){return T(t)||null===t?t:JSON.stringify(t)},Y=function t(e){return N(e)?Object.entries(e).reduce((function(e,r){var n=y(r,2),o=n[0],i=n[1];return e[H(o)]=t(i),e}),{}):H(e)},Z=function t(e,r){var n=r[0],o=\"**\"===n;return o?1===r.length:(\"*\"===n||o?Object.values(e):n in e?[e[n]]:[]).some((function(e){return N(e)?r.length>1?t(e,r.slice(1)):void 0!==e[\"\"]:1===r.length}))},Q=function t(e,r){var n=r[0];return(\"*\"===n?Object.values(e):n in e?[e[n]]:[]).some((function(e){return 1===r.length||N(e)&&t(e,r.slice(1))}))},tt=function(t,e,r){var n=e.split(\"/\");return\"get\"===t?Z(r,n):\"keys\"===t&&Q(r,n)},et=function(t,e,r){return Object.values(r).some((function(r){var n,o=null==r||null===(n=r.index)||void 0===n?void 0:n[t];try{return o&&JSON.stringify(JSON.parse(o).key)===JSON.stringify(e)}catch(t){return!1}}))},rt={graph:!0,post:!0,index:!0,settings:!0},nt=function(t,e){var r=N(t)?JSON.parse(JSON.stringify(t)):{};return N(e)&&Object.entries(e).forEach((function(t){var e=y(t,2),n=e[0],o=e[1];if(n in rt)if(N(o)){var i=r[n]=r[n]||{};Object.keys(o).forEach((function(t){i[t]=!0}))}else r[n]=!0;else r[n]=!0})),r},ot=function t(e){return Object.freeze(e),Object.keys(e).forEach((function(r){(function(t,e){return!!Object.getOwnPropertyDescriptor(t,e).get})(e,r)||\"object\"!==d(e[r])||Object.isFrozen(e[r])||t(e[r])})),e},it=\"$$typeof\",at=function(t){return null!==t&&\"object\"===d(t)&&!!t[it]},ct=function t(e){return Array.isArray(e)?e.map((function(e){return t(e)})):e instanceof Map?new Map(p(e.entries()).map((function(e){var r=y(e,2),n=r[0],o=r[1];return[t(n),t(o)]}))):e instanceof Set?new Set(p(e).map((function(e){return t(e)}))):h.isBuffer(e)?h.from(e):e instanceof URL?new URL(e):e instanceof File?new File([e],e.name,{type:e.type}):e instanceof Blob?new Blob([e],{type:e.type}):e instanceof Uint8Array||e instanceof ArrayBuffer?e.slice(0):e instanceof f.ethers.BigNumber?e:e instanceof Date?new Date(e):e instanceof WebSocket?e:N(e)?at(e)?e:Object.fromEntries(Object.entries(e).map((function(e){var r=y(e,2),n=r[0],o=r[1];return[n,t(o)]}))):void 0===e||\"function\"==typeof e?e:JSON.parse(JSON.stringify(e))},ut=function(t){return N(t)?Object.fromEntries(Object.entries(t).filter((function(t){var e=y(t,2);return e[0],void 0!==e[1]}))):t},st=l(),lt=function(t,e,r){var n,o=t?{src:t}:e?{code:e}:null,i=function(t,e){var r=\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(!r){if(Array.isArray(t)||(r=v(t))){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}(r||[]);try{for(i.s();!(n=i.n()).done;){var a,c=n.value;if(null!==(a=o)&&void 0!==a&&a.src){var u,s=o.src,l=N(null==c?void 0:c.redirectMap)&&c.redirectMap[s];if(!l)try{l=_(null==c?void 0:c.redirect)&&c.redirect(s)}catch(t){}if(T(l))o={src:l};else if(T(null===(u=l)||void 0===u?void 0:u.code))return{code:l.code}}}}catch(t){i.e(t)}finally{i.f()}return o},ft=n(764).lW;function ht(t){return ht=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},ht(t)}function pt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function dt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?pt(Object(r),!0).forEach((function(e){yt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):pt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function yt(t,e,r){return(e=function(t){var e=function(t,e){if(\"object\"!==ht(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==ht(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"===ht(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function vt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||function(t,e){if(t){if(\"string\"==typeof t)return mt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?mt(t,e):void 0}}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function mt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function gt(){gt=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},\"\")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,o){var i=e&&e.prototype instanceof h?e:h,a=Object.create(i.prototype),c=new O(o||[]);return n(a,\"_invoke\",{value:E(t,r,c)}),a}function l(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var f={};function h(){}function p(){}function d(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(j([])));m&&m!==e&&r.call(m,i)&&(y=m);var g=d.prototype=h.prototype=Object.create(y);function b(t){[\"next\",\"throw\",\"return\"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var u=l(t[n],t,i);if(\"throw\"!==u.type){var s=u.arg,f=s.value;return f&&\"object\"==ht(f)&&r.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,c)}),(function(t){o(\"throw\",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return o(\"throw\",t,a,c)}))}c(u.arg)}var i;n(this,\"_invoke\",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function E(t,e,r){var n=\"suspendedStart\";return function(o,i){if(\"executing\"===n)throw new Error(\"Generator is already running\");if(\"completed\"===n){if(\"throw\"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(\"suspendedStart\"===n)throw n=\"completed\",r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=\"executing\";var u=l(t,e,r);if(\"normal\"===u.type){if(n=r.done?\"completed\":\"suspendedYield\",u.arg===f)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(n=\"completed\",r.method=\"throw\",r.arg=u.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,\"throw\"===r&&t.iterator.return&&(e.method=\"return\",e.arg=void 0,x(t,e),\"throw\"===e.method)||\"return\"!==r&&(e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),f;var o=l(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,f):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(S,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return p.prototype=d,n(g,\"constructor\",{value:d,configurable:!0}),n(d,\"constructor\",{value:p,configurable:!0}),p.displayName=u(d,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===p||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},b(w.prototype),u(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(s(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(g),u(g,c,\"Generator\"),u(g,i,(function(){return this})),u(g,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(k),!t)for(var e in this)\"t\"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type=\"throw\",a.arg=t,e.next=r,n&&(e.method=\"next\",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return n(\"end\");if(i.tryLoc<=this.prev){var c=r.call(i,\"catchLoc\"),u=r.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;k(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},\"next\"===this.method&&(this.arg=void 0),f}},t}function bt(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function wt(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){bt(i,n,o,a,c,\"next\",t)}function c(t){bt(i,n,o,a,c,\"throw\",t)}a(void 0)}))}}var Et=function(t,e,r,n){return{type:\"FunctionCall\",params:{methodName:t,args:e,gas:r,deposit:n}}},xt={networkId:\"testnet\",nodeUrl:\"https://rpc.testnet.near.org\",archivalNodeUrl:\"https://rpc.testnet.internal.near.org\",contractName:\"v1.social08.testnet\",walletUrl:\"https://wallet.testnet.near.org\",wrapNearAccountId:\"wrap.testnet\",apiUrl:\"https://discovery-api.stage.testnet.near.org\",enableWeb4FastRpc:!1},St={networkId:\"mainnet\",nodeUrl:\"https://rpc.mainnet.near.org\",archivalNodeUrl:\"https://rpc.mainnet.internal.near.org\",contractName:\"social.near\",walletUrl:\"https://wallet.near.org\",wrapNearAccountId:\"wrap.near\",apiUrl:\"https://api.near.social\",enableWeb4FastRpc:!1},kt={get:!0,keys:!0},Ot=function(){var t=wt(gt().mark((function t(e,r,n,o,i){return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.apiUrl&&r in kt){t.next=2;break}return t.abrupt(\"return\",i());case 2:return n=n||{},o&&(n.blockHeight=o),t.prev=4,t.next=7,fetch(\"\".concat(e.apiUrl,\"/\").concat(r),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(n)});case 7:return t.next=9,t.sent.json();case 9:return t.abrupt(\"return\",t.sent);case 12:return t.prev=12,t.t0=t.catch(4),console.log(\"API call failed\",r,n),console.error(t.t0),t.abrupt(\"return\",i());case 17:case\"end\":return t.stop()}}),t,null,[[4,12]])})));return function(e,r,n,o,i){return t.apply(this,arguments)}}();function jt(t,e,r,n,o,i){return It.apply(this,arguments)}function It(){return(It=wt(gt().mark((function t(e,r,n,o,i,a){var c;return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,e.selector;case 3:return t.next=5,t.sent.wallet();case 5:return c=t.sent,t.next=8,c.signAndSendTransaction({receiverId:r,actions:[Et(n,o,null!=i?i:w.mul(30).toFixed(0),null!=a?a:\"0\")]});case 8:return t.abrupt(\"return\",t.sent);case 11:throw t.prev=11,t.t0=t.catch(0),t.t0;case 14:case\"end\":return t.stop()}}),t,null,[[0,11]])})))).apply(this,arguments)}function Pt(t,e){return Lt.apply(this,arguments)}function Lt(){return(Lt=wt(gt().mark((function t(e,r){var n;return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=new a.Account(e.nearConnection.connection,r),t.next=3,n.state();case 3:return t.abrupt(\"return\",t.sent);case 4:case\"end\":return t.stop()}}),t)})))).apply(this,arguments)}function At(t,e){return Ct.apply(this,arguments)}function Ct(){return(Ct=wt(gt().mark((function t(e,r){var n,o,i;return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,e.selector;case 3:return t.next=5,t.sent.wallet();case 5:return n=t.sent,o=[],i=u()(0),r.forEach((function(t){var e,r=t.contractName,n=t.methodName,a=t.args,c=t.gas,u=t.deposit,s=i.add(c),l=Et(n,a,c.toFixed(0),u.toFixed(0));(null===(e=o[o.length-1])||void 0===e?void 0:e.receiverId)!==r||s.gt(E)?(o.push({receiverId:r,actions:[]}),i=c):i=s,o[o.length-1].actions.push(l)})),t.next=11,n.signAndSendTransactions({transactions:o});case 11:return t.abrupt(\"return\",t.sent);case 14:throw t.prev=14,t.t0=t.catch(0),t.t0;case 17:case\"end\":return t.stop()}}),t,null,[[0,14]])})))).apply(this,arguments)}function Nt(t,e,r){var n=r.viewMethods,o=void 0===n?[]:n,i=r.changeMethods,a=void 0===i?[]:i,c={near:t,contractId:e};return o.forEach((function(r){c[r]=function(n){return t.viewCall(e,r,n)}})),a.forEach((function(r){c[r]=function(n,o,i){return t.functionCall(e,r,n,o,i)}})),c}function Tt(t,e,r,n,o,i){return _t.apply(this,arguments)}function _t(){return(_t=wt(gt().mark((function t(e,r,n,o,i,a){var c;return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=i||{},t.next=3,e.query({request_type:\"call_function\",account_id:n,method_name:o,args_base64:ft.from(JSON.stringify(i)).toString(\"base64\"),block_id:r,finality:a});case 3:return c=t.sent,t.abrupt(\"return\",c.result&&c.result.length>0&&JSON.parse(ft.from(c.result).toString()));case 5:case\"end\":return t.stop()}}),t)})))).apply(this,arguments)}function Bt(t,e,r,n){return Ut.apply(this,arguments)}function Ut(){return(Ut=wt(gt().mark((function t(e,r,n,o){var i;return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=n||{},i=new URL(\"https://rpc.web4.near.page/account/\".concat(e,\"/view/\").concat(r)),Object.entries(n).forEach((function(t){var e=vt(t,2),r=e[0],n=e[1];void 0!==n&&i.searchParams.append(\"\".concat(r,\".json\"),JSON.stringify(n))})),t.prev=3,t.next=6,fetch(i.toString());case 6:return t.next=8,t.sent.json();case 8:return t.abrupt(\"return\",t.sent);case 11:return t.prev=11,t.t0=t.catch(3),console.log(\"Web4 view call failed\",i.toString()),console.error(t.t0),t.abrupt(\"return\",o());case 16:case\"end\":return t.stop()}}),t,null,[[3,11]])})))).apply(this,arguments)}function Rt(t){return Mt.apply(this,arguments)}function Mt(){return(Mt=wt(gt().mark((function t(e){var r,n,o,i,c,u,s,l,f,h,p,d,y,v;return gt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.networkId,o=e.config,i=e.keyStore,c=e.selector,u=e.walletConnectCallback,s=void 0===u?function(){}:u,l=e.customElements,f=void 0===l?{}:l,h=e.features,p=void 0===h?{}:h,o||(o={},n||(o.networkId=\"mainnet\")),n&&!o.networkId&&(o.networkId=n),\"mainnet\"===o.networkId?o=Object.assign({},St,o):\"testnet\"===o.networkId&&(o=Object.assign({},xt,o)),o.walletConnectCallback=s,o.customElements=Object.assign({},o.customElements,f),i=null!==(r=i)&&void 0!==r?r:new a.keyStores.BrowserLocalStorageKeyStore,t.next=9,a.connect(Object.assign({deps:{keyStore:i}},o));case 9:return d=t.sent,(y={config:o,selector:c,keyStore:i,nearConnection:d,features:p}).nearArchivalConnection=a.Connection.fromConfig({networkId:o.networkId,provider:{type:\"JsonRpcProvider\",args:{url:o.archivalNodeUrl}},signer:{type:\"InMemorySigner\",keyStore:i}}),v=function(t){var e;return\"optimistic\"===t||\"final\"===t?{finality:t,blockId:void 0}:null!=t?{finality:void 0,blockId:parseInt(t)}:{finality:null!==(e=o.defaultFinality)&&void 0!==e?e:\"optimistic\",blockId:void 0}},y.viewCall=function(t,e,r,n){var i=v(n),a=i.blockId,c=i.finality,u=function(){return Tt(a?y.nearArchivalConnection.provider:y.nearConnection.connection.provider,null!=a?a:void 0,t,e,r,c)},s=function(){return\"optimistic\"===c&&o.enableWeb4FastRpc?Bt(t,e,r,u):u()};return t!==o.contractName||!a&&\"final\"!==c?s():Ot(o,e,r,a,s)},y.block=function(t){var e=v(t);return(e.blockId?y.nearArchivalConnection.provider:y.nearConnection.connection.provider).block(e)},y.functionCall=function(t,e,r,n,o){return jt(y,t,e,r,n,o)},y.sendTransactions=function(t){return At(y,t)},y.contract=Nt(y,o.contractName,{viewMethods:[\"storage_balance_of\",\"get\",\"get_num_accounts\",\"get_accounts_paged\",\"is_write_permission_granted\",\"keys\"],changeMethods:[\"set\",\"grant_write_permission\",\"storage_deposit\",\"storage_withdraw\"]}),y.accountState=function(t){return Pt(y,t)},t.abrupt(\"return\",y);case 20:case\"end\":return t.stop()}}),t)})))).apply(this,arguments)}var Ft=(0,i.singletonHook)({},(function(){var t=vt((0,e.useState)(null),2),r=t[0],n=t[1];return{nearPromise:r,initNear:(0,e.useMemo)((function(){return function(t){var e,r=(null===(e=t.config)||void 0===e?void 0:e.networkId)||t.networkId,o=\"mainnet\"!==r&&\"testnet\"!==r,i=\"testnet\"===r?t:dt(dt({},t),{},{networkId:\"testnet\",config:void 0,keyStore:void 0,selector:void 0}),a=\"mainnet\"===r?t:dt(dt({},t),{},{networkId:\"mainnet\",config:void 0,keyStore:void 0,selector:void 0});return n(Promise.all([i,a].concat(o?t:[]).map(Rt)).then((function(t){return t.map((function(t){return dt(dt({},t),{},{default:t.config.networkId===r})}))})))}}),[])}})),qt=[],Gt=(0,i.singletonHook)(qt,(function(){var t=vt((0,e.useState)(qt),2),r=t[0],n=t[1],o=Ft().nearPromise;return(0,e.useEffect)((function(){o&&o.then(n)}),[o]),r?{default:r.find((function(t){return t.default})),testnet:r.find((function(t){return\"testnet\"===t.config.networkId})),mainnet:r.find((function(t){return\"mainnet\"===t.config.networkId}))}:r})),Dt=function(t){return Gt()[t||\"default\"]||null};const Jt=__webpack_require__(/*! local-storage */ \"(ssr)/./node_modules/local-storage/local-storage.js\");var $t,zt,Vt,Wt,Kt=n.n(Jt);function Xt(t){return Xt=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},Xt(t)}function Ht(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||function(t,e){if(t){if(\"string\"==typeof t)return Yt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Yt(t,e):void 0}}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function Yt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Zt(){Zt=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},\"\")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,o){var i=e&&e.prototype instanceof h?e:h,a=Object.create(i.prototype),c=new O(o||[]);return n(a,\"_invoke\",{value:E(t,r,c)}),a}function l(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var f={};function h(){}function p(){}function d(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(j([])));m&&m!==e&&r.call(m,i)&&(y=m);var g=d.prototype=h.prototype=Object.create(y);function b(t){[\"next\",\"throw\",\"return\"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var u=l(t[n],t,i);if(\"throw\"!==u.type){var s=u.arg,f=s.value;return f&&\"object\"==Xt(f)&&r.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,c)}),(function(t){o(\"throw\",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return o(\"throw\",t,a,c)}))}c(u.arg)}var i;n(this,\"_invoke\",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function E(t,e,r){var n=\"suspendedStart\";return function(o,i){if(\"executing\"===n)throw new Error(\"Generator is already running\");if(\"completed\"===n){if(\"throw\"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(\"suspendedStart\"===n)throw n=\"completed\",r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=\"executing\";var u=l(t,e,r);if(\"normal\"===u.type){if(n=r.done?\"completed\":\"suspendedYield\",u.arg===f)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(n=\"completed\",r.method=\"throw\",r.arg=u.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,\"throw\"===r&&t.iterator.return&&(e.method=\"return\",e.arg=void 0,x(t,e),\"throw\"===e.method)||\"return\"!==r&&(e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),f;var o=l(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,f):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(S,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return p.prototype=d,n(g,\"constructor\",{value:d,configurable:!0}),n(d,\"constructor\",{value:p,configurable:!0}),p.displayName=u(d,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===p||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},b(w.prototype),u(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(s(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(g),u(g,c,\"Generator\"),u(g,i,(function(){return this})),u(g,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(k),!t)for(var e in this)\"t\"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type=\"throw\",a.arg=t,e.next=r,n&&(e.method=\"next\",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return n(\"end\");if(i.tryLoc<=this.prev){var c=r.call(i,\"catchLoc\"),u=r.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;k(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},\"next\"===this.method&&(this.arg=void 0),f}},t}function Qt(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function te(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){Qt(i,n,o,a,c,\"next\",t)}function c(t){Qt(i,n,o,a,c,\"throw\",t)}a(void 0)}))}}var ee=\"near-social-vm:v01:\",re=ee+\":accountId:\",ne=ee+\":pretendAccountId:\",oe={loading:!0,signedAccountId:null!==($t=Kt().get(re))&&void 0!==$t?$t:void 0,pretendAccountId:null!==(zt=Kt().get(ne))&&void 0!==zt?zt:void 0,accountId:null!==(Vt=null!==(Wt=Kt().get(ne))&&void 0!==Wt?Wt:Kt().get(re))&&void 0!==Vt?Vt:void 0,state:null,near:null};function ie(t,e){return ae.apply(this,arguments)}function ae(){return(ae=te(Zt().mark((function t(e,r){var n,o,i,c,u,s,l,f,h,p,d;return Zt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.connectedContractId=null===(n=r)||void 0===n||null===(o=n.contract)||void 0===o?void 0:o.contractId,!e.connectedContractId||e.connectedContractId===e.config.contractName){t.next=12;break}return t.next=4,e.selector;case 4:return l=t.sent,t.next=7,l.wallet();case 7:return f=t.sent,t.next=10,f.signOut();case 10:e.connectedContractId=null,r=l.store.getState();case 12:if(e.accountId=null!==(i=null===(c=r)||void 0===c||null===(u=c.accounts)||void 0===u||null===(s=u[0])||void 0===s?void 0:s.accountId)&&void 0!==i?i:null,e.accountId){e.publicKey=null;try{\"here-wallet\"===(null===(h=r)||void 0===h?void 0:h.selectedWalletId)&&(p=Kt().get(\"herewallet:keystore\"),e.publicKey=a.KeyPair.fromString(p[e.config.networkId].accounts[e.accountId]).getPublicKey())}catch(t){console.error(t)}if(!e.publicKey)try{e.publicKey=a.KeyPair.fromString(Kt().get(\"meteor-wallet\"===(null===(d=r)||void 0===d?void 0:d.selectedWalletId)?\"_meteor_wallet\".concat(e.accountId,\":\").concat(e.config.networkId):\"near-api-js:keystore:\".concat(e.accountId,\":\").concat(e.config.networkId))).getPublicKey()}catch(t){console.error(t)}}case 14:case\"end\":return t.stop()}}),t)})))).apply(this,arguments)}var ce=function(){var t=te(Zt().mark((function t(e,r){var n,o,i,a,c,u,s,l;return Zt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if((o=e.accountId)?(Kt().set(re,o),e.config.walletConnectCallback(o)):Kt().remove(re),i=null!==(n=Kt().get(ne))&&void 0!==n?n:void 0,a={loading:!1,signedAccountId:o,pretendAccountId:i,accountId:null!=i?i:o,state:null,near:e,refresh:function(){var t=te(Zt().mark((function t(){return Zt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ce(e,r);case 2:return t.abrupt(\"return\",t.sent);case 3:case\"end\":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),startPretending:function(){var t=te(Zt().mark((function t(n){return Zt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n?Kt().set(ne,n):Kt().remove(ne),t.next=3,ce(e,r);case 3:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},!o){t.next=13;break}return t.next=7,Promise.all([e.contract.storage_balance_of({account_id:o}),e.accountState(o)]);case 7:c=t.sent,u=Ht(c,2),s=u[0],l=u[1],a.storageBalance=s,a.state=l;case 13:r(a);case 14:case\"end\":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),ue=(0,i.singletonHook)(oe,(function(){var t=Ht((0,e.useState)(oe),2),r=t[0],n=t[1],o=Dt();return(0,e.useEffect)((function(){o&&o.selector.then((function(t){t.store.observable.subscribe(function(){var t=te(Zt().mark((function t(e){return Zt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ie(o,e);case 2:return t.prev=2,t.next=5,ce(o,n);case 5:t.next=10;break;case 7:t.prev=7,t.t0=t.catch(2),console.error(t.t0);case 10:case\"end\":return t.stop()}}),t,null,[[2,7]])})));return function(e){return t.apply(this,arguments)}}())}))}),[o]),r})),se=function(t){var e=Dt(),r=ue();if(e&&(!t||e.config.networkId===t))return r.accountId};const le=__webpack_require__(/*! react-bootstrap/Modal */ \"(ssr)/./node_modules/react-bootstrap/cjs/Modal.js\");var fe=n.n(le);const he=__webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");var pe=n.n(he);const de=__webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/index.js\");var ye=n.n(de);const ve=__webpack_require__(/*! react-syntax-highlighter */ \"(ssr)/./node_modules/react-syntax-highlighter/dist/cjs/index.js\"),me=__webpack_require__(/*! react-syntax-highlighter/dist/esm/styles/prism */ \"(ssr)/./node_modules/react-syntax-highlighter/dist/esm/styles/prism/index.js\"),ge=__webpack_require__(/*! mdast-util-find-and-replace */ \"(ssr)/./node_modules/mdast-util-find-and-replace/index.js\");var be=/@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;function we(){function t(t,e,r){if(/[\\w`]/.test(r.input.charAt(r.index-1))||/[/\\w`]/.test(r.input.charAt(r.index+t.length))||e.length<2||e.length>64)return!1;var n={type:\"text\",value:t};return{type:\"strong\",children:[n],data:{hProperties:{accountId:e}}}}return function(e){return(0,ge.findAndReplace)(e,be,t),e}}var Ee=/#(\\w+)/gi;function xe(){function t(t,e,r){if(/[\\w`]/.test(r.input.charAt(r.index-1))||/[/\\w`]/.test(r.input.charAt(r.index+t.length)))return!1;var n={type:\"text\",value:t};return{type:\"strong\",children:[n],data:{hProperties:{hashtag:e}}}}return function(e){return(0,ge.findAndReplace)(e,Ee,t),e}}function Se(t){return Se=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},Se(t)}var ke=[\"node\",\"children\"],Oe=[\"node\"],je=[\"node\"],Ie=[\"node\"],Pe=[\"node\"],Le=[\"node\",\"inline\",\"className\",\"children\"];function Ae(){return Ae=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},Ae.apply(this,arguments)}function Ce(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ne(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ce(Object(r),!0).forEach((function(e){Te(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ce(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Te(t,e,r){return(e=function(t){var e=function(t,e){if(\"object\"!==Se(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==Se(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"===Se(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _e(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var Be=function(t){var e=t.onLink,n=t.onLinkClick,o=t.text,i=t.onMention,a=t.onHashtag,c=t.onImage,u=t.syntaxHighlighterProps;return r().createElement(ye(),{plugins:[],rehypePlugins:[],remarkPlugins:[pe(),we,xe],children:o,components:{strong:function(t){var e,n,o,c,u=t.node,s=t.children,l=_e(t,ke);return i&&null!==(e=u.properties)&&void 0!==e&&e.accountId?i(null===(o=u.properties)||void 0===o?void 0:o.accountId):a&&null!==(n=u.properties)&&void 0!==n&&n.hashtag?a(null===(c=u.properties)||void 0===c?void 0:c.hashtag):r().createElement(\"strong\",l,s)},a:function(t){var o,i=t.node,a=_e(t,Oe);return e?e(Ne(Ne({},a),{},{href:null===(o=i.properties)||void 0===o?void 0:o.href})):n?r().createElement(\"a\",Ae({onClick:n},a)):r().createElement(\"a\",Ae({target:\"_blank\"},a))},img:function(t){t.node;var e=_e(t,je);return c?c(Ne({},e)):r().createElement(\"img\",Ae({className:\"img-fluid\"},e))},blockquote:function(t){t.node;var e=_e(t,Ie);return r().createElement(\"blockquote\",Ae({className:\"blockquote\"},e))},table:function(t){t.node;var e=_e(t,Pe);return r().createElement(\"table\",Ae({className:\"table table-striped\"},e))},code:function(t){t.node;var e=t.inline,n=t.className,o=t.children,i=_e(t,Le),a=/language-(\\w+)/.exec(n||\"\"),c=null!=u?u:{},s=c.wrapLines,l=c.lineProps,f=c.showLineNumbers,h=c.lineNumberStyle;return!e&&a?r().createElement(ve.Prism,Ae({children:String(o).replace(/\\n$/,\"\"),style:me.tomorrow,language:a[1],PreTag:\"div\",wrapLines:s,lineProps:l,showLineNumbers:f,lineNumberStyle:h},i)):r().createElement(\"code\",Ae({className:n},i),o)}}})};const Ue=__webpack_require__(/*! react-uuid */ \"(ssr)/./node_modules/react-uuid/uuid.js\");var Re=n.n(Ue);function Me(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Fe(t){var n,o,i=(0,e.useState)(Re()()),a=Dt(t.networkId),c=(n=(0,e.useState)(!1),o=2,function(t){if(Array.isArray(t))return t}(n)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(n,o)||function(t,e){if(t){if(\"string\"==typeof t)return Me(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Me(t,e):void 0}}(n,o)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()),u=c[0],s=c[1],l=t.onHide,f=t.transactions,h=!!f;return r().createElement(fe(),{size:\"xl\",centered:!0,scrollable:!0,show:h,onHide:l},r().createElement(fe().Header,{closeButton:!0},r().createElement(fe().Title,null,\"Confirm Transaction\")),r().createElement(fe().Body,null,f&&f.map((function(t,e){return r().createElement(\"div\",{key:\"\".concat(i,\"-\").concat(e)},r().createElement(\"div\",null,r().createElement(\"h4\",null,\"Transaction #\",e+1)),r().createElement(\"div\",null,r().createElement(\"span\",{className:\"text-secondary\"},\"Contract ID: \"),r().createElement(\"span\",{className:\"font-monospace\"},t.contractName)),r().createElement(\"div\",null,r().createElement(\"span\",{className:\"text-secondary\"},\"Method name: \"),r().createElement(\"span\",{className:\"font-monospace\"},t.methodName)),t.deposit&&t.deposit.gt(0)&&r().createElement(\"div\",null,r().createElement(\"span\",{className:\"text-secondary\"},\"Deposit: \"),r().createElement(\"span\",{className:\"font-monospace\"},F(t.deposit))),r().createElement(\"div\",null,r().createElement(\"span\",{className:\"text-secondary\"},\"Gas: \"),r().createElement(\"span\",{className:\"font-monospace\"},q(t.gas))),r().createElement(Be,{text:(n=t.args,o=JSON.stringify(n,null,2),\"```json\\n\".concat(o,\"\\n```\"))}));var n,o}))),r().createElement(fe().Footer,null,r().createElement(\"button\",{className:\"btn btn-success\",disabled:u,onClick:function(t){t.preventDefault(),s(!0),a.sendTransactions(f).then((function(){s(!1),l()}))}},u&&P,\" Confirm\"),r().createElement(\"button\",{className:\"btn btn-secondary\",onClick:l,disabled:u},\"Close\")))}const qe=__webpack_require__(/*! react-files */ \"(ssr)/./node_modules/react-files/dist/index.js\");var Ge=n.n(qe);const De=__webpack_require__(/*! @braintree/sanitize-url */ \"(ssr)/./node_modules/@braintree/sanitize-url/dist/index.js\"),Je=__webpack_require__(/*! react-infinite-scroller */ \"(ssr)/./node_modules/react-infinite-scroller/index.js\");var $e=n.n(Je);function ze(t){return ze=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},ze(t)}function Ve(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function We(){We=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},\"\")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,o){var i=e&&e.prototype instanceof h?e:h,a=Object.create(i.prototype),c=new O(o||[]);return n(a,\"_invoke\",{value:E(t,r,c)}),a}function l(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var f={};function h(){}function p(){}function d(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(j([])));m&&m!==e&&r.call(m,i)&&(y=m);var g=d.prototype=h.prototype=Object.create(y);function b(t){[\"next\",\"throw\",\"return\"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var u=l(t[n],t,i);if(\"throw\"!==u.type){var s=u.arg,f=s.value;return f&&\"object\"==ze(f)&&r.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,c)}),(function(t){o(\"throw\",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return o(\"throw\",t,a,c)}))}c(u.arg)}var i;n(this,\"_invoke\",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function E(t,e,r){var n=\"suspendedStart\";return function(o,i){if(\"executing\"===n)throw new Error(\"Generator is already running\");if(\"completed\"===n){if(\"throw\"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(\"suspendedStart\"===n)throw n=\"completed\",r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=\"executing\";var u=l(t,e,r);if(\"normal\"===u.type){if(n=r.done?\"completed\":\"suspendedYield\",u.arg===f)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(n=\"completed\",r.method=\"throw\",r.arg=u.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,\"throw\"===r&&t.iterator.return&&(e.method=\"return\",e.arg=void 0,x(t,e),\"throw\"===e.method)||\"return\"!==r&&(e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),f;var o=l(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,f):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(S,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return p.prototype=d,n(g,\"constructor\",{value:d,configurable:!0}),n(d,\"constructor\",{value:p,configurable:!0}),p.displayName=u(d,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===p||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},b(w.prototype),u(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(s(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(g),u(g,c,\"Generator\"),u(g,i,(function(){return this})),u(g,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(k),!t)for(var e in this)\"t\"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type=\"throw\",a.arg=t,e.next=r,n&&(e.method=\"next\",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return n(\"end\");if(i.tryLoc<=this.prev){var c=r.call(i,\"catchLoc\"),u=r.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;k(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},\"next\"===this.method&&(this.arg=void 0),f}},t}function Ke(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function Xe(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){Ke(i,n,o,a,c,\"next\",t)}function c(t){Ke(i,n,o,a,c,\"throw\",t)}a(void 0)}))}}var He=x.mul(2e3),Ye=x.mul(500),Ze=x.mul(500),Qe=x.mul(500),tr=function(){var t=Xe(We().mark((function t(e,r){var n;return We().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=K(r),t.next=3,e.contract.get({keys:n});case 3:return t.abrupt(\"return\",t.sent);case 4:case\"end\":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),er=function(){var t=Xe(We().mark((function t(e,r,n,o){var i,a,c,s,l,f,h,p,d,y;return We().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.selector;case 2:if(i=e.accountId){t.next=6;break}return alert(\"You're not logged in. Sign in to commit data.\"),t.abrupt(\"return\");case 6:return t.next=8,Promise.all([e.viewCall(e.config.contractName,\"get_account_storage\",{account_id:i}),i!==r?e.viewCall(e.config.contractName,\"is_write_permission_granted\",{predecessor_id:i,key:r}):Promise.resolve(!0)]);case 8:if(a=t.sent,w=2,c=function(t){if(Array.isArray(t))return t}(b=a)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(b,w)||function(t,e){if(t){if(\"string\"==typeof t)return Ve(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ve(t,e):void 0}}(b,w)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}(),s=c[0],l=c[1],f=u()((null==s?void 0:s.available_bytes)||\"0\"),v={},m=r,g=Y(n),(m=function(t){var e=function(t,e){if(\"object\"!==ze(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==ze(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"===ze(e)?e:String(e)}(m))in v?Object.defineProperty(v,m,{value:g,enumerable:!0,configurable:!0,writable:!0}):v[m]=g,h=v,p={},o){t.next=20;break}return t.next=18,tr(e,h);case 18:p=t.sent,h=X(h,p);case 20:return d=x.mul(W(h,p)).add(s?u()(0):Ye).add(l?u()(0):Qe).add(Ze),y=R(d.sub(f.mul(x)),s?l?u()(0):u()(1):He),t.abrupt(\"return\",{originalData:n,accountId:r,accountStorage:s,availableBytes:f,currentData:p,data:h,expectedDataBalance:d,deposit:y,permissionGranted:l});case 23:case\"end\":return t.stop()}var v,m,g,b,w}),t)})));return function(e,r,n,o){return t.apply(this,arguments)}}(),rr=function(){var t=Xe(We().mark((function t(e,r,n){return We().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log(\"Committing data\",r),t.next=3,e.contract.set({data:r},w.mul(100).toFixed(0),n.toFixed(0));case 3:return t.abrupt(\"return\",t.sent);case 4:case\"end\":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}(),nr=function(){var t=Xe(We().mark((function t(e,r,n){var o,i;return We().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.selector;case 2:return t.next=4,t.sent.wallet();case 4:return o=t.sent,i=[],e.publicKey&&(i.push(Et(\"grant_write_permission\",{public_key:e.publicKey.toString(),keys:[e.accountId]},w.mul(100).toFixed(0),n.gt(0)?n.toFixed(0):\"1\")),n=u()(0)),i.push(Et(\"set\",{data:r},w.mul(100).toFixed(0),n.gt(0)?n.toFixed(0):\"1\")),t.next=10,o.signAndSendTransaction({receiverId:e.config.contractName,actions:i});case 10:return t.abrupt(\"return\",t.sent);case 11:case\"end\":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}();const or=__webpack_require__(/*! react-bootstrap */ \"(ssr)/./node_modules/react-bootstrap/cjs/index.js\"),ir=__webpack_require__(/*! idb */ \"(ssr)/./node_modules/idb/build/index.js\");function ar(t){return ar=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},ar(t)}function cr(t,e){if(t){if(\"string\"==typeof t)return ur(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ur(t,e):void 0}}function ur(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function sr(){sr=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},\"\")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,o){var i=e&&e.prototype instanceof h?e:h,a=Object.create(i.prototype),c=new O(o||[]);return n(a,\"_invoke\",{value:E(t,r,c)}),a}function l(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var f={};function h(){}function p(){}function d(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(j([])));m&&m!==e&&r.call(m,i)&&(y=m);var g=d.prototype=h.prototype=Object.create(y);function b(t){[\"next\",\"throw\",\"return\"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var u=l(t[n],t,i);if(\"throw\"!==u.type){var s=u.arg,f=s.value;return f&&\"object\"==ar(f)&&r.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,c)}),(function(t){o(\"throw\",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return o(\"throw\",t,a,c)}))}c(u.arg)}var i;n(this,\"_invoke\",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function E(t,e,r){var n=\"suspendedStart\";return function(o,i){if(\"executing\"===n)throw new Error(\"Generator is already running\");if(\"completed\"===n){if(\"throw\"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(\"suspendedStart\"===n)throw n=\"completed\",r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=\"executing\";var u=l(t,e,r);if(\"normal\"===u.type){if(n=r.done?\"completed\":\"suspendedYield\",u.arg===f)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(n=\"completed\",r.method=\"throw\",r.arg=u.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,\"throw\"===r&&t.iterator.return&&(e.method=\"return\",e.arg=void 0,x(t,e),\"throw\"===e.method)||\"return\"!==r&&(e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),f;var o=l(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,f):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(S,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return p.prototype=d,n(g,\"constructor\",{value:d,configurable:!0}),n(d,\"constructor\",{value:p,configurable:!0}),p.displayName=u(d,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===p||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},b(w.prototype),u(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(s(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(g),u(g,c,\"Generator\"),u(g,i,(function(){return this})),u(g,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(k),!t)for(var e in this)\"t\"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type=\"throw\",a.arg=t,e.next=r,n&&(e.method=\"next\",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return n(\"end\");if(i.tryLoc<=this.prev){var c=r.call(i,\"catchLoc\"),u=r.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;k(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},\"next\"===this.method&&(this.arg=void 0),f}},t}function lr(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function fr(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){lr(i,n,o,a,c,\"next\",t)}function c(t){lr(i,n,o,a,c,\"throw\",t)}a(void 0)}))}}function hr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if(\"object\"!==ar(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==ar(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(n.key),\"symbol\"===ar(o)?o:String(o)),n)}var o}var pr=\"ViewCall\",dr=\"Fetch\",yr=\"LocalStorage\",vr=\"NotStarted\",mr=\"InProgress\",gr=\"Done\",br=\"Invalidated\",wr=\"cache-v1\",Er=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"cacheDb\",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3e3;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.dbPromise=(0,ir.openDB)(e,1,{upgrade:function(t){t.createObjectStore(wr)}}),this.cache={},this.finalSynchronizationDelayMs=r}var e,r,n,o,i;return e=t,r=[{key:\"invalidateCallbacks\",value:function(t,e){var r;if(null!==(r=t.invalidationCallbacks)&&void 0!==r&&r.length){var n=t.invalidationCallbacks;t.invalidationCallbacks=[],setTimeout((function(){n.forEach((function(t){try{t()}catch(t){}}))}),e?this.finalSynchronizationDelayMs+50:50)}}},{key:\"innerGet\",value:(i=fr(sr().mark((function t(e){return sr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.dbPromise;case 2:return t.abrupt(\"return\",t.sent.get(wr,e));case 3:case\"end\":return t.stop()}}),t,this)}))),function(t){return i.apply(this,arguments)})},{key:\"innerSet\",value:(o=fr(sr().mark((function t(e,r){return sr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.dbPromise;case 2:return t.abrupt(\"return\",t.sent.put(wr,r,e));case 3:case\"end\":return t.stop()}}),t,this)}))),function(t,e){return o.apply(this,arguments)})},{key:\"cachedPromise\",value:function(t,e,r,n){var o=this;t=JSON.stringify(t);var i=this.cache[t]||{status:vr,invalidationCallbacks:[],result:null,time:(new Date).getTime()};return this.cache[t]=i,N(r)||(r={onInvalidate:r}),r.onInvalidate&&i.invalidationCallbacks.push(r.onInvalidate),!i.subscription&&r.subscribe&&function t(){i.subscription=setTimeout((function(){document.hidden?t():(i.subscription=null,i.status=br,o.invalidateCallbacks(i,!1))}),5e3)}(),i.status===mr||i.status===gr&&i.time+3e5>(new Date).getTime()||(i.status!==vr||null!=n&&n.ignoreCache||this.innerGet(t).then((function(t){(t||null!=n&&n.forceCachedValue)&&i.status===mr&&(i.result=t,i.time=(new Date).getTime(),o.invalidateCallbacks(i,!1))})),i.status=mr,e&&e().then((function(e){i.status=gr,i.time=(new Date).getTime(),JSON.stringify(e)!==JSON.stringify(i.result)&&(i.result=e,o.innerSet(t,e),o.invalidateCallbacks(i,!1))})).catch((function(e){console.error(e),i.status=gr;var r=void 0;i.time=(new Date).getTime(),JSON.stringify(r)!==JSON.stringify(i.result)&&(i.result=r,o.innerSet(t,r),o.invalidateCallbacks(i,!1))}))),i.result}},{key:\"invalidateCache\",value:function(t,e){var r=this,n=[],o=\"\".concat(t.config.apiUrl,\"/index\");Object.keys(this.cache).forEach((function(r){var i;try{i=JSON.parse(r)}catch(t){return void console.error(\"Key deserialization failed\",r)}if(i.action===pr&&i.contractId===t.config.contractName&&(!i.blockId||\"optimistic\"===i.blockId||\"final\"===i.blockId))try{var a;(null===(a=i.args)||void 0===a?void 0:a.keys).some((function(t){return tt(i.methodName,t,e)}))&&n.push([r,\"final\"===i.blockId])}catch(t){}if(i.action===dr&&i.url===o)try{var c,u=JSON.parse(null===(c=i.options)||void 0===c?void 0:c.body),s=u.action,l=u.key;s&&l&&et(s,l,e)&&n.push([r,!0])}catch(t){}})),console.log(\"Cache invalidation\",n),n.forEach((function(t){var e,n,o=(n=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,n)||cr(e,n)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()),i=o[0],a=o[1],c=r.cache[i];c.status=br,r.invalidateCallbacks(c,a)}))}},{key:\"cachedBlock\",value:function(t,e,r,n){return this.cachedPromise({action:\"Block\",blockId:e},(function(){return t.block(e)}),r,n)}},{key:\"cachedViewCall\",value:function(t,e,r,n,o,i,a){return this.cachedPromise({action:pr,contractId:e,methodName:r,args:n,blockId:o},(function(){return t.viewCall(e,r,n,o)}),i,a)}},{key:\"asyncFetch\",value:(n=fr(sr().mark((function t(e,r){var n,o,i,a,c,u,s,l,f,h,p;return sr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return u=null===(n=r)||void 0===n||null===(o=n.responseType)||void 0===o?void 0:o.toLowerCase(),r={method:null===(i=r)||void 0===i?void 0:i.method,headers:null===(a=r)||void 0===a?void 0:a.headers,body:null===(c=r)||void 0===c?void 0:c.body},t.prev=2,t.next=5,fetch(e,r);case 5:if(s=t.sent,l=s.status,f=s.ok,h=s.headers.get(\"content-type\"),!f){t.next=15;break}return t.next=12,\"arraybuffer\"===u?s.arrayBuffer():\"blob\"===u?s.blob():\"formdata\"===u?s.formData():\"json\"===u?s.json():\"text\"===u?s.text():h&&-1!==h.indexOf(\"application/json\")?s.json():s.text();case 12:t.t0=t.sent,t.next=16;break;case 15:t.t0=void 0;case 16:return p=t.t0,t.abrupt(\"return\",{ok:f,status:l,contentType:h,body:p});case 20:return t.prev=20,t.t1=t.catch(2),t.abrupt(\"return\",{ok:!1,error:t.t1.message});case 23:case\"end\":return t.stop()}}),t,null,[[2,20]])}))),function(t,e){return n.apply(this,arguments)})},{key:\"cachedFetch\",value:function(t,e,r,n){var o=this;return this.cachedPromise({action:dr,url:t,options:e},(function(){return o.asyncFetch(t,e)}),r,n)}},{key:\"cachedCustomPromise\",value:function(t,e,r,n){return this.cachedPromise({action:\"CustomPromise\",key:t},(function(){return e()}),r,n)}},{key:\"socialGet\",value:function(t,e,r,n,o,i,a){if(!t)return null;var c={keys:e=(e=Array.isArray(e)?e:[e]).map((function(t){return r?\"\".concat(t,\"/**\"):\"\".concat(t)})),options:o},u=this.cachedViewCall(t,t.config.contractName,\"get\",c,n,i,a);if(null===u)return null;if(1===e.length)for(var s=e[0].split(\"/\"),l=0;l<s.length;l++){var f,h=s[l];if(\"*\"===h||\"**\"===h)break;u=null===(f=u)||void 0===f?void 0:f[h]}return u}},{key:\"socialIndex\",value:function(t,e,r,n,o,i){var a=this.cachedFetch(\"\".concat(t.config.apiUrl,\"/index\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({action:e,key:r,options:n})},o,i);return null!=a&&a.ok?a.body:null}},{key:\"localStorageGet\",value:function(t,e,r){return this.cachedPromise({action:yr,domain:t,key:e},void 0,r,{forceCachedValue:!0})}},{key:\"asyncLocalStorageGet\",value:function(t,e){return e=JSON.stringify({action:yr,domain:t,key:e}),this.innerGet(e)}},{key:\"localStorageSet\",value:function(t,e,r){e=JSON.stringify({action:yr,domain:t,key:e});var n=this.cache[e]||{status:vr,invalidationCallbacks:[],result:null,time:(new Date).getTime()};this.cache[e]=n,n.status=gr,JSON.stringify(r)!==JSON.stringify(n.result)&&(n.result=r,this.innerSet(e,r),this.invalidateCallbacks(n,!1))}},{key:\"cachedEthersCall\",value:function(t,e,r,n,o){return t?this.cachedPromise({action:\"EthersCall\",callee:e,args:r},(function(){return t[e].apply(t,function(t){if(Array.isArray(t))return ur(t)}(n=r)||function(t){if(\"undefined\"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t[\"@@iterator\"])return Array.from(t)}(n)||cr(n)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}());var n}),n,o):null}}],r&&hr(e.prototype,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}(),xr=new Er,Sr=new Er(\"secondaryCacheDb\"),kr=(0,i.singletonHook)(xr,(function(){return xr})),Or=(0,i.singletonHook)(Sr,(function(){return Sr})),jr=function(t){var e=Dt(),r=kr(),n=Or();return t&&t!==e.config.networkId?n:r};function Ir(t){return Ir=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},Ir(t)}var Pr=[\"data\",\"children\",\"onClick\",\"onCommit\",\"onCancel\",\"disabled\",\"widgetSrc\",\"force\"];function Lr(){return Lr=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},Lr.apply(this,arguments)}function Ar(){Ar=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},\"\")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,o){var i=e&&e.prototype instanceof h?e:h,a=Object.create(i.prototype),c=new O(o||[]);return n(a,\"_invoke\",{value:E(t,r,c)}),a}function l(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var f={};function h(){}function p(){}function d(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(j([])));m&&m!==e&&r.call(m,i)&&(y=m);var g=d.prototype=h.prototype=Object.create(y);function b(t){[\"next\",\"throw\",\"return\"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var u=l(t[n],t,i);if(\"throw\"!==u.type){var s=u.arg,f=s.value;return f&&\"object\"==Ir(f)&&r.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,c)}),(function(t){o(\"throw\",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return o(\"throw\",t,a,c)}))}c(u.arg)}var i;n(this,\"_invoke\",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function E(t,e,r){var n=\"suspendedStart\";return function(o,i){if(\"executing\"===n)throw new Error(\"Generator is already running\");if(\"completed\"===n){if(\"throw\"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(\"suspendedStart\"===n)throw n=\"completed\",r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=\"executing\";var u=l(t,e,r);if(\"normal\"===u.type){if(n=r.done?\"completed\":\"suspendedYield\",u.arg===f)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(n=\"completed\",r.method=\"throw\",r.arg=u.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,\"throw\"===r&&t.iterator.return&&(e.method=\"return\",e.arg=void 0,x(t,e),\"throw\"===e.method)||\"return\"!==r&&(e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),f;var o=l(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,f):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(S,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return p.prototype=d,n(g,\"constructor\",{value:d,configurable:!0}),n(d,\"constructor\",{value:p,configurable:!0}),p.displayName=u(d,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===p||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},b(w.prototype),u(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(s(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(g),u(g,c,\"Generator\"),u(g,i,(function(){return this})),u(g,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(k),!t)for(var e in this)\"t\"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type=\"throw\",a.arg=t,e.next=r,n&&(e.method=\"next\",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return n(\"end\");if(i.tryLoc<=this.prev){var c=r.call(i,\"catchLoc\"),u=r.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;k(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},\"next\"===this.method&&(this.arg=void 0),f}},t}function Cr(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function Nr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||function(t,e){if(t){if(\"string\"==typeof t)return Tr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Tr(t,e):void 0}}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function Tr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var _r=function(t){var e=JSON.stringify(t,null,2);return\"```json\\n\".concat(e,\"\\n```\")},Br={page:\"commit\"},Ur=\"write_permission\",Rr=function(t){var n,o=Dt(t.networkId),i=se(t.networkId),a=jr(),c=Nr((0,e.useState)(!1),2),u=c[0],s=c[1],l=Nr((0,e.useState)(0),2),f=l[0],h=l[1],p=Nr((0,e.useState)(!1),2),d=p[0],y=p[1],v=Nr((0,e.useState)(null),2),m=v[0],g=v[1],b=Nr((0,e.useState)(null),2),w=b[0],E=b[1],S=Nr((0,e.useState)(null),2),k=S[0],O=S[1],j=Nr((0,e.useState)(!0),2),I=j[0],L=j[1],A=t.show,C=t.onHide,N=function(){if(t.onCancel)try{t.onCancel()}catch(t){console.error(t)}C()},T=t.data,_=t.force,B=t.widgetSrc;(0,e.useEffect)((function(){B?(O(null),a.asyncLocalStorageGet(Br,{widgetSrc:B,accountId:i,type:Ur}).then((function(t){return O(t)}))):O(!1)}),[B,i,a,A]),(0,e.useEffect)((function(){L(!1!==k)}),[k]),(0,e.useEffect)((function(){if(!d&&A&&i&&o){var t=JSON.stringify(null!=T?T:null);(_||t!==m)&&(g(t),E(null),er(o,i,T,_).then(E))}}),[d,T,m,_,o,i,A]);var U=function(){var e,r=(e=Ar().mark((function e(){var r,n;return Ar().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(y(!0),r=I&&nt(k,w.data[i]),a.localStorageSet(Br,{widgetSrc:B,accountId:i,type:Ur},r),O(r),n=w.deposit.add(x.mul(f)),!w.permissionGranted){e.next=10;break}return e.next=8,rr(o,w.data,n);case 8:e.next=16;break;case 10:if(i!==o.accountId){e.next=15;break}return e.next=13,nr(o,w.data,n);case 13:e.next=16;break;case 15:alert(\"No permission to commit under given account\");case 16:if(E(null),g(null),t.onCommit)try{t.onCommit(w.data)}catch(t){console.error(t)}a.invalidateCache(o,w.data),C(),y(!1);case 22:case\"end\":return e.stop()}}),e)})),function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(t){Cr(i,n,o,a,c,\"next\",t)}function c(t){Cr(i,n,o,a,c,\"throw\",t)}a(void 0)}))});return function(){return r.apply(this,arguments)}}(),R=w&&!w.permissionGranted&&i!==o.accountId;!d&&!R&&!u&&w&&A&&k&&w.data&&w.deposit.add(x.mul(f)).eq(0)&&w.permissionGranted&&JSON.stringify(nt(k,w.data[i]))===JSON.stringify(k)&&(s(!0),U().then((function(){return s(!1)})));var M=!!w&&A&&!u&&null!==k;return r().createElement(fe(),{size:\"xl\",centered:!0,scrollable:!0,show:M,onHide:N},r().createElement(fe().Header,{closeButton:!0},r().createElement(fe().Title,null,\"Saving data\")),r().createElement(fe().Body,null,R?r().createElement(\"div\",null,r().createElement(\"h5\",null,\"Can't commit, because the account \",o.accountId,\" doesn't have permission to write under pretended account \",i)):w?r().createElement(\"div\",null,r().createElement(\"div\",null,w.data?r().createElement(Be,{text:_r(w.data)}):r().createElement(\"h5\",null,\"No new data to save\")),w.data&&(null==w||null===(n=w.deposit)||void 0===n?void 0:n.gt(0))&&r().createElement(\"div\",null,r().createElement(\"h6\",null,\"Required storage deposit\",\" \",r().createElement(\"small\",{className:\"text-secondary\"},\"(can be recovered later)\")),r().createElement(\"div\",{className:\"mb-2\"},w.deposit.div(x).toFixed(0),\" bytes =\",\" \",F(w.deposit)),r().createElement(\"h6\",null,\"Optional storage deposit\",\" \",r().createElement(\"small\",{className:\"text-secondary\"},\"(can be used to avoid future wallet TX confirmation)\")),r().createElement(\"div\",null,r().createElement(or.ToggleButtonGroup,{type:\"radio\",name:\"storageDeposit\",value:f,onChange:h,disabled:d},r().createElement(or.ToggleButton,{id:\"esd-0\",variant:\"outline-success\",value:0},\"No Deposit\"),r().createElement(or.ToggleButton,{id:\"esd-5000\",variant:\"outline-success\",value:5e3},\"0.05 NEAR (5Kb)\"),r().createElement(or.ToggleButton,{id:\"esd-20000\",variant:\"outline-success\",value:2e4},\"0.2 NEAR (20Kb)\"),r().createElement(or.ToggleButton,{id:\"esd-100000\",variant:\"outline-success\",value:1e5},\"1 NEAR (100Kb)\")))),!R&&B&&w.data&&r().createElement(\"div\",{className:\"form-check form-switch\"},r().createElement(\"input\",{className:\"form-check-input\",type:\"checkbox\",role:\"switch\",id:\"dont-ask-for-widget\",checked:I,onChange:function(t){L(t.target.checked)}}),r().createElement(\"label\",{className:\"form-check-label\",htmlFor:\"dont-ask-for-widget\"},\"Don't ask again for saving similar data by\",\" \",r().createElement(\"span\",{className:\"font-monospace\"},B)))):P),r().createElement(fe().Footer,null,r().createElement(\"button\",{className:\"btn btn-success\",disabled:!(null!=w&&w.data)||d||R,onClick:function(t){t.preventDefault(),U()}},d&&P,\" Save Data\"),r().createElement(\"button\",{className:\"btn btn-secondary\",onClick:N,disabled:d},\"Close\")))},Mr=function(t){var n=se(t.networkId),o=t.data,i=t.children,a=t.onClick,c=t.onCommit,u=t.onCancel,s=t.disabled,l=t.widgetSrc,f=t.force,h=function(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}(t,Pr),p=Nr((0,e.useState)(null),2),d=p[0],y=p[1];return r().createElement(r().Fragment,null,r().createElement(\"button\",Lr({},h,{disabled:s||!o||!!d||!n,onClick:function(t){t.preventDefault(),y(\"function\"==typeof o?o():o),a&&a()}}),!!d&&P,i),r().createElement(Rr,{show:!!d,widgetSrc:l,data:d,force:f,onHide:function(){return y(null)},onCancel:u,onCommit:c}))};const Fr=__webpack_require__(/*! react-bootstrap-typeahead */ \"(ssr)/./node_modules/react-bootstrap-typeahead/cjs/index.js\"),qr=__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\");var Gr=n.n(qr);const Dr=__webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\"),Jr=__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");var $r=n.n(Jr);const zr=__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"),Vr=__webpack_require__(/*! iframe-resizer-react */ \"(ssr)/./node_modules/iframe-resizer-react/dist/index.js\");var Wr=n.n(Vr);function Kr(){return Kr=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},Kr.apply(this,arguments)}function Xr(t){return Xr=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},Xr(t)}function Hr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Yr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Hr(Object(r),!0).forEach((function(e){Zr(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Hr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Zr(t,e,r){return(e=function(t){var e=function(t,e){if(\"object\"!==Xr(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==Xr(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"===Xr(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Qr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||function(t,e){if(t){if(\"string\"==typeof t)return tn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?tn(t,e):void 0}}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function tn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function en(t){var n,o,i,a=t.className,c=t.id,u=t.style,s=t.src,l=t.srcDoc,f=t.title,h=t.message,p=t.onLoad,d=t.onMessage,y=t.iframeResizer,v={className:a,id:c,style:u,src:s,srcDoc:l,title:f},m=Qr((0,e.useState)(!1),2),g=m[0],b=m[1],w=Qr((0,e.useState)(void 0),2),E=w[0],x=w[1],S=r().useRef(),k=\"allow-scripts\",O=(0,e.useCallback)((function(t){t.source===S.current.contentWindow&&d&&d(t.data)}),[S,d]),j=function(){b(!0),p&&p()};return(0,e.useEffect)((function(){return window.addEventListener(\"message\",O,!1),function(){window.removeEventListener(\"message\",O,!1)}}),[O]),(0,e.useEffect)((function(){if(S.current&&g&&!st(E,h)){if(x(ct(h)),y)return void S.current.sendMessage(h,\"*\");S.current.contentWindow.postMessage(h,\"*\")}}),[h,S,g,E]),(0,e.useEffect)((function(){b(!1)}),[s,l]),y?r().createElement(Wr(),Kr({},(n=Yr(Yr({},v),{},{style:null!=u?u:{width:\"1px\",minWidth:\"100%\"},checkOrigin:!1}),o=\"object\"===Xr(y)?y:{},i=[\"log\",\"autoResize\",\"bodyBackground\",\"bodyMargin\",\"bodyPadding\",\"inPageLinks\",\"heightCalculationMethod\",\"maxHeight\",\"maxWidth\",\"minHeight\",\"minWidth\",\"minWidth\",\"resizeFrom\",\"scrolling\",\"sizeHeight\",\"sizeWidth\",\"tolerance\",\"widthCalculationMethod\"],Object.keys(o).forEach((function(t){i.includes(t)&&(n[t]=o[t])})),o.onResized&&(n.onResized=function(t){var e=t.height,r=t.width;o.onResized({height:e,width:r})}),n),{forwardRef:S,sandbox:k,onLoad:j})):r().createElement(\"iframe\",Kr({},v,{ref:S,sandbox:k,onLoad:j}))}const rn=__webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/nanoid/index.js\"),nn=__webpack_require__(/*! lodash.clonedeep */ \"(ssr)/./node_modules/lodash.clonedeep/index.js\");var on=n.n(nn);const an=__webpack_require__(/*! acorn */ \"(ssr)/./node_modules/acorn/dist/acorn.js\"),cn=__webpack_require__(/*! acorn-jsx */ \"(ssr)/./node_modules/acorn-jsx/index.js\");var un=n.n(cn);function sn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ln=r().createContext(null),fn=function(t){var n,o,i,a,c,u=(0,e.useContext)(ln),s=(a=null!=u&&u.useConnectWallet?null==u?void 0:u.useConnectWallet():[{}],c=3,function(t){if(Array.isArray(t))return t}(a)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(a,c)||function(t,e){if(t){if(\"string\"==typeof t)return sn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?sn(t,e):void 0}}(a,c)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()),l=s[0],f=l.wallet,h=l.connecting,p=s[1],d=s[2];return r().createElement(\"button\",{className:\"btn \".concat(t.className,\" \").concat(h||f?\"btn-outline-secondary\":\"btn-outline-primary\"),disabled:(f?!d:!p)||h,onClick:function(){return f?null==d?void 0:d(f):null==p?void 0:p()}},h?null!==(n=t.connectingLabel)&&void 0!==n?n:\"Connecting\":f?null!==(o=t.disconnectLabel)&&void 0!==o?o:\"Disconnect Web3 Wallet\":null!==(i=t.connectLabel)&&void 0!==i?i:\"Connect Web3 Wallet\")};const hn=__webpack_require__(/*! @radix-ui/react-accordion */ \"(ssr)/./node_modules/@radix-ui/react-accordion/dist/index.js\"),pn=__webpack_require__(/*! @radix-ui/react-alert-dialog */ \"(ssr)/./node_modules/@radix-ui/react-alert-dialog/dist/index.js\"),dn=__webpack_require__(/*! @radix-ui/react-aspect-ratio */ \"(ssr)/./node_modules/@radix-ui/react-aspect-ratio/dist/index.js\"),yn=__webpack_require__(/*! @radix-ui/react-avatar */ \"(ssr)/./node_modules/@radix-ui/react-avatar/dist/index.js\"),vn=__webpack_require__(/*! @radix-ui/react-checkbox */ \"(ssr)/./node_modules/@radix-ui/react-checkbox/dist/index.js\"),mn=__webpack_require__(/*! @radix-ui/react-collapsible */ \"(ssr)/./node_modules/@radix-ui/react-collapsible/dist/index.js\"),gn=__webpack_require__(/*! @radix-ui/react-context-menu */ \"(ssr)/./node_modules/@radix-ui/react-context-menu/dist/index.js\"),bn=__webpack_require__(/*! @radix-ui/react-dialog */ \"(ssr)/./node_modules/@radix-ui/react-dialog/dist/index.js\"),wn=__webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"(ssr)/./node_modules/@radix-ui/react-dropdown-menu/dist/index.js\"),En=__webpack_require__(/*! @radix-ui/react-hover-card */ \"(ssr)/./node_modules/@radix-ui/react-hover-card/dist/index.js\"),xn=__webpack_require__(/*! @radix-ui/react-label */ \"(ssr)/./node_modules/@radix-ui/react-label/dist/index.js\"),Sn=__webpack_require__(/*! @radix-ui/react-menubar */ \"(ssr)/./node_modules/@radix-ui/react-menubar/dist/index.js\"),kn=__webpack_require__(/*! @radix-ui/react-navigation-menu */ \"(ssr)/./node_modules/@radix-ui/react-navigation-menu/dist/index.js\"),On=__webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.js\"),jn=__webpack_require__(/*! @radix-ui/react-progress */ \"(ssr)/./node_modules/@radix-ui/react-progress/dist/index.js\"),In=__webpack_require__(/*! @radix-ui/react-radio-group */ \"(ssr)/./node_modules/@radix-ui/react-radio-group/dist/index.js\"),Pn=__webpack_require__(/*! @radix-ui/react-scroll-area */ \"(ssr)/./node_modules/@radix-ui/react-scroll-area/dist/index.js\"),Ln=__webpack_require__(/*! @radix-ui/react-select */ \"(ssr)/./node_modules/@radix-ui/react-select/dist/index.js\"),An=__webpack_require__(/*! @radix-ui/react-separator */ \"(ssr)/./node_modules/@radix-ui/react-separator/dist/index.js\"),Cn=__webpack_require__(/*! @radix-ui/react-slider */ \"(ssr)/./node_modules/@radix-ui/react-slider/dist/index.js\"),Nn=__webpack_require__(/*! @radix-ui/react-switch */ \"(ssr)/./node_modules/@radix-ui/react-switch/dist/index.js\"),Tn=__webpack_require__(/*! @radix-ui/react-tabs */ \"(ssr)/./node_modules/@radix-ui/react-tabs/dist/index.js\"),_n=__webpack_require__(/*! @radix-ui/react-toast */ \"(ssr)/./node_modules/@radix-ui/react-toast/dist/index.js\"),Bn=__webpack_require__(/*! @radix-ui/react-toggle */ \"(ssr)/./node_modules/@radix-ui/react-toggle/dist/index.js\"),Un=__webpack_require__(/*! @radix-ui/react-toggle-group */ \"(ssr)/./node_modules/@radix-ui/react-toggle-group/dist/index.js\"),Rn=__webpack_require__(/*! @radix-ui/react-toolbar */ \"(ssr)/./node_modules/@radix-ui/react-toolbar/dist/index.js\"),Mn=__webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.js\");var Fn,qn=n(764).lW;function Gn(t,e){var r=\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(!r){if(Array.isArray(t)||(r=Hn(t))||e&&t&&\"number\"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function Dn(t,e,r){return Dn=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&Jn(o,r.prototype),o},Dn.apply(null,arguments)}function Jn(t,e){return Jn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Jn(t,e)}function $n(){return $n=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},$n.apply(this,arguments)}function zn(t){return function(t){if(Array.isArray(t))return Yn(t)}(t)||function(t){if(\"undefined\"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t[\"@@iterator\"])return Array.from(t)}(t)||Hn(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function Vn(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function Wn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,ro(n.key),n)}}function Kn(t,e,r){return e&&Wn(t.prototype,e),r&&Wn(t,r),Object.defineProperty(t,\"prototype\",{writable:!1}),t}function Xn(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||Hn(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function Hn(t,e){if(t){if(\"string\"==typeof t)return Yn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Yn(t,e):void 0}}function Yn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Zn(t){return Zn=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},Zn(t)}function Qn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function to(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Qn(Object(r),!0).forEach((function(e){eo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Qn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function eo(t,e,r){return(e=ro(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ro(t){var e=function(t,e){if(\"object\"!==Zn(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==Zn(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"===Zn(e)?e:String(e)}var no=\"state\",oo=\"private\",io=\"public\",ao={h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,div:!0,span:!0,strong:!0,sub:!0,sup:!0,pre:!0,i:!0,b:!0,p:!0,input:!0,button:!0,fieldset:!0,ul:!0,ol:!0,li:!0,table:!0,tr:!0,th:!0,td:!0,thead:!0,tbody:!0,tfoot:!0,br:!1,hr:!1,img:!1,textarea:!0,select:!0,option:!0,label:!0,small:!0,svg:!0,animate:!1,animateMotion:!1,animateTransform:!1,defs:!0,circle:!0,clipPath:!0,ellipse:!0,g:!0,image:!1,line:!0,linearGradient:!0,marker:!0,mask:!0,mpath:!1,path:!0,pattern:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,set:!1,stop:!1,symbol:!0,text:!0,textPath:!0,tspan:!0,use:!1,a:!0},co={Accordion:hn,AlertDialog:pn,AspectRatio:dn,Avatar:yn,Checkbox:vn,Collapsible:mn,ContextMenu:gn,Dialog:bn,DropdownMenu:wn,HoverCard:En,Label:xn,Menubar:Sn,NavigationMenu:kn,Popover:On,Progress:jn,RadioGroup:In,ScrollArea:Pn,Select:Ln,Separator:An,Slider:Cn,Switch:Nn,Tabs:Tn,Toast:_n,Toggle:Bn,ToggleGroup:Un,Toolbar:Rn,Tooltip:Mn},uo=to(to({},ao),{Widget:!1,CommitButton:!0,IpfsImageUpload:!1,Markdown:!1,Fragment:!0,InfiniteScroll:!0,Typeahead:!1,Tooltip:!0,OverlayTrigger:!0,Files:!0,iframe:!1,Web3Connect:!1}),so={styled:!0},lo=ot(on()({encodeURIComponent,decodeURIComponent,isNaN,parseInt,parseFloat,isFinite,btoa,atob,decodeURI,encodeURI,nacl:{randomBytes:zr.randomBytes,secretbox:zr.secretbox,scalarMult:zr.scalarMult,box:zr.box,sign:zr.sign,hash:zr.hash,verify:zr.verify},ethers:{utils:f.ethers.utils,BigNumber:f.ethers.BigNumber,Contract:f.ethers.Contract,providers:f.ethers.providers},nanoid:{nanoid:rn.nanoid,customAlphabet:rn.customAlphabet},Promise,Date,Number,String,Big:u(),Math,Buffer:qn,Audio,Image,File,Blob,FileReader,URL,Array,BN:$r(),Uint8Array,Map,Set})),fo=(eo(Fn={},it,!0),eo(Fn,\"constructor\",!0),eo(Fn,\"prototype\",!0),eo(Fn,\"__proto__\",!0),eo(Fn,\"__defineGetter__\",!0),eo(Fn,\"__defineSetter__\",!0),eo(Fn,\"__lookupGetter__\",!0),eo(Fn,\"__lookupSetter__\",!0),Fn),ho={ecmaVersion:13,allowReturnOutsideFunction:!0},po={},yo=an.Parser.extend(un()()),vo=function(t){if(!0===fo[t])throw new Error(\"\".concat(t,\" is reserved and can't be used\"))},mo=function(t){if(at(t))throw new Error(\"React objects shouldn't dereferenced\")},go=function t(e){null!==e&&\"object\"===Zn(e)&&Object.entries(e).forEach((function(e){var r=Xn(e,2),n=r[0],o=r[1];vo(n),t(o)}))},bo=function(t){if(t&&Object.keys(co).includes(t.split(\".\")[0])){var e=t.split(\".\").reduce((function(t,e){return t[e]}),co);if(void 0===e)throw new Error('\"'.concat(t,'\" is not a valid Radix component'));return e}},wo=function(t,e){return t&&(null==e||\"final\"===e||\"optimistic\"===e)},Eo=function(t){if(\"Identifier\"!==t.type)throw new Error(\"Non identifier: \"+t.type);var e=t.name;if(vo(e),e in so)throw new Error(\"Cannot use keyword: \"+e);return{type:\"Identifier\",name:e}},xo=function(t){if(\"JSXIdentifier\"!==t.type)throw new Error(\"Non JSXIdentifier: \"+t.type);return t.name},So=function t(e){if(\"JSXIdentifier\"===e.type)return e.name;if(\"JSXMemberExpression\"===e.type)return t(e.object)+\".\"+xo(e.property);throw new Error(\"Non JSXIdentifier or JSXMemberExpression: \"+e.type)},ko=function t(e){if(\"Identifier\"===e.type)return Eo(e);if(\"ArrayPattern\"===e.type)return{type:\"ArrayPattern\",elements:e.elements.map(t)};if(\"ObjectPattern\"===e.type)return{type:\"ObjectPattern\",properties:e.properties.map((function(e){if(\"Property\"===e.type)return{key:Eo(e.key),value:t(e.value)};if(\"RestElement\"===e.type)return{type:\"RestElement\",argument:Eo(e.argument)};throw new Error(\"Unknown property type: \"+e.type)}))};if(\"RestElement\"===e.type)return{type:\"RestElement\",argument:Eo(e.argument)};throw new Error(\"Unknown pattern: \"+e.type)},Oo=function(){function t(e,r){Vn(this,t),this.prevStack=e,this.state=r}return Kn(t,[{key:\"findObj\",value:function(t){return t in this.state?this.state:this.prevStack?this.prevStack.findObj(t):void 0}},{key:\"get\",value:function(t){return t in this.state?this.state[t]:this.prevStack?this.prevStack.get(t):void 0}}]),t}(),jo=function(){function t(e,r,n,o){Vn(this,t),this.gIndex=0,this.hookIndex=0,this.vm=e,this.isTrusted=!!o,this.stack=new Oo(r,n)}return Kn(t,[{key:\"newStack\",value:function(e){return new t(this.vm,this.stack,{},this.isTrusted||!!e)}},{key:\"executeExpression\",value:function(t){return this.executeExpressionInternal(t)}},{key:\"renderElement\",value:function(t){var e,n,o,i=this,a=\"JSXFragment\"===t.type?\"Fragment\":So(t.openingElement.name),c=uo[a],u=null;void 0===c&&this.vm.near.config.customElements.hasOwnProperty(a)&&(c=!0,u=this.vm.near.config.customElements[a]);var s=bo(a),l=void 0===c&&this.executeExpression(t.openingElement.name);if(void 0===c&&!s){if(void 0===l)throw new Error(\"Unknown element: \"+a);if(!(0,qr.isStyledComponent)(l)&&\"function\"!=typeof l)throw new Error(\"Unsupported component: \"+a)}var f={},h={};\"input\"===a?f.className=\"form-control\":\"CommitButton\"===a?f.className=\"btn btn-success\":\"button\"===a?f.className=\"btn btn-primary\":\"IpfsImageUpload\"===a&&(f.className=\"btn btn-outline-primary\");var p,d={};(\"JSXFragment\"===t.type?t.openingFragment:t.openingElement).attributes.forEach((function(t){if(\"JSXAttribute\"===t.type){var e=xo(t.name);f[e]=null===t.value||i.executeExpression(t.value),\"value\"!==e&&\"image\"!==e&&\"onChange\"!==e||(d[e]=t.value)}else{if(\"JSXSpreadAttribute\"!==t.type)throw new Error(\"Unknown attribute type: \"+t.type);var r=i.executeExpression(t.argument);Object.assign(f,r)}})),\"forwardedRef\"===f.ref&&(f=to(to({},f),this.vm.forwardedProps)),Object.entries(d).forEach((function(t){var e=Xn(t,2),r=e[0],n=e[1];if(\"value\"!==r||\"input\"!==a||\"text\"!==f.type||\"JSXExpressionContainer\"!==n.type||\"onChange\"in d){if(\"image\"===r&&\"IpfsImageUpload\"===a&&\"JSXExpressionContainer\"===n.type){var o=i.resolveMemberExpression(n.expression,{requireState:!0,left:!0}),c=o.obj,u=o.key;h.img=c[u],f.onChange=function(t){(null==t?void 0:t.length)>0?(c[u]={uploading:!0,cid:null},i.vm.setReactState(i.vm.state.state),z(t[0]).then((function(t){if(i.vm.alive){var e=i.vm.vmStack.resolveMemberExpression(n.expression,{requireState:!0,left:!0});e.obj[e.key]={cid:t},i.vm.setReactState(i.vm.state.state)}}))):(c[u]=null,i.vm.setReactState(i.vm.state.state))}}}else{var s=i.resolveMemberExpression(n.expression,{requireState:!0,left:!0}),l=s.obj,p=s.key;f.value=(null==l?void 0:l[p])||\"\",f.onChange=function(t){t.preventDefault(),l[p]=t.target.value,i.vm.setReactState(i.vm.state.state)}}})),f.key=null!==(e=f.key)&&void 0!==e?e:\"\".concat(this.vm.widgetSrc,\"-\").concat(a,\"-\").concat(this.vm.gIndex),1==(null===(n=this.vm.near)||void 0===n||null===(o=n.features)||void 0===o?void 0:o.enableComponentSrcDataKey)&&(f[\"data-component\"]=null!==(p=f[\"data-component\"])&&void 0!==p?p:this.vm.widgetSrc),delete f.dangerouslySetInnerHTML,delete f.is;var y,v=(0,qr.isStyledComponent)(l)&&(null==l?void 0:l.target)||a;if(f.as&&!ao[f.as]&&delete f.as,f.forwardedAs&&!ao[f.forwardedAs]&&delete f.forwardedAs,\"img\"===v?f.alt=null!==(y=f.alt)&&void 0!==y?y:\"not defined\":\"a\"===v?Object.entries(f).forEach((function(t){var e=Xn(t,2),r=e[0],n=e[1];\"href\"===r.toLowerCase()&&(f[r]=(0,De.sanitizeUrl)(n))})):\"Widget\"===a?(f.depth=this.vm.depth+1,f.config=[f.config].concat(zn(this.vm.widgetConfigs)).filter(Boolean)):\"CommitButton\"===a&&(f.networkId=this.vm.networkId),!1===c&&t.children.length)throw new Error(\"And element '\"+a+\"' contains children, but shouldn't\");var m,g,b,w,E=t.children.map((function(t,e){return i.vm.gIndex=e,i.executeExpression(t)}));if(u)return u(to(to({},f),{},{children:E}));if(l)return(0,qr.isStyledComponent)(l)?r().createElement.apply(r(),[l,to({},f)].concat(zn(E))):l(to({children:E},f));if(\"Widget\"===a)return r().createElement(Uo,f);if(\"CommitButton\"===a)return r().createElement(Mr,$n({},f,{widgetSrc:this.vm.widgetSrc}),E);if(\"InfiniteScroll\"===a)return r().createElement($e(),f,E);if(\"Tooltip\"===a)return r().createElement(or.Tooltip,f,E);if(\"OverlayTrigger\"===a)return r().createElement(or.OverlayTrigger,f,E.filter((function(t){return!T(t)||!!t.trim()}))[0]);if(\"Typeahead\"===a)return r().createElement(Fr.Typeahead,f);if(\"Markdown\"===a)return r().createElement(Be,f);if(\"Fragment\"===a)return r().createElement(r().Fragment,f,E);if(\"IpfsImageUpload\"===a)return r().createElement(\"div\",{className:\"d-inline-block\",key:f.key},(null===(m=h.img)||void 0===m?void 0:m.cid)&&r().createElement(\"div\",{className:\"d-inline-block me-2 overflow-hidden align-middle\",style:{width:\"2.5em\",height:\"2.5em\"}},r().createElement(\"img\",{className:\"rounded w-100 h-100\",style:{objectFit:\"cover\"},src:V(null===(g=h.img)||void 0===g?void 0:g.cid),alt:\"upload preview\"})),r().createElement(Ge(),$n({multiple:!1,accepts:[\"image/*\"],minFileSize:1,clickable:!0},f),null!==(b=h.img)&&void 0!==b&&b.uploading?r().createElement(r().Fragment,null,P,\" Uploading\"):null!==(w=h.img)&&void 0!==w&&w.cid?\"Replace\":\"Upload an Image\"));if(\"Files\"===a)return r().createElement(Ge(),f,E);if(\"iframe\"===a)return r().createElement(en,f);if(\"Web3Connect\"===a)return r().createElement(fn,f);if(s){if(a.includes(\"Portal\"))throw new Error(\"Radix's \\\"\".concat(a,\"\\\" component is not allowed. This portal element is an optional Radix feature and isn't necessary for most use cases.\"));var x=E;return Array.isArray(x)&&(1===(x=x.filter((function(t){return\"string\"!=typeof t||\"\"!==t.trim()}))).length?x=x[0]:0===x.length&&(x=void 0)),r().createElement(s,f,x)}if(!0===c)return r().createElement.apply(r(),[a,to({},f)].concat(zn(E)));if(!1===c)return r().createElement(a,to({},f));throw new Error(\"Unsupported element: \"+a)}},{key:\"resolveKey\",value:function(t,e){var r=e||\"Identifier\"!==t.type&&\"JSXIdentifier\"!==t.type?this.executeExpression(t):t.name;return vo(r),r}},{key:\"resolveMemberExpression\",value:function(t,e){if(\"Identifier\"===t.type||\"JSXIdentifier\"===t.type){var r,n=t.name;if(vo(n),null!=e&&e.requireState&&n!==no)throw new Error(\"The top object should be \".concat(no));var o=null!==(r=this.stack.findObj(n))&&void 0!==r?r:this.stack.state;if(mo(o),o===this.stack.state&&n in so){if(null!=e&&e.left)throw new Error(\"Cannot assign to keyword '\"+n+\"'\");return{obj:o,key:n,keyword:n}}if(null!=e&&e.left&&(!o||!(n in o)))throw new Error(\"Accessing undeclared identifier '\".concat(t.name,\"'\"));return{obj:o,key:n}}if(\"MemberExpression\"===t.type||\"JSXMemberExpression\"===t.type){var i,a;if(\"Identifier\"===(null===(i=t.object)||void 0===i?void 0:i.type)||\"JSXIdentifier\"===(null===(a=t.object)||void 0===a?void 0:a.type)){var c=t.object.name;if(c in so){if(null==e||!e.callee)throw new Error(\"Cannot dereference keyword '\"+c+\"' in non-call expression\");return{obj:this.stack.state,key:this.resolveKey(t.property,t.computed),keyword:c}}}var u=this.executeExpression(t.object);return mo(u),{obj:u,key:this.resolveKey(t.property,t.computed)}}throw new Error(\"Unsupported member type: '\"+t.type+\"'\")}},{key:\"getArray\",value:function(t){var e=this,r=[];return t.forEach((function(t){\"SpreadElement\"===t.type?r.push.apply(r,zn(e.executeExpression(t.argument))):r.push(e.executeExpression(t))})),r}},{key:\"executeExpressionInternal\",value:function(t){var e=this;if(!t)return null;var r=null==t?void 0:t.type;if(\"AssignmentExpression\"===r){var n,o=this.resolveMemberExpression(t.left,{left:!0}),i=o.obj,a=o.key,c=this.executeExpression(t.right);if(\"=\"===t.operator)return i[a]=c;if(\"+=\"===t.operator)return i[a]+=c;if(\"-=\"===t.operator)return i[a]-=c;if(\"*=\"===t.operator)return i[a]*=c;if(\"/=\"===t.operator)return i[a]/=c;if(\"??=\"===t.operator)return null!==(n=i[a])&&void 0!==n?n:i[a]=c;throw new Error(\"Unknown AssignmentExpression operator '\"+t.operator+\"'\")}if(\"ChainExpression\"===r)return this.executeExpression(t.expression);if(\"MemberExpression\"===r||\"JSXMemberExpression\"===r){var u=this.resolveMemberExpression(t),s=u.obj,l=u.key;return null==s?void 0:s[l]}if(\"Identifier\"===r||\"JSXIdentifier\"===r)return this.stack.get(t.name);if(\"JSXExpressionContainer\"===r)return this.executeExpression(t.expression);if(\"TemplateLiteral\"===r){for(var f=[],h=0;h<t.quasis.length;h++){var p=t.quasis[h];if(\"TemplateElement\"!==p.type)throw new Error(\"Unknown quasis type: \"+p.type);f.push(p.value.cooked),p.tail||f.push(this.executeExpression(t.expressions[h]))}return f.join(\"\")}if(\"CallExpression\"===r||\"NewExpression\"===r){var d=\"NewExpression\"===r,y=this.resolveMemberExpression(t.callee,{callee:!0}),v=y.obj,m=y.key,g=y.keyword,b=this.getArray(t.arguments);if(!g&&(null==v?void 0:v[m])instanceof Function){this.vm.currentVmStack=this;var w=d?Dn(v[m],zn(b)):v[m].apply(v,zn(b));return this.vm.currentVmStack=void 0,w}if(t.optional)return;throw new Error('\"'.concat(m,'\" is not a function'))}if(\"Literal\"===r||\"JSXText\"===r)return t.value;if(\"JSXElement\"===r||\"JSXFragment\"===r)return this.renderElement(t);if(\"JSXExpressionContainer\"===r)return this.executeExpression(t.expression);if(\"BinaryExpression\"===r){var E=this.executeExpression(t.left),x=this.executeExpression(t.right);if(\"+\"===t.operator)return E+x;if(\"-\"===t.operator)return E-x;if(\"%\"===t.operator)return E%x;if(\"*\"===t.operator)return E*x;if(\"/\"===t.operator)return E/x;if(\"<\"===t.operator)return E<x;if(\"|\"===t.operator)return E|x;if(\"&\"===t.operator)return E&x;if(\">\"===t.operator)return E>x;if(\"<=\"===t.operator)return E<=x;if(\">=\"===t.operator)return E>=x;if(\"===\"===t.operator||\"==\"===t.operator)return E===x;if(\"!==\"===t.operator||\"!=\"===t.operator)return E!==x;if(\"in\"===t.operator)return E in x;throw new Error(\"Unknown BinaryExpression operator '\"+t.operator+\"'\")}if(\"UnaryExpression\"===r){if(\"delete\"===t.operator){var S=this.resolveMemberExpression(t.argument,{left:!0}),k=S.obj,O=S.key;return null==k||delete k[O]}var j=this.executeExpression(t.argument);if(\"-\"===t.operator)return-j;if(\"!\"===t.operator)return!j;if(\"typeof\"===t.operator)return Zn(j);throw new Error(\"Unknown UnaryExpression operator '\"+t.operator+\"'\")}if(\"LogicalExpression\"===r){var I=this.executeExpression(t.left);if(\"||\"===t.operator)return I||this.executeExpression(t.right);if(\"&&\"===t.operator)return I&&this.executeExpression(t.right);if(\"??\"===t.operator)return null!=I?I:this.executeExpression(t.right);throw new Error(\"Unknown LogicalExpression operator '\"+t.operator+\"'\")}if(\"ConditionalExpression\"===r)return this.executeExpression(t.test)?this.executeExpression(t.consequent):this.executeExpression(t.alternate);if(\"UpdateExpression\"===r){var P=this.resolveMemberExpression(t.argument,{left:!0}),L=P.obj,A=P.key;if(\"++\"===t.operator)return t.prefix?++L[A]:L[A]++;if(\"--\"===t.operator)return t.prefix?--L[A]:L[A]--;throw new Error(\"Unknown UpdateExpression operator '\"+t.operator+\"'\")}if(\"ObjectExpression\"===r)return t.properties.reduce((function(t,r){if(\"Property\"===r.type)t[e.resolveKey(r.key,r.computed)]=e.executeExpression(r.value);else{if(\"SpreadElement\"!==r.type)throw new Error(\"Unknown property type: \"+r.type);var n=e.executeExpression(r.argument);mo(n),Object.assign(t,n)}return t}),{});if(\"ArrayExpression\"===r)return this.getArray(t.elements);if(\"JSXEmptyExpression\"===r)return null;if(\"ArrowFunctionExpression\"===r)return this.createFunction(t.params,t.body,t.expression);if(\"TaggedTemplateExpression\"===r){var C,N;if(\"MemberExpression\"!==t.tag.type&&\"CallExpression\"!==t.tag.type)throw new Error(\"TaggedTemplateExpression is only supported for `styled` components\");var T=this.resolveMemberExpression(\"MemberExpression\"===t.tag.type?t.tag:t.tag.callee,{callee:!0}),_=T.key;if(\"styled\"!==T.keyword)throw new Error(\"TaggedTemplateExpression is only supported for `styled` components\");if(\"CallExpression\"===t.tag.type){var B,U=this.getArray(t.tag.arguments),R=null==U?void 0:U[0],M=bo(R),F=this.vm.near.config.customElements[R];if(!(0,qr.isStyledComponent)(R)&&!M&&!F)throw new Error('styled() can only take `styled` components, Radix component names (EG: \"Accordion.Trigger\"), or a customElement name (EG: \"Link\")');C=Gr()(null!==(B=null!=F?F:M)&&void 0!==B?B:R)}else{if(\"keyframes\"===_)C=qr.keyframes;else{if(!(_ in ao))throw new Error(\"Unsupported styled tag: \"+_);C=Gr()(_)}N=_}if(\"TemplateLiteral\"!==t.quasi.type)throw new Error(\"Unknown quasi type: \"+t.quasi.type);var q=t.quasi.quasis.map((function(t){if(\"TemplateElement\"!==t.type)throw new Error(\"Unknown quasis type: \"+t.type);return t.value.cooked})),G=0===t.quasi.expressions.length&&\"CallExpression\"!==t.tag.type,D=JSON.stringify([N].concat(zn(q)));if(G&&this.vm.cachedStyledComponents.has(D))return this.vm.cachedStyledComponents.get(D);var J=t.quasi.expressions.map((function(t){return e.executeExpression(t)}));if(C instanceof Function){var $=C.apply(void 0,[q].concat(zn(J)));return G&&this.vm.cachedStyledComponents.set(D,$),$}throw new Error(\"styled error\")}throw console.log(t),new Error(\"Unknown expression type '\"+r+\"'\")}},{key:\"createFunction\",value:function(t,e,r){var n=this;return t=t.map(ko),function(){for(var o,i,a,c=arguments.length,u=new Array(c),s=0;s<c;s++)u[s]=arguments[s];if(n.vm.alive){var l=!!((null==u||null===(o=u[0])||void 0===o?void 0:o.nativeEvent)instanceof Event&&null!=u&&null!==(i=u[0])&&void 0!==i&&i.nativeEvent.isTrusted),f=n.newStack(l);return t.forEach((function(t,e){var r=void 0,n=null==u?void 0:u[e];if(void 0!==n)try{var o,i,a,c,s,l,h,p,d;if((null===(o=n)||void 0===o?void 0:o.nativeEvent)instanceof Event){var y=n;(n=n.nativeEvent)._preventDefault=function(){return y.preventDefault()},n._stopPropagation=function(){return y.stopPropagation()},n._isDefaultPrevented=function(){return y.isDefaultPrevented()},n._isPropagationStopped=function(){return y.isPropagationStopped()}}n instanceof Event?n=ut({target:n.target?ut({value:null===(i=n.target)||void 0===i?void 0:i.value,id:null===(a=n.target)||void 0===a?void 0:a.id,dataset:null===(c=n.target)||void 0===c?void 0:c.dataset,href:null===(s=n.target)||void 0===s?void 0:s.href,checked:null===(l=n.target)||void 0===l?void 0:l.checked}):void 0,data:n.data,code:n.code,key:n.key,ctrlKey:n.ctrlKey,altKey:n.altKey,shiftKey:n.shiftKey,metaKey:n.metaKey,button:n.button,buttons:n.buttons,clientX:n.clientX,clientY:n.clientY,screenX:n.screenX,screenY:n.screenY,touches:n.touches,preventDefault:null!==(h=n._preventDefault)&&void 0!==h?h:n.preventDefault,stopPropagation:null!==(p=n._stopPropagation)&&void 0!==p?p:n.stopPropagation,defaultPrevented:n.defaultPrevented,isDefaultPrevented:null!==(d=n._isDefaultPrevented)&&void 0!==d?d:function(){return n.defaultPrevented},isPropagationStopped:n._isPropagationStopped}):n instanceof Error&&(n=ut({type:n.type,name:n.name,message:n.message})),r=ct(n)}catch(t){console.warn(t)}f.stackDeclare(t,r)})),r?f.executeExpression(e):null===(a=f.executeStatement(e))||void 0===a?void 0:a.result}}}},{key:\"stackDeclare\",value:function(t,e){var r=this;if(\"Identifier\"===t.type)this.stack.state[t.name]=e;else if(\"ArrayPattern\"===t.type)mo(e),t.elements.forEach((function(t,n){\"RestElement\"===t.type?r.stackDeclare(t.argument,e.slice(n)):r.stackDeclare(t,null==e?void 0:e[n])}));else{if(\"ObjectPattern\"!==t.type)throw new Error(\"Unknown pattern type: \"+t.type);mo(e);var n=new Set;t.properties.forEach((function(t){if(\"RestElement\"===t.type){var o={};N(e)&&(Object.assign(o,e),n.forEach((function(t){return delete o[t]}))),r.stackDeclare(t.argument,o)}else r.stackDeclare(t.value,null==e?void 0:e[t.key.name]),n.add(t.key.name)}))}}},{key:\"executeStatement\",value:function(t){var e=this;if(!t||\"EmptyStatement\"===t.type)return null;if(\"VariableDeclaration\"===t.type)t.declarations.forEach((function(t){if(\"VariableDeclarator\"!==t.type)throw new Error(\"Unknown variable declaration type '\"+t.type+\"'\");e.stackDeclare(ko(t.id),e.executeExpression(t.init))}));else{if(\"ReturnStatement\"===t.type)return{result:this.executeExpression(t.argument)};if(\"FunctionDeclaration\"===t.type)this.stackDeclare(Eo(t.id),this.createFunction(t.params,t.body,t.expression));else if(\"ExpressionStatement\"===t.type)this.executeExpression(t.expression);else if(\"BlockStatement\"===t.type||\"Program\"===t.type)for(var r=t.body,n=this.newStack(),o=0;o<r.length;o++){var i=n.executeStatement(r[o]);if(i)return i}else if(\"ForStatement\"===t.type){var a=this.newStack();for(a.executeStatement(t.init);this.vm.loopLimit-- >0&&(!t.test||a.executeExpression(t.test));){var c=a.executeStatement(t.body);if(c){if(c.break)break;if(!c.continue)return c}a.executeExpression(t.update)}if(this.vm.loopLimit<=0)throw new Error(\"Exceeded loop limit\")}else if(\"ForOfStatement\"===t.type){var u=this.newStack(),s=u.executeExpression(t.right);mo(s);var l,f=Gn(s);try{var h=function(){var r=l.value;if(e.vm.loopLimit--<=0)throw new Error(\"Exceeded loop limit\");if(\"VariableDeclaration\"===t.left.type){if(1!==t.left.declarations.length)throw new Error(\"Invalid for-of statement\");t.left.declarations.forEach((function(t){if(\"VariableDeclarator\"!==t.type)throw new Error(\"Unknown variable declaration type '\"+t.type+\"'\");e.stackDeclare(ko(t.id),r)}))}else{var n=e.resolveMemberExpression(t.left,{left:!0});n.obj[n.key]=r}var o=u.executeStatement(t.body);if(o){if(o.break)return\"break\";if(!o.continue)return{v:o}}};for(f.s();!(l=f.n()).done;){var p=h();if(\"break\"===p)break;if(\"object\"===Zn(p))return p.v}}catch(t){f.e(t)}finally{f.f()}}else if(\"WhileStatement\"===t.type){for(var d=this.newStack();this.vm.loopLimit-- >0&&d.executeExpression(t.test);){var y=d.executeStatement(t.body);if(y){if(y.break)break;if(!y.continue)return y}}if(this.vm.loopLimit<=0)throw new Error(\"Exceeded loop limit\")}else if(\"IfStatement\"===t.type){var v=this.executeExpression(t.test),m=this.newStack(),g=v?m.executeStatement(t.consequent):m.executeStatement(t.alternate);if(g)return g}else{if(\"BreakStatement\"===t.type)return{break:!0};if(\"ContinueStatement\"===t.type)return{continue:!0};if(\"ThrowStatement\"===t.type)throw this.executeExpression(t.argument);if(\"TryStatement\"===t.type)try{var b=this.newStack().executeStatement(t.block);if(b)return b}catch(e){if(!this.vm.alive||!t.handler)return null;if(\"CatchClause\"!==t.handler.type)throw new Error(\"Unknown try statement handler type '\"+t.handler.type+\"'\");var w=this.newStack();t.handler.param&&w.stackDeclare(Eo(t.handler.param),ct(e instanceof Error?{name:null==e?void 0:e.name,message:null==e?void 0:e.message,toString:function(){return e.toString()}}:e));var E=w.executeStatement(t.handler.body);if(E)return E}finally{this.vm.alive&&this.newStack().executeStatement(t.finalizer)}else{if(\"SwitchStatement\"!==t.type)throw new Error(\"Unknown token type '\"+t.type+\"'\");var x,S=this.executeExpression(t.discriminant),k=this.newStack(),O=!1,j=Gn(t.cases);try{for(j.s();!(x=j.n()).done;){var I=x.value;if(\"SwitchCase\"!==I.type)throw new Error(\"Unknown switch case type '\"+I.type+\"'\");if(O||null===I.test||k.executeExpression(I.test)===S){O=!0;var P,L=!1,A=Gn(I.consequent);try{for(A.s();!(P=A.n()).done;){var C=P.value,N=k.executeStatement(C);if(N){if(N.break){L=!0;break}return N}}}catch(t){A.e(t)}finally{A.f()}if(L)break}}}catch(t){j.e(t)}finally{j.f()}}}}return null}}]),t}(),Io=function(){function t(e){var r,n=this;Vn(this,t);var o,i=e.near,a=e.rawCode,c=e.setReactState,u=e.cache,s=e.refreshCache,l=e.confirmTransactions,h=e.depth,p=e.widgetSrc,d=e.requestCommit,y=e.version,v=e.widgetConfigs,m=e.ethersProviderContext,g=e.isModule;this.alive=!0,this.isModule=g,this.rawCode=a,this.near=i;try{this.code=(o=a)in po?po[o]:po[o]=yo.parse(o,ho),this.compileError=null}catch(t){this.code=null,this.compileError=t,console.error(t)}this.code?(this.setReactState=c?function(t){return c({hooks:n.hooks,state:N(t)?Object.assign({},t):t})}:function(){throw new Error(\"State is unavailable for modules\")},this.setReactHook=c?function(t,e){n.hooks[t]=e,c({hooks:n.hooks,state:n.state.state})}:function(){throw new Error(\"State is unavailable for modules\")},this.cache=u,this.refreshCache=s,this.confirmTransactions=l,this.depth=null!=h?h:0,this.widgetSrc=p,this.requestCommit=d,this.version=y,this.cachedStyledComponents=new Map,this.widgetConfigs=v,this.ethersProviderContext=m,this.ethersProvider=null!=m&&m.provider?new f.ethers.providers.Web3Provider(m.provider):null,this.timeouts=new Set,this.intervals=new Set,this.websockets=[],this.vmInstances=new Map,this.networkId=(null===(r=v.findLast((function(t){return t&&t.networkId})))||void 0===r?void 0:r.networkId)||i.config.networkId,this.globalFunctions=this.initGlobalFunctions()):this.alive=!1}return Kn(t,[{key:\"stop\",value:function(){this.alive&&(this.alive=!1,this.timeouts.forEach((function(t){return clearTimeout(t)})),this.intervals.forEach((function(t){return clearInterval(t)})),this.websockets.forEach((function(t){return t.close()})),this.vmInstances.forEach((function(t){return t.stop()})))}},{key:\"initGlobalFunctions\",value:function(){var t=this,e={getr:function(){if(arguments.length<1)throw new Error(\"Missing argument 'keys' for Social.getr\");return t.cachedSocialGet(arguments.length<=0?void 0:arguments[0],!0,arguments.length<=1?void 0:arguments[1],arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3])},get:function(){if(arguments.length<1)throw new Error(\"Missing argument 'keys' for Social.get\");return t.cachedSocialGet(arguments.length<=0?void 0:arguments[0],!1,arguments.length<=1?void 0:arguments[1],arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3])},keys:function(){if(arguments.length<1)throw new Error(\"Missing argument 'keys' for Social.keys\");return t.cachedSocialKeys.apply(t,arguments)},index:function(){if(arguments.length<2)throw new Error(\"Missing argument 'action' and 'key` for Social.index\");return t.cachedIndex.apply(t,arguments)},set:function(){if(arguments.length<1)throw new Error(\"Missing argument 'data' for Social.set\");return t.socialSet(arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1])}},r={view:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];if(r.length<2)throw new Error(\"Method: Near.view. Required arguments: 'contractName', 'methodName'. Optional: 'args', 'blockId/finality', 'subscribe', 'cacheOptions'\");var o=r[0],i=r[1],a=r[2],c=r[3],u=r[4],s=r[5];return t.cachedNearView(o,i,a,c,wo(u,c),s)},asyncView:function(){if(arguments.length<2)throw new Error(\"Method: Near.asyncView. Required arguments: 'contractName', 'methodName'. Optional: 'args', 'blockId/finality'\");return t.asyncNearView.apply(t,arguments)},block:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=r[0],i=r[1],a=r[2];return t.cachedNearBlock(o,wo(i,o),a)},call:function(){if(1===arguments.length){if(N(arguments.length<=0?void 0:arguments[0]))return t.confirmTransactions([arguments.length<=0?void 0:arguments[0]]);if(C(arguments.length<=0?void 0:arguments[0]))return t.confirmTransactions(arguments.length<=0?void 0:arguments[0]);throw new Error(\"Method: Near.call. Required argument: 'tx/txs'. A single argument call requires an TX object or an array of TX objects.\")}var e;if(arguments.length<2||arguments.length>5)throw new Error(\"Method: Near.call. Required argument: 'contractName'. If the first argument is a string: 'methodName'. Optional: 'args', 'gas' (defaults to 300Tg), 'deposit' (defaults to 0)\");return t.confirmTransactions([{contractName:arguments.length<=0?void 0:arguments[0],methodName:arguments.length<=1?void 0:arguments[1],args:null!==(e=arguments.length<=2?void 0:arguments[2])&&void 0!==e?e:{},gas:arguments.length<=3?void 0:arguments[3],deposit:arguments.length<=4?void 0:arguments[4]}])}},n={stringify:function(){if(arguments.length<1)throw new Error(\"Missing argument 'obj' for JSON.stringify\");return mo(arguments.length<=0?void 0:arguments[0]),JSON.stringify(arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1],arguments.length<=2?void 0:arguments[2])},parse:function(){if(arguments.length<1)throw new Error(\"Missing argument 's' for JSON.parse\");try{var t=JSON.parse(arguments.length<=0?void 0:arguments[0]);return go(t),t}catch(t){return null}}},o={keys:function(){if(arguments.length<1)throw new Error(\"Missing argument 'obj' for Object.keys\");return mo(arguments.length<=0?void 0:arguments[0]),Object.keys(arguments.length<=0?void 0:arguments[0])},values:function(){if(arguments.length<1)throw new Error(\"Missing argument 'obj' for Object.values\");return mo(arguments.length<=0?void 0:arguments[0]),Object.values(arguments.length<=0?void 0:arguments[0])},entries:function(){if(arguments.length<1)throw new Error(\"Missing argument 'obj' for Object.entries\");return mo(arguments.length<=0?void 0:arguments[0]),Object.entries(arguments.length<=0?void 0:arguments[0])},assign:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return mo(t)}));var n=Object.assign.apply(Object,e);return go(n),n},fromEntries:function(){var t=Object.fromEntries(arguments.length<=0?void 0:arguments[0]);return go(t),t}},i={init:function(){if(arguments.length<1)throw new Error(\"Missing argument 'initialState' for State.init\");if(null===(arguments.length<=0?void 0:arguments[0])||\"object\"!==Zn(arguments.length<=0?void 0:arguments[0])||at(arguments.length<=0?void 0:arguments[0]))throw new Error(\"'initialState' is not an object\");if(void 0===t.state.state){var e=arguments.length<=0?void 0:arguments[0];t.state.state=e,t.setReactState(e)}return t.state.state},update:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o;if(N(r[0]))t.state.state=null!==(o=t.state.state)&&void 0!==o?o:{},Object.assign(t.state.state,r[0]);else if(r[0]instanceof Function){var i;t.state.state=null!==(i=t.state.state)&&void 0!==i?i:{},t.state.state=r[0](t.state.state)}if(void 0===t.state.state)throw new Error(\"The state was not initialized\");return t.setReactState(t.state.state),t.state.state},get:function(){return t.state.state}},a={privateSet:function(){if(arguments.length<2)throw new Error(\"Missing argument 'key' or 'value' for Storage.privateSet\");return t.storageSet({src:t.widgetSrc,type:oo},arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1])},privateGet:function(){if(arguments.length<1)throw new Error(\"Missing argument 'key' for Storage.privateGet\");return t.storageGet({src:t.widgetSrc,type:oo},arguments.length<=0?void 0:arguments[0])},set:function(){if(arguments.length<2)throw new Error(\"Missing argument 'key' or 'value' for Storage.set\");return t.storageSet({src:t.widgetSrc,type:io},arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1])},get:function(){var e;if(arguments.length<1)throw new Error(\"Missing argument 'key' for Storage.get. Optional argument: `widgetSrc`\");return t.storageGet({src:null!==(e=arguments.length<=1?void 0:arguments[1])&&void 0!==e?e:t.widgetSrc,type:io},arguments.length<=0?void 0:arguments[0])}},c={log:function(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=console).log.apply(e,[t.widgetSrc].concat(n))},warn:function(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=console).warn.apply(e,[t.widgetSrc].concat(n))},error:function(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=console).error.apply(e,[t.widgetSrc].concat(n))},info:function(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=console).info.apply(e,[t.widgetSrc].concat(n))}},u={provider:function(){return t.ethersProvider},setChain:function(){var e,r=null===(e=t.ethersProviderContext)||void 0===e?void 0:e.setChain;if(!r)throw new Error(\"The gateway doesn't support `setChain` operation\");return r.apply(void 0,arguments)},send:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return t.cachedEthersCall(\"send\",r)}},s=function(e){var r;if(!t.currentVmStack||null!==(r=t.currentVmStack)&&void 0!==r&&r.prevStack)throw new Error(\"Method: \".concat(e,\". The hook can only be called from the top of the stack\"));if(!t.hooks)throw new Error(\"Hooks are unavailable for modules\");var n=\"useMemo\"===e,o=n?\"factory\":\"callback\";if((arguments.length<=1?0:arguments.length-1)<1)throw new Error(\"Method: \".concat(e,\". Required arguments: '\").concat(o,\"'. Optional: 'dependencies'\"));var i=arguments.length<=1?void 0:arguments[1];if(!_(i))throw new Error(\"Method: \".concat(e,\". The first argument '\").concat(o,\"' must be a function\"));var a=t.currentVmStack.hookIndex++,c=arguments.length<=2?void 0:arguments[2],u=t.hooks[a];if(u){var s=u.dependencies;if(void 0!==s&&st(s,c))return u.memoized}var l=n?i():i;return t.setReactHook(a,{memoized:l,dependencies:c}),l};return ot({socialGetr:e.getr,socialGet:e.get,Social:e,Near:r,stringify:n.stringify,JSON:n,Object:o,initState:i.init,State:i,Storage:a,console:c,clipboard:{writeText:function(){var e,r;return null!==(e=t.currentVmStack)&&void 0!==e&&e.isTrusted?(r=navigator.clipboard).writeText.apply(r,arguments):Promise.reject(new Error(\"Not trusted (not a click)\"))}},VM:{require:this.vmRequire.bind(this)},Ethers:u,WebSocket:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=Dn(WebSocket,r);return t.websockets.push(o),o})),fetch:function(){if(arguments.length<1)throw new Error(\"Method: fetch. Required arguments: 'url'. Optional: 'options'\");return t.cachedFetch.apply(t,arguments)},asyncFetch:function(){if(arguments.length<1)throw new Error(\"Method: asyncFetch. Required arguments: 'url'. Optional: 'options'\");return t.asyncFetch.apply(t,arguments)},useCache:function(){if(arguments.length<2)throw new Error(\"Method: useCache. Required arguments: 'promiseGenerator', 'dataKey'. Optional: 'options'\");if(!_(arguments.length<=0?void 0:arguments[0]))throw new Error(\"Method: useCache. The first argument 'promiseGenerator' must be a function\");return t.useCache.apply(t,arguments)},useState:function(){var e;if(!t.currentVmStack||null!==(e=t.currentVmStack)&&void 0!==e&&e.prevStack)throw new Error(\"Method: useState. The hook can an only be called from the top of the stack\");if(!t.hooks)throw new Error(\"Hooks are unavailable for modules\");if(arguments.length<1)throw new Error(\"Method: useState. Required arguments: 'initialState'\");var r=arguments.length<=0?void 0:arguments[0],n=t.currentVmStack.hookIndex++,o=t.hooks[n];if(o)return[o.state,o.setState];var i=function e(r){var o;return _(r)&&(r=r(null===(o=t.hooks[n])||void 0===o?void 0:o.state)),t.setReactHook(n,{state:r,setState:e}),r};return[i(r),i]},useEffect:function(){var e;if(!t.currentVmStack||null!==(e=t.currentVmStack)&&void 0!==e&&e.prevStack)throw new Error(\"Method: useEffect. The hook can an only be called from the top of the stack\");if(!t.hooks)throw new Error(\"Hooks are unavailable for modules\");if(arguments.length<1)throw new Error(\"Method: useEffect. Required arguments: 'setup'. Optional: 'dependencies'\");var r=arguments.length<=0?void 0:arguments[0];if(!_(r))throw new Error(\"Method: useEffect. The first argument 'setup' must be a function\");var n=t.currentVmStack.hookIndex++,o=arguments.length<=1?void 0:arguments[1],i=t.hooks[n];if(i){var a=i.dependencies;if(void 0!==a&&st(a,o))return}var c=null==i?void 0:i.cleanup;_(c)&&c(),t.setReactHook(n,{cleanup:r(),dependencies:o})},useMemo:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return s.apply(void 0,[\"useMemo\"].concat(e))},useCallback:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return s.apply(void 0,[\"useCallback\"].concat(e))},setTimeout:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=r[0],i=r[1],a=setTimeout((function(){t.alive&&o()}),i);return t.timeouts.add(a),a})),setInterval:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(){if(t.intervals.size>=16)throw new Error(\"Too many intervals. Max allowed: \".concat(16));for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=r[0],i=r[1],a=setInterval((function(){t.alive&&o()}),i);return t.intervals.add(a),a})),clearTimeout:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(){var e=arguments.length<=0?void 0:arguments[0];return t.timeouts.delete(e),clearTimeout(e)})),clearInterval:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(){var e=arguments.length<=0?void 0:arguments[0];return t.intervals.delete(e),clearInterval(e)}))})}},{key:\"cachedPromise\",value:function(t,e){var r=this;return ct(t({onInvalidate:function(){r.alive&&r.refreshCache()},subscribe:!!e}))}},{key:\"cachedSocialGet\",value:function(t,e,r,n,o){var i=this;return t=Array.isArray(t)?t:[t],this.cachedPromise((function(a){return i.cache.socialGet(i.near,t,e,r,n,a,o)}),null==n?void 0:n.subscribe)}},{key:\"storageGet\",value:function(t,e){var r=this;return this.cachedPromise((function(n){return r.cache.localStorageGet(t,e,n)}))}},{key:\"storageSet\",value:function(t,e,r){return this.cache.localStorageSet(t,e,r)}},{key:\"cachedSocialKeys\",value:function(t,e,r,n){var o=this;return t=Array.isArray(t)?t:[t],this.cachedPromise((function(i){return o.cache.cachedViewCall(o.near,o.near.config.contractName,\"keys\",{keys:t,options:r},e,i,n)}),null==r?void 0:r.subscribe)}},{key:\"asyncNearView\",value:function(t,e,r,n){return this.near.viewCall(t,e,r,n)}},{key:\"cachedEthersCall\",value:function(t,e,r,n){var o=this;return this.cachedPromise((function(r){return o.cache.cachedEthersCall(o.ethersProvider,t,e,r,n)}),r)}},{key:\"cachedNearView\",value:function(t,e,r,n,o,i){var a=this;return this.cachedPromise((function(o){return a.cache.cachedViewCall(a.near,t,e,r,n,o,i)}),o)}},{key:\"cachedNearBlock\",value:function(t,e,r){var n=this;return this.cachedPromise((function(e){return n.cache.cachedBlock(n.near,t,e,r)}),e)}},{key:\"asyncFetch\",value:function(t,e){return this.cache.asyncFetch(t,e)}},{key:\"cachedFetch\",value:function(t,e,r){var n=this;return this.cachedPromise((function(o){return n.cache.cachedFetch(t,e,o,r)}),null==e?void 0:e.subscribe)}},{key:\"cachedIndex\",value:function(t,e,r,n){var o=this;return this.cachedPromise((function(i){return o.cache.socialIndex(o.near,t,e,r,i,n)}),null==r?void 0:r.subscribe)}},{key:\"useCache\",value:function(t,e,r,n){var o=this;return this.cachedPromise((function(r){return o.cache.cachedCustomPromise({widgetSrc:o.widgetSrc,dataKey:e},t,r,n)}),null==r?void 0:r.subscribe)}},{key:\"socialSet\",value:function(t,e){return this.requestCommit({data:t,force:null==e?void 0:e.force,onCommit:null==e?void 0:e.onCommit,onCancel:null==e?void 0:e.onCancel})}},{key:\"vmRequire\",value:function(t){var e,r=lt(t,null,this.widgetConfigs);if(null!=r&&r.src){var n=Xn(r.src.split(\"@\"),2),o=n[0],i=n[1];if(!(e=this.cachedSocialGet(o.toString(),!1,i,void 0)))return e}else null!=r&&r.code&&(e=r.code);return this.getVmInstance(e,null==r?void 0:r.src).execCode({context:ct(this.context),forwardedProps:this.forwardedProps})}},{key:\"getVmInstance\",value:function(e,r){if(this.vmInstances.has(e)){var n=this.vmInstances.get(e);if(n.rawCode===e)return n;n.stop(),this.vmInstances.delete(e)}var o=new t({near:this.near,rawCode:e,cache:this.cache,refreshCache:this.refreshCache,confirmTransactions:this.confirmTransactions,depth:this.depth+1,widgetSrc:r,requestCommit:this.requestCommit,version:this.version,widgetConfigs:this.widgetConfigs,ethersProviderContext:this.ethersProviderContext,isModule:!0});return this.vmInstances.set(e,o),o}},{key:\"renderCode\",value:function(t){if(this.compileError)return r().createElement(\"div\",{className:\"alert alert-danger\"},\"Compilation error:\",r().createElement(\"pre\",null,this.compileError.message),r().createElement(\"pre\",null,this.compileError.stack));if(!this.alive)return r().createElement(\"div\",{className:\"alert alert-danger\"},\"VM is dead\");var e=this.execCode(t);return at(e)||\"string\"==typeof e||\"number\"==typeof e?e:r().createElement(\"pre\",null,JSON.stringify(e,void 0,2))}},{key:\"execCode\",value:function(t){var e=t.props,r=t.context,n=t.reactState,o=t.forwardedProps;if(this.compileError)throw this.compileError;if(this.depth>=32)return\"Too deep\";this.gIndex=0;var i=null!=n?n:{},a=i.hooks,c=i.state;this.hooks=a,this.state=to(to(to({},lo),this.globalFunctions),{},{props:N(e)?Object.assign({},e):e,context:r,state:c,get elliptic(){return delete this.elliptic,this.elliptic=on()(Dr),this.elliptic}}),this.forwardedProps=o,this.loopLimit=1e6,this.vmStack=new jo(this,void 0,this.state);var u=this.vmStack.executeStatement(this.code);if(null!=u&&u.break)throw new Error(\"BreakStatement outside of a loop\");if(null!=u&&u.continue)throw new Error(\"ContinueStatement outside of a loop\");return null==u?void 0:u.result}}]),t}();const Po=__webpack_require__(/*! react-error-boundary */ \"(ssr)/./node_modules/react-error-boundary/dist/react-error-boundary.cjs.js\");function Lo(t){return Lo=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},Lo(t)}var Ao=[\"loading\",\"src\",\"code\",\"depth\",\"config\",\"props\"];function Co(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function No(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Co(Object(r),!0).forEach((function(e){To(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Co(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function To(t,e,r){return(e=function(t){var e=function(t,e){if(\"object\"!==Lo(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,\"string\");if(\"object\"!==Lo(n))return n;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"===Lo(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null!=r){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,e)||function(t,e){if(t){if(\"string\"==typeof t)return Bo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Bo(t,e):void 0}}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function Bo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Uo=r().forwardRef((function(t,n){var o,i=t.loading,a=t.src,c=t.code,s=t.depth,l=t.config,f=t.props,h=function(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}(t,Ao),p=_o((0,e.useState)(0),2),d=p[0],y=p[1],v=_o((0,e.useState)(null),2),m=v[0],g=v[1],b=_o((0,e.useState)(null),2),E=b[0],x=b[1],S=_o((0,e.useState)({hooks:[],state:void 0}),2),k=S[0],O=S[1],j=_o((0,e.useState)(0),2),I=j[0],A=j[1],C=_o((0,e.useState)({}),2),N=C[0],T=C[1],_=_o((0,e.useState)(null),2),B=_[0],U=_[1],R=_o((0,e.useState)(null),2),M=R[0],F=R[1],q=_o((0,e.useState)(null),2),G=q[0],D=q[1],J=_o((0,e.useState)(null),2),$=J[0],z=J[1],V=_o((0,e.useState)(null),2),W=V[0],K=V[1],X=_o((0,e.useState)(null),2),H=X[0],Y=X[1],Z=(0,e.useContext)(ln),Q=W&&(null===(o=W.findLast((function(t){return t&&t.networkId})))||void 0===o?void 0:o.networkId),tt=jr(Q),et=Dt(Q),rt=se(Q),nt=_o((0,e.useState)(null),2),ot=nt[0],it=nt[1];(0,e.useEffect)((function(){var t=l?Array.isArray(l)?l:[l]:[];st(t,W)||K(t)}),[l,W]),(0,e.useEffect)((function(){var t=lt(a,c,W);st(t,H)||Y(t)}),[a,c,W,H]),(0,e.useEffect)((function(){if(et)if(null!=H&&H.src){var t=H.src,e=_o(t.split(\"@\"),2),r=e[0],n=e[1],o=tt.socialGet(et,r.toString(),!1,n,void 0,(function(){y(d+1)}));g(o),x(t)}else null!=H&&H.code&&(g(H.code),x(null))}),[et,H,d]),(0,e.useEffect)((function(){U(null),it(null),m||void 0===m&&it(r().createElement(\"div\",{className:\"alert alert-danger\"},'Source code for \"',E,'\" is not found'))}),[m,E]);var at=(0,e.useCallback)((function(t){if(!et||!t||0===t.length)return null;t=t.map((function(t){return{contractName:t.contractName,methodName:t.methodName,args:t.args||{},deposit:t.deposit?u()(t.deposit):u()(0),gas:t.gas?u()(t.gas):w.mul(30)}})),console.log(\"confirm txs\",t),F(t)}),[et]),ut=(0,e.useCallback)((function(t){if(!et)return null;console.log(\"commit requested\",t),D(t)}),[et]);return(0,e.useEffect)((function(){if(et&&m){O({hooks:[],state:void 0});var t=new Io({near:et,rawCode:m,setReactState:O,cache:tt,refreshCache:function(){A((function(t){return t+1}))},confirmTransactions:at,depth:s,widgetSrc:E,requestCommit:ut,version:Re()(),widgetConfigs:W,ethersProviderContext:Z});return U(t),function(){t.stop()}}}),[E,et,m,s,ut,at,W,Z]),(0,e.useEffect)((function(){et&&T({loading:!1,accountId:null!=rt?rt:null,widgetSrc:E,networkId:et.config.networkId})}),[et,rt,E]),(0,e.useLayoutEffect)((function(){if(B){var t={props:f||{},context:N,reactState:k,cacheNonce:I,version:B.version,forwardedProps:No(No({},h),{},{ref:n})};if(!st(t,$)){z(ct(t));try{var e;it(null!==(e=B.renderCode(t))&&void 0!==e?e:\"Execution failed\")}catch(t){it(r().createElement(\"div\",{className:\"alert alert-danger\"},\"Execution error:\",r().createElement(\"pre\",null,t.message),r().createElement(\"pre\",null,t.stack))),console.error(t)}}}}),[B,f,N,k,I,$,n,h]),null!=ot?r().createElement(Po.ErrorBoundary,{FallbackComponent:L,onReset:function(){it(null)},resetKeys:[ot]},r().createElement(r().Fragment,null,ot,M&&r().createElement(Fe,{transactions:M,onHide:function(){return F(null)},networkId:Q}),G&&r().createElement(Rr,{show:!0,widgetSrc:E,data:G.data,force:G.force,onHide:function(){return D(null)},onCommit:G.onCommit,onCancel:G.onCancel,networkId:Q}))):null!=i?i:P}))})(),o})()));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"abi/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvX3ZlcnNpb24uanM/ZWNhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwiYWJpLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/abi-coder.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/abi-coder.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultAbiCoder = exports.AbiCoder = void 0;\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar abstract_coder_1 = __webpack_require__(/*! ./coders/abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar address_1 = __webpack_require__(/*! ./coders/address */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/address.js\");\nvar array_1 = __webpack_require__(/*! ./coders/array */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/array.js\");\nvar boolean_1 = __webpack_require__(/*! ./coders/boolean */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/boolean.js\");\nvar bytes_2 = __webpack_require__(/*! ./coders/bytes */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/bytes.js\");\nvar fixed_bytes_1 = __webpack_require__(/*! ./coders/fixed-bytes */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js\");\nvar null_1 = __webpack_require__(/*! ./coders/null */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/null.js\");\nvar number_1 = __webpack_require__(/*! ./coders/number */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/number.js\");\nvar string_1 = __webpack_require__(/*! ./coders/string */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/string.js\");\nvar tuple_1 = __webpack_require__(/*! ./coders/tuple */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/tuple.js\");\nvar fragments_1 = __webpack_require__(/*! ./fragments */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/fragments.js\");\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nvar AbiCoder = /** @class */ (function () {\n    function AbiCoder(coerceFunc) {\n        (0, properties_1.defineReadOnly)(this, \"coerceFunc\", coerceFunc || null);\n    }\n    AbiCoder.prototype._getCoder = function (param) {\n        var _this = this;\n        switch (param.baseType) {\n            case \"address\":\n                return new address_1.AddressCoder(param.name);\n            case \"bool\":\n                return new boolean_1.BooleanCoder(param.name);\n            case \"string\":\n                return new string_1.StringCoder(param.name);\n            case \"bytes\":\n                return new bytes_2.BytesCoder(param.name);\n            case \"array\":\n                return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new tuple_1.TupleCoder((param.components || []).map(function (component) {\n                    return _this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new null_1.NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        var match = param.type.match(paramTypeNumber);\n        if (match) {\n            var size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new number_1.NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            var size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new fixed_bytes_1.FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    };\n    AbiCoder.prototype._getWordSize = function () { return 32; };\n    AbiCoder.prototype._getReader = function (data, allowLoose) {\n        return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    };\n    AbiCoder.prototype._getWriter = function () {\n        return new abstract_coder_1.Writer(this._getWordSize());\n    };\n    AbiCoder.prototype.getDefaultValue = function (types) {\n        var _this = this;\n        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });\n        var coder = new tuple_1.TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    };\n    AbiCoder.prototype.encode = function (types, values) {\n        var _this = this;\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });\n        var coder = (new tuple_1.TupleCoder(coders, \"_\"));\n        var writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    };\n    AbiCoder.prototype.decode = function (types, data, loose) {\n        var _this = this;\n        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });\n        var coder = new tuple_1.TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader((0, bytes_1.arrayify)(data), loose));\n    };\n    return AbiCoder;\n}());\nexports.AbiCoder = AbiCoder;\nexports.defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/abi-coder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = void 0;\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ../_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction checkResultErrors(result) {\n    // Find the first error (if any)\n    var errors = [];\n    var checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (var key in object) {\n            var childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexports.checkResultErrors = checkResultErrors;\nvar Coder = /** @class */ (function () {\n    function Coder(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    Coder.prototype._throwError = function (message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    };\n    return Coder;\n}());\nexports.Coder = Coder;\nvar Writer = /** @class */ (function () {\n    function Writer(wordSize) {\n        (0, properties_1.defineReadOnly)(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    Object.defineProperty(Writer.prototype, \"data\", {\n        get: function () {\n            return (0, bytes_1.hexConcat)(this._data);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Writer.prototype, \"length\", {\n        get: function () { return this._dataLength; },\n        enumerable: false,\n        configurable: true\n    });\n    Writer.prototype._writeData = function (data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    };\n    Writer.prototype.appendWriter = function (writer) {\n        return this._writeData((0, bytes_1.concat)(writer._data));\n    };\n    // Arrayish items; padded on the right to wordSize\n    Writer.prototype.writeBytes = function (value) {\n        var bytes = (0, bytes_1.arrayify)(value);\n        var paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = (0, bytes_1.concat)([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    };\n    Writer.prototype._getValue = function (value) {\n        var bytes = (0, bytes_1.arrayify)(bignumber_1.BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", logger_1.Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = (0, bytes_1.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    };\n    // BigNumberish items; padded on the left to wordSize\n    Writer.prototype.writeValue = function (value) {\n        return this._writeData(this._getValue(value));\n    };\n    Writer.prototype.writeUpdatableValue = function () {\n        var _this = this;\n        var offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return function (value) {\n            _this._data[offset] = _this._getValue(value);\n        };\n    };\n    return Writer;\n}());\nexports.Writer = Writer;\nvar Reader = /** @class */ (function () {\n    function Reader(data, wordSize, coerceFunc, allowLoose) {\n        (0, properties_1.defineReadOnly)(this, \"_data\", (0, bytes_1.arrayify)(data));\n        (0, properties_1.defineReadOnly)(this, \"wordSize\", wordSize || 32);\n        (0, properties_1.defineReadOnly)(this, \"_coerceFunc\", coerceFunc);\n        (0, properties_1.defineReadOnly)(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    Object.defineProperty(Reader.prototype, \"data\", {\n        get: function () { return (0, bytes_1.hexlify)(this._data); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Reader.prototype, \"consumed\", {\n        get: function () { return this._offset; },\n        enumerable: false,\n        configurable: true\n    });\n    // The default Coerce function\n    Reader.coerce = function (name, value) {\n        var match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    };\n    Reader.prototype.coerce = function (name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    };\n    Reader.prototype._peekBytes = function (offset, length, loose) {\n        var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", logger_1.Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    };\n    Reader.prototype.subReader = function (offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    };\n    Reader.prototype.readBytes = function (length, loose) {\n        var bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    };\n    Reader.prototype.readValue = function () {\n        return bignumber_1.BigNumber.from(this.readBytes(this.wordSize));\n    };\n    return Reader;\n}());\nexports.Reader = Reader;\n//# sourceMappingURL=abstract-coder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2Fic3RyYWN0LWNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxjQUFjLEdBQUcsYUFBYSxHQUFHLHlCQUF5QjtBQUMzRSxjQUFjLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzVDLGtCQUFrQixtQkFBTyxDQUFDLDRGQUEwQjtBQUNwRCxtQkFBbUIsbUJBQU8sQ0FBQyw4RkFBMkI7QUFDdEQsZUFBZSxtQkFBTyxDQUFDLHNGQUF1QjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQyx3R0FBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsK0JBQStCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwyQkFBMkIsMEJBQTBCO0FBQ3JEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDBDQUEwQztBQUNyRTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLHNCQUFzQjtBQUNqRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2Fic3RyYWN0LWNvZGVyLmpzPzhjNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlYWRlciA9IGV4cG9ydHMuV3JpdGVyID0gZXhwb3J0cy5Db2RlciA9IGV4cG9ydHMuY2hlY2tSZXN1bHRFcnJvcnMgPSB2b2lkIDA7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiKTtcbnZhciBiaWdudW1iZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIik7XG52YXIgcHJvcGVydGllc18xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIik7XG52YXIgbG9nZ2VyXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCIpO1xudmFyIF92ZXJzaW9uXzEgPSByZXF1aXJlKFwiLi4vX3ZlcnNpb25cIik7XG52YXIgbG9nZ2VyID0gbmV3IGxvZ2dlcl8xLkxvZ2dlcihfdmVyc2lvbl8xLnZlcnNpb24pO1xuZnVuY3Rpb24gY2hlY2tSZXN1bHRFcnJvcnMocmVzdWx0KSB7XG4gICAgLy8gRmluZCB0aGUgZmlyc3QgZXJyb3IgKGlmIGFueSlcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIGNoZWNrRXJyb3JzID0gZnVuY3Rpb24gKHBhdGgsIG9iamVjdCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICBjaGlsZFBhdGgucHVzaChrZXkpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjaGVja0Vycm9ycyhjaGlsZFBhdGgsIG9iamVjdFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgcGF0aDogY2hpbGRQYXRoLCBlcnJvcjogZXJyb3IgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNoZWNrRXJyb3JzKFtdLCByZXN1bHQpO1xuICAgIHJldHVybiBlcnJvcnM7XG59XG5leHBvcnRzLmNoZWNrUmVzdWx0RXJyb3JzID0gY2hlY2tSZXN1bHRFcnJvcnM7XG52YXIgQ29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29kZXIobmFtZSwgdHlwZSwgbG9jYWxOYW1lLCBkeW5hbWljKSB7XG4gICAgICAgIC8vIEBUT0RPOiBkZWZpbmVSZWFkT25seSB0aGVzZVxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmxvY2FsTmFtZSA9IGxvY2FsTmFtZTtcbiAgICAgICAgdGhpcy5keW5hbWljID0gZHluYW1pYztcbiAgICB9XG4gICAgQ29kZXIucHJvdG90eXBlLl90aHJvd0Vycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSwgdGhpcy5sb2NhbE5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBDb2Rlcjtcbn0oKSk7XG5leHBvcnRzLkNvZGVyID0gQ29kZXI7XG52YXIgV3JpdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdyaXRlcih3b3JkU2l6ZSkge1xuICAgICAgICAoMCwgcHJvcGVydGllc18xLmRlZmluZVJlYWRPbmx5KSh0aGlzLCBcIndvcmRTaXplXCIsIHdvcmRTaXplIHx8IDMyKTtcbiAgICAgICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9IG5ldyBVaW50OEFycmF5KHdvcmRTaXplKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRlci5wcm90b3R5cGUsIFwiZGF0YVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLmhleENvbmNhdCkodGhpcy5fZGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGVyLnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGFMZW5ndGg7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBXcml0ZXIucHJvdG90eXBlLl93cml0ZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLl9kYXRhLnB1c2goZGF0YSk7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBkYXRhLmxlbmd0aDtcbiAgICB9O1xuICAgIFdyaXRlci5wcm90b3R5cGUuYXBwZW5kV3JpdGVyID0gZnVuY3Rpb24gKHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JpdGVEYXRhKCgwLCBieXRlc18xLmNvbmNhdCkod3JpdGVyLl9kYXRhKSk7XG4gICAgfTtcbiAgICAvLyBBcnJheWlzaCBpdGVtczsgcGFkZGVkIG9uIHRoZSByaWdodCB0byB3b3JkU2l6ZVxuICAgIFdyaXRlci5wcm90b3R5cGUud3JpdGVCeXRlcyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgYnl0ZXMgPSAoMCwgYnl0ZXNfMS5hcnJheWlmeSkodmFsdWUpO1xuICAgICAgICB2YXIgcGFkZGluZ09mZnNldCA9IGJ5dGVzLmxlbmd0aCAlIHRoaXMud29yZFNpemU7XG4gICAgICAgIGlmIChwYWRkaW5nT2Zmc2V0KSB7XG4gICAgICAgICAgICBieXRlcyA9ICgwLCBieXRlc18xLmNvbmNhdCkoW2J5dGVzLCB0aGlzLl9wYWRkaW5nLnNsaWNlKHBhZGRpbmdPZmZzZXQpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyaXRlRGF0YShieXRlcyk7XG4gICAgfTtcbiAgICBXcml0ZXIucHJvdG90eXBlLl9nZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgYnl0ZXMgPSAoMCwgYnl0ZXNfMS5hcnJheWlmeSkoYmlnbnVtYmVyXzEuQmlnTnVtYmVyLmZyb20odmFsdWUpKTtcbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCA+IHRoaXMud29yZFNpemUpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCBsb2dnZXJfMS5Mb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLCB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLndvcmRTaXplLFxuICAgICAgICAgICAgICAgIG9mZnNldDogYnl0ZXMubGVuZ3RoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICUgdGhpcy53b3JkU2l6ZSkge1xuICAgICAgICAgICAgYnl0ZXMgPSAoMCwgYnl0ZXNfMS5jb25jYXQpKFt0aGlzLl9wYWRkaW5nLnNsaWNlKGJ5dGVzLmxlbmd0aCAlIHRoaXMud29yZFNpemUpLCBieXRlc10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9O1xuICAgIC8vIEJpZ051bWJlcmlzaCBpdGVtczsgcGFkZGVkIG9uIHRoZSBsZWZ0IHRvIHdvcmRTaXplXG4gICAgV3JpdGVyLnByb3RvdHlwZS53cml0ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93cml0ZURhdGEodGhpcy5fZ2V0VmFsdWUodmFsdWUpKTtcbiAgICB9O1xuICAgIFdyaXRlci5wcm90b3R5cGUud3JpdGVVcGRhdGFibGVWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLl9kYXRhLnB1c2godGhpcy5fcGFkZGluZyk7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gdGhpcy53b3JkU2l6ZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMuX2RhdGFbb2Zmc2V0XSA9IF90aGlzLl9nZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gV3JpdGVyO1xufSgpKTtcbmV4cG9ydHMuV3JpdGVyID0gV3JpdGVyO1xudmFyIFJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWFkZXIoZGF0YSwgd29yZFNpemUsIGNvZXJjZUZ1bmMsIGFsbG93TG9vc2UpIHtcbiAgICAgICAgKDAsIHByb3BlcnRpZXNfMS5kZWZpbmVSZWFkT25seSkodGhpcywgXCJfZGF0YVwiLCAoMCwgYnl0ZXNfMS5hcnJheWlmeSkoZGF0YSkpO1xuICAgICAgICAoMCwgcHJvcGVydGllc18xLmRlZmluZVJlYWRPbmx5KSh0aGlzLCBcIndvcmRTaXplXCIsIHdvcmRTaXplIHx8IDMyKTtcbiAgICAgICAgKDAsIHByb3BlcnRpZXNfMS5kZWZpbmVSZWFkT25seSkodGhpcywgXCJfY29lcmNlRnVuY1wiLCBjb2VyY2VGdW5jKTtcbiAgICAgICAgKDAsIHByb3BlcnRpZXNfMS5kZWZpbmVSZWFkT25seSkodGhpcywgXCJhbGxvd0xvb3NlXCIsIGFsbG93TG9vc2UpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSAwO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGVyLnByb3RvdHlwZSwgXCJkYXRhXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAoMCwgYnl0ZXNfMS5oZXhsaWZ5KSh0aGlzLl9kYXRhKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkZXIucHJvdG90eXBlLCBcImNvbnN1bWVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9vZmZzZXQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyBUaGUgZGVmYXVsdCBDb2VyY2UgZnVuY3Rpb25cbiAgICBSZWFkZXIuY29lcmNlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IG5hbWUubWF0Y2goXCJedT9pbnQoWzAtOV0rKSRcIik7XG4gICAgICAgIGlmIChtYXRjaCAmJiBwYXJzZUludChtYXRjaFsxXSkgPD0gNDgpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9OdW1iZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBSZWFkZXIucHJvdG90eXBlLmNvZXJjZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5fY29lcmNlRnVuYykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvZXJjZUZ1bmMobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFkZXIuY29lcmNlKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlYWRlci5wcm90b3R5cGUuX3BlZWtCeXRlcyA9IGZ1bmN0aW9uIChvZmZzZXQsIGxlbmd0aCwgbG9vc2UpIHtcbiAgICAgICAgdmFyIGFsaWduZWRMZW5ndGggPSBNYXRoLmNlaWwobGVuZ3RoIC8gdGhpcy53b3JkU2l6ZSkgKiB0aGlzLndvcmRTaXplO1xuICAgICAgICBpZiAodGhpcy5fb2Zmc2V0ICsgYWxpZ25lZExlbmd0aCA+IHRoaXMuX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd0xvb3NlICYmIGxvb3NlICYmIHRoaXMuX29mZnNldCArIGxlbmd0aCA8PSB0aGlzLl9kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFsaWduZWRMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgb3V0LW9mLWJvdW5kc1wiLCBsb2dnZXJfMS5Mb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLCB7XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogdGhpcy5fZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5fb2Zmc2V0ICsgYWxpZ25lZExlbmd0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLnNsaWNlKHRoaXMuX29mZnNldCwgdGhpcy5fb2Zmc2V0ICsgYWxpZ25lZExlbmd0aCk7XG4gICAgfTtcbiAgICBSZWFkZXIucHJvdG90eXBlLnN1YlJlYWRlciA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFkZXIodGhpcy5fZGF0YS5zbGljZSh0aGlzLl9vZmZzZXQgKyBvZmZzZXQpLCB0aGlzLndvcmRTaXplLCB0aGlzLl9jb2VyY2VGdW5jLCB0aGlzLmFsbG93TG9vc2UpO1xuICAgIH07XG4gICAgUmVhZGVyLnByb3RvdHlwZS5yZWFkQnl0ZXMgPSBmdW5jdGlvbiAobGVuZ3RoLCBsb29zZSkge1xuICAgICAgICB2YXIgYnl0ZXMgPSB0aGlzLl9wZWVrQnl0ZXMoMCwgbGVuZ3RoLCAhIWxvb3NlKTtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgLy8gQFRPRE86IE1ha2Ugc3VyZSB0aGUgbGVuZ3RoLi5lbmQgYnl0ZXMgYXJlIGFsbCAwP1xuICAgICAgICByZXR1cm4gYnl0ZXMuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9O1xuICAgIFJlYWRlci5wcm90b3R5cGUucmVhZFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYmlnbnVtYmVyXzEuQmlnTnVtYmVyLmZyb20odGhpcy5yZWFkQnl0ZXModGhpcy53b3JkU2l6ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWRlcjtcbn0oKSk7XG5leHBvcnRzLlJlYWRlciA9IFJlYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFic3RyYWN0LWNvZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/address.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/address.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AddressCoder = void 0;\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar AddressCoder = /** @class */ (function (_super) {\n    __extends(AddressCoder, _super);\n    function AddressCoder(localName) {\n        return _super.call(this, \"address\", \"address\", localName, false) || this;\n    }\n    AddressCoder.prototype.defaultValue = function () {\n        return \"0x0000000000000000000000000000000000000000\";\n    };\n    AddressCoder.prototype.encode = function (writer, value) {\n        try {\n            value = (0, address_1.getAddress)(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    };\n    AddressCoder.prototype.decode = function (reader) {\n        return (0, address_1.getAddress)((0, bytes_1.hexZeroPad)(reader.readValue().toHexString(), 20));\n    };\n    return AddressCoder;\n}(abstract_coder_1.Coder));\nexports.AddressCoder = AddressCoder;\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLGdCQUFnQixtQkFBTyxDQUFDLHdGQUF3QjtBQUNoRCxjQUFjLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzVDLHVCQUF1QixtQkFBTyxDQUFDLDBIQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi9jb2RlcnMvYWRkcmVzcy5qcz9lNGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWRkcmVzc0NvZGVyID0gdm9pZCAwO1xudmFyIGFkZHJlc3NfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIik7XG52YXIgYWJzdHJhY3RfY29kZXJfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0LWNvZGVyXCIpO1xudmFyIEFkZHJlc3NDb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWRkcmVzc0NvZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFkZHJlc3NDb2Rlcihsb2NhbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiYWRkcmVzc1wiLCBcImFkZHJlc3NcIiwgbG9jYWxOYW1lLCBmYWxzZSkgfHwgdGhpcztcbiAgICB9XG4gICAgQWRkcmVzc0NvZGVyLnByb3RvdHlwZS5kZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuICAgIH07XG4gICAgQWRkcmVzc0NvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSAoMCwgYWRkcmVzc18xLmdldEFkZHJlc3MpKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoZXJyb3IubWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZSk7XG4gICAgfTtcbiAgICBBZGRyZXNzQ29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuICgwLCBhZGRyZXNzXzEuZ2V0QWRkcmVzcykoKDAsIGJ5dGVzXzEuaGV4WmVyb1BhZCkocmVhZGVyLnJlYWRWYWx1ZSgpLnRvSGV4U3RyaW5nKCksIDIwKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQWRkcmVzc0NvZGVyO1xufShhYnN0cmFjdF9jb2Rlcl8xLkNvZGVyKSk7XG5leHBvcnRzLkFkZHJlc3NDb2RlciA9IEFkZHJlc3NDb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/anonymous.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/anonymous.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AnonymousCoder = void 0;\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\n// Clones the functionality of an existing Coder, but without a localName\nvar AnonymousCoder = /** @class */ (function (_super) {\n    __extends(AnonymousCoder, _super);\n    function AnonymousCoder(coder) {\n        var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;\n        _this.coder = coder;\n        return _this;\n    }\n    AnonymousCoder.prototype.defaultValue = function () {\n        return this.coder.defaultValue();\n    };\n    AnonymousCoder.prototype.encode = function (writer, value) {\n        return this.coder.encode(writer, value);\n    };\n    AnonymousCoder.prototype.decode = function (reader) {\n        return this.coder.decode(reader);\n    };\n    return AnonymousCoder;\n}(abstract_coder_1.Coder));\nexports.AnonymousCoder = AnonymousCoder;\n//# sourceMappingURL=anonymous.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2Fub255bW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsdUJBQXVCLG1CQUFPLENBQUMsMEhBQWtCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliL2NvZGVycy9hbm9ueW1vdXMuanM/YmExMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFub255bW91c0NvZGVyID0gdm9pZCAwO1xudmFyIGFic3RyYWN0X2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2RlclwiKTtcbi8vIENsb25lcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBhbiBleGlzdGluZyBDb2RlciwgYnV0IHdpdGhvdXQgYSBsb2NhbE5hbWVcbnZhciBBbm9ueW1vdXNDb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5vbnltb3VzQ29kZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzQ29kZXIoY29kZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29kZXIubmFtZSwgY29kZXIudHlwZSwgdW5kZWZpbmVkLCBjb2Rlci5keW5hbWljKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb2RlciA9IGNvZGVyO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFub255bW91c0NvZGVyLnByb3RvdHlwZS5kZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlZmF1bHRWYWx1ZSgpO1xuICAgIH07XG4gICAgQW5vbnltb3VzQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmVuY29kZSh3cml0ZXIsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c0NvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c0NvZGVyO1xufShhYnN0cmFjdF9jb2Rlcl8xLkNvZGVyKSk7XG5leHBvcnRzLkFub255bW91c0NvZGVyID0gQW5vbnltb3VzQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbm9ueW1vdXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/anonymous.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/array.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/array.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ../_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar anonymous_1 = __webpack_require__(/*! ./anonymous */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/anonymous.js\");\nfunction pack(writer, coders, values) {\n    var arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        var unique_1 = {};\n        arrayValues = coders.map(function (coder) {\n            var name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique_1[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique_1[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    var staticWriter = new abstract_coder_1.Writer(writer.wordSize);\n    var dynamicWriter = new abstract_coder_1.Writer(writer.wordSize);\n    var updateFuncs = [];\n    coders.forEach(function (coder, index) {\n        var value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            var dynamicOffset_1 = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            var updateFunc_1 = staticWriter.writeUpdatableValue();\n            updateFuncs.push(function (baseOffset) {\n                updateFunc_1(baseOffset + dynamicOffset_1);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach(function (func) { func(staticWriter.length); });\n    var length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexports.pack = pack;\nfunction unpack(reader, coders) {\n    var values = [];\n    // A reader anchored to this base\n    var baseReader = reader.subReader(0);\n    coders.forEach(function (coder) {\n        var value = null;\n        if (coder.dynamic) {\n            var offset = reader.readValue();\n            var offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    var uniqueNames = coders.reduce(function (accum, coder) {\n        var name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach(function (coder, index) {\n        var name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        var value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: function () { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    var _loop_1 = function (i) {\n        var value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: function () { throw value; }\n            });\n        }\n    };\n    for (var i = 0; i < values.length; i++) {\n        _loop_1(i);\n    }\n    return Object.freeze(values);\n}\nexports.unpack = unpack;\nvar ArrayCoder = /** @class */ (function (_super) {\n    __extends(ArrayCoder, _super);\n    function ArrayCoder(coder, length, localName) {\n        var _this = this;\n        var type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        var dynamic = (length === -1 || coder.dynamic);\n        _this = _super.call(this, \"array\", type, localName, dynamic) || this;\n        _this.coder = coder;\n        _this.length = length;\n        return _this;\n    }\n    ArrayCoder.prototype.defaultValue = function () {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        var defaultChild = this.coder.defaultValue();\n        var result = [];\n        for (var i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    };\n    ArrayCoder.prototype.encode = function (writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        var count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        var coders = [];\n        for (var i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    };\n    ArrayCoder.prototype.decode = function (reader) {\n        var count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", logger_1.Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        var coders = [];\n        for (var i = 0; i < count; i++) {\n            coders.push(new anonymous_1.AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    };\n    return ArrayCoder;\n}(abstract_coder_1.Coder));\nexports.ArrayCoder = ArrayCoder;\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2FycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLGNBQWMsR0FBRyxZQUFZO0FBQ2xELGVBQWUsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsd0dBQWE7QUFDdEM7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQywwSEFBa0I7QUFDakQsa0JBQWtCLG1CQUFPLENBQUMsZ0hBQWE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DLGFBQWE7QUFDYjtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsV0FBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2FycmF5LmpzP2I0NTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BcnJheUNvZGVyID0gZXhwb3J0cy51bnBhY2sgPSBleHBvcnRzLnBhY2sgPSB2b2lkIDA7XG52YXIgbG9nZ2VyXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCIpO1xudmFyIF92ZXJzaW9uXzEgPSByZXF1aXJlKFwiLi4vX3ZlcnNpb25cIik7XG52YXIgbG9nZ2VyID0gbmV3IGxvZ2dlcl8xLkxvZ2dlcihfdmVyc2lvbl8xLnZlcnNpb24pO1xudmFyIGFic3RyYWN0X2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2RlclwiKTtcbnZhciBhbm9ueW1vdXNfMSA9IHJlcXVpcmUoXCIuL2Fub255bW91c1wiKTtcbmZ1bmN0aW9uIHBhY2sod3JpdGVyLCBjb2RlcnMsIHZhbHVlcykge1xuICAgIHZhciBhcnJheVZhbHVlcyA9IG51bGw7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICBhcnJheVZhbHVlcyA9IHZhbHVlcztcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVzICYmIHR5cGVvZiAodmFsdWVzKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgdW5pcXVlXzEgPSB7fTtcbiAgICAgICAgYXJyYXlWYWx1ZXMgPSBjb2RlcnMubWFwKGZ1bmN0aW9uIChjb2Rlcikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlbmNvZGUgb2JqZWN0IGZvciBzaWduYXR1cmUgd2l0aCBtaXNzaW5nIG5hbWVzXCIsIGxvZ2dlcl8xLkxvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCwge1xuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudDogXCJ2YWx1ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgY29kZXI6IGNvZGVyLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5pcXVlXzFbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlbmNvZGUgb2JqZWN0IGZvciBzaWduYXR1cmUgd2l0aCBkdXBsaWNhdGUgbmFtZXNcIiwgbG9nZ2VyXzEuTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcInZhbHVlc1wiLFxuICAgICAgICAgICAgICAgICAgICBjb2RlcjogY29kZXIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVuaXF1ZV8xW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbbmFtZV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHVwbGUgdmFsdWVcIiwgXCJ0dXBsZVwiLCB2YWx1ZXMpO1xuICAgIH1cbiAgICBpZiAoY29kZXJzLmxlbmd0aCAhPT0gYXJyYXlWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0eXBlcy92YWx1ZSBsZW5ndGggbWlzbWF0Y2hcIiwgXCJ0dXBsZVwiLCB2YWx1ZXMpO1xuICAgIH1cbiAgICB2YXIgc3RhdGljV3JpdGVyID0gbmV3IGFic3RyYWN0X2NvZGVyXzEuV3JpdGVyKHdyaXRlci53b3JkU2l6ZSk7XG4gICAgdmFyIGR5bmFtaWNXcml0ZXIgPSBuZXcgYWJzdHJhY3RfY29kZXJfMS5Xcml0ZXIod3JpdGVyLndvcmRTaXplKTtcbiAgICB2YXIgdXBkYXRlRnVuY3MgPSBbXTtcbiAgICBjb2RlcnMuZm9yRWFjaChmdW5jdGlvbiAoY29kZXIsIGluZGV4KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5VmFsdWVzW2luZGV4XTtcbiAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGR5bmFtaWMgb2Zmc2V0IChmb3IgdGhlIGZ1dHVyZSBwb2ludGVyKVxuICAgICAgICAgICAgdmFyIGR5bmFtaWNPZmZzZXRfMSA9IGR5bmFtaWNXcml0ZXIubGVuZ3RoO1xuICAgICAgICAgICAgLy8gRW5jb2RlIHRoZSBkeW5hbWljIHZhbHVlIGludG8gdGhlIGR5bmFtaWNXcml0ZXJcbiAgICAgICAgICAgIGNvZGVyLmVuY29kZShkeW5hbWljV3JpdGVyLCB2YWx1ZSk7XG4gICAgICAgICAgICAvLyBQcmVwYXJlIHRvIHBvcHVsYXRlIHRoZSBjb3JyZWN0IG9mZnNldCBvbmNlIHdlIGFyZSBkb25lXG4gICAgICAgICAgICB2YXIgdXBkYXRlRnVuY18xID0gc3RhdGljV3JpdGVyLndyaXRlVXBkYXRhYmxlVmFsdWUoKTtcbiAgICAgICAgICAgIHVwZGF0ZUZ1bmNzLnB1c2goZnVuY3Rpb24gKGJhc2VPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVGdW5jXzEoYmFzZU9mZnNldCArIGR5bmFtaWNPZmZzZXRfMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvZGVyLmVuY29kZShzdGF0aWNXcml0ZXIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEJhY2tmaWxsIGFsbCB0aGUgZHluYW1pYyBvZmZzZXRzLCBub3cgdGhhdCB3ZSBrbm93IHRoZSBzdGF0aWMgbGVuZ3RoXG4gICAgdXBkYXRlRnVuY3MuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykgeyBmdW5jKHN0YXRpY1dyaXRlci5sZW5ndGgpOyB9KTtcbiAgICB2YXIgbGVuZ3RoID0gd3JpdGVyLmFwcGVuZFdyaXRlcihzdGF0aWNXcml0ZXIpO1xuICAgIGxlbmd0aCArPSB3cml0ZXIuYXBwZW5kV3JpdGVyKGR5bmFtaWNXcml0ZXIpO1xuICAgIHJldHVybiBsZW5ndGg7XG59XG5leHBvcnRzLnBhY2sgPSBwYWNrO1xuZnVuY3Rpb24gdW5wYWNrKHJlYWRlciwgY29kZXJzKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIC8vIEEgcmVhZGVyIGFuY2hvcmVkIHRvIHRoaXMgYmFzZVxuICAgIHZhciBiYXNlUmVhZGVyID0gcmVhZGVyLnN1YlJlYWRlcigwKTtcbiAgICBjb2RlcnMuZm9yRWFjaChmdW5jdGlvbiAoY29kZXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbnVsbDtcbiAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSByZWFkZXIucmVhZFZhbHVlKCk7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0UmVhZGVyID0gYmFzZVJlYWRlci5zdWJSZWFkZXIob2Zmc2V0LnRvTnVtYmVyKCkpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvZGVyLmRlY29kZShvZmZzZXRSZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2Fubm90IHJlY292ZXIgZnJvbSB0aGlzXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IGxvZ2dlcl8xLkxvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgdmFsdWUuYmFzZVR5cGUgPSBjb2Rlci5uYW1lO1xuICAgICAgICAgICAgICAgIHZhbHVlLm5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICAgICAgdmFsdWUudHlwZSA9IGNvZGVyLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY29kZXIuZGVjb2RlKHJlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBDYW5ub3QgcmVjb3ZlciBmcm9tIHRoaXNcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gbG9nZ2VyXzEuTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB2YWx1ZS5iYXNlVHlwZSA9IGNvZGVyLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFsdWUubmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgICB2YWx1ZS50eXBlID0gY29kZXIudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBXZSBvbmx5IG91dHB1dCBuYW1lZCBwcm9wZXJ0aWVzIGZvciB1bmlxdWVseSBuYW1lZCBjb2RlcnNcbiAgICB2YXIgdW5pcXVlTmFtZXMgPSBjb2RlcnMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bSwgY29kZXIpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBpZiAoIWFjY3VtW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjdW1bbmFtZV0rKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgfSwge30pO1xuICAgIC8vIEFkZCBhbnkgbmFtZWQgcGFyYW1ldGVycyAoaS5lLiB0dXBsZXMpXG4gICAgY29kZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvZGVyLCBpbmRleCkge1xuICAgICAgICB2YXIgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgaWYgKCFuYW1lIHx8IHVuaXF1ZU5hbWVzW25hbWVdICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgIG5hbWUgPSBcIl9sZW5ndGhcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlcywgbmFtZSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHRocm93IHZhbHVlOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWVzLCBpLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgdmFsdWU7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBfbG9vcF8xKGkpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpO1xufVxuZXhwb3J0cy51bnBhY2sgPSB1bnBhY2s7XG52YXIgQXJyYXlDb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXJyYXlDb2RlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBcnJheUNvZGVyKGNvZGVyLCBsZW5ndGgsIGxvY2FsTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdHlwZSA9IChjb2Rlci50eXBlICsgXCJbXCIgKyAobGVuZ3RoID49IDAgPyBsZW5ndGggOiBcIlwiKSArIFwiXVwiKTtcbiAgICAgICAgdmFyIGR5bmFtaWMgPSAobGVuZ3RoID09PSAtMSB8fCBjb2Rlci5keW5hbWljKTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcImFycmF5XCIsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29kZXIgPSBjb2RlcjtcbiAgICAgICAgX3RoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFycmF5Q29kZXIucHJvdG90eXBlLmRlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVmVyaWZpZXMgdGhlIGNoaWxkIGNvZGVyIGlzIHZhbGlkIChldmVuIGlmIHRoZSBhcnJheSBpcyBkeW5hbWljIG9yIDAtbGVuZ3RoKVxuICAgICAgICB2YXIgZGVmYXVsdENoaWxkID0gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRlZmF1bHRDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEFycmF5Q29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJleHBlY3RlZCBhcnJheSB2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvdW50ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgd3JpdGVyLndyaXRlVmFsdWUodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuY2hlY2tBcmd1bWVudENvdW50KHZhbHVlLmxlbmd0aCwgY291bnQsIFwiY29kZXIgYXJyYXlcIiArICh0aGlzLmxvY2FsTmFtZSA/IChcIiBcIiArIHRoaXMubG9jYWxOYW1lKSA6IFwiXCIpKTtcbiAgICAgICAgdmFyIGNvZGVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2RlcnMucHVzaCh0aGlzLmNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFjayh3cml0ZXIsIGNvZGVycywgdmFsdWUpO1xuICAgIH07XG4gICAgQXJyYXlDb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvdW50ID09PSAtMSkge1xuICAgICAgICAgICAgY291bnQgPSByZWFkZXIucmVhZFZhbHVlKCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgKnJvdWdobHkqIGVub3VnaCBkYXRhIHRvIGVuc3VyZVxuICAgICAgICAgICAgLy8gc3RyYXkgcmFuZG9tIGRhdGEgaXMgbm90IGJlaW5nIHJlYWQgYXMgYSBsZW5ndGguIEVhY2hcbiAgICAgICAgICAgIC8vIHNsb3QgcmVxdWlyZXMgYXQgbGVhc3QgMzIgYnl0ZXMgZm9yIHRoZWlyIHZhbHVlIChvciAzMlxuICAgICAgICAgICAgLy8gYnl0ZXMgYXMgYSBsaW5rIHRvIHRoZSBkYXRhKS4gVGhpcyBjb3VsZCB1c2UgYSBtdWNoXG4gICAgICAgICAgICAvLyB0aWdodGVyIGJvdW5kLCBidXQgd2UgYXJlIGVycm9yaW5nIG9uIHRoZSBzaWRlIG9mIHNhZmV0eS5cbiAgICAgICAgICAgIGlmIChjb3VudCAqIDMyID4gcmVhZGVyLl9kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiaW5zdWZmaWNpZW50IGRhdGEgbGVuZ3RoXCIsIGxvZ2dlcl8xLkxvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHtcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiByZWFkZXIuX2RhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogY291bnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY29kZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29kZXJzLnB1c2gobmV3IGFub255bW91c18xLkFub255bW91c0NvZGVyKHRoaXMuY29kZXIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIHVucGFjayhyZWFkZXIsIGNvZGVycykpO1xuICAgIH07XG4gICAgcmV0dXJuIEFycmF5Q29kZXI7XG59KGFic3RyYWN0X2NvZGVyXzEuQ29kZXIpKTtcbmV4cG9ydHMuQXJyYXlDb2RlciA9IEFycmF5Q29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/boolean.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/boolean.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BooleanCoder = void 0;\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar BooleanCoder = /** @class */ (function (_super) {\n    __extends(BooleanCoder, _super);\n    function BooleanCoder(localName) {\n        return _super.call(this, \"bool\", \"bool\", localName, false) || this;\n    }\n    BooleanCoder.prototype.defaultValue = function () {\n        return false;\n    };\n    BooleanCoder.prototype.encode = function (writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    };\n    BooleanCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    };\n    return BooleanCoder;\n}(abstract_coder_1.Coder));\nexports.BooleanCoder = BooleanCoder;\n//# sourceMappingURL=boolean.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2Jvb2xlYW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLHVCQUF1QixtQkFBTyxDQUFDLDBIQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi9jb2RlcnMvYm9vbGVhbi5qcz8yZjM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQm9vbGVhbkNvZGVyID0gdm9pZCAwO1xudmFyIGFic3RyYWN0X2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2RlclwiKTtcbnZhciBCb29sZWFuQ29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJvb2xlYW5Db2RlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCb29sZWFuQ29kZXIobG9jYWxOYW1lKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcImJvb2xcIiwgXCJib29sXCIsIGxvY2FsTmFtZSwgZmFsc2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIEJvb2xlYW5Db2Rlci5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBCb29sZWFuQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZSA/IDEgOiAwKTtcbiAgICB9O1xuICAgIEJvb2xlYW5Db2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLnR5cGUsICFyZWFkZXIucmVhZFZhbHVlKCkuaXNaZXJvKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJvb2xlYW5Db2Rlcjtcbn0oYWJzdHJhY3RfY29kZXJfMS5Db2RlcikpO1xuZXhwb3J0cy5Cb29sZWFuQ29kZXIgPSBCb29sZWFuQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib29sZWFuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/boolean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/bytes.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/bytes.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BytesCoder = exports.DynamicBytesCoder = void 0;\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar DynamicBytesCoder = /** @class */ (function (_super) {\n    __extends(DynamicBytesCoder, _super);\n    function DynamicBytesCoder(type, localName) {\n        return _super.call(this, type, type, localName, true) || this;\n    }\n    DynamicBytesCoder.prototype.defaultValue = function () {\n        return \"0x\";\n    };\n    DynamicBytesCoder.prototype.encode = function (writer, value) {\n        value = (0, bytes_1.arrayify)(value);\n        var length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    };\n    DynamicBytesCoder.prototype.decode = function (reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    };\n    return DynamicBytesCoder;\n}(abstract_coder_1.Coder));\nexports.DynamicBytesCoder = DynamicBytesCoder;\nvar BytesCoder = /** @class */ (function (_super) {\n    __extends(BytesCoder, _super);\n    function BytesCoder(localName) {\n        return _super.call(this, \"bytes\", localName) || this;\n    }\n    BytesCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.name, (0, bytes_1.hexlify)(_super.prototype.decode.call(this, reader)));\n    };\n    return BytesCoder;\n}(DynamicBytesCoder));\nexports.BytesCoder = BytesCoder;\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2J5dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLHlCQUF5QjtBQUM5QyxjQUFjLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzVDLHVCQUF1QixtQkFBTyxDQUFDLDBIQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliL2NvZGVycy9ieXRlcy5qcz81Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnl0ZXNDb2RlciA9IGV4cG9ydHMuRHluYW1pY0J5dGVzQ29kZXIgPSB2b2lkIDA7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiKTtcbnZhciBhYnN0cmFjdF9jb2Rlcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtY29kZXJcIik7XG52YXIgRHluYW1pY0J5dGVzQ29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKER5bmFtaWNCeXRlc0NvZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIER5bmFtaWNCeXRlc0NvZGVyKHR5cGUsIGxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgdHlwZSwgdHlwZSwgbG9jYWxOYW1lLCB0cnVlKSB8fCB0aGlzO1xuICAgIH1cbiAgICBEeW5hbWljQnl0ZXNDb2Rlci5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCIweFwiO1xuICAgIH07XG4gICAgRHluYW1pY0J5dGVzQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gKDAsIGJ5dGVzXzEuYXJyYXlpZnkpKHZhbHVlKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHdyaXRlci53cml0ZVZhbHVlKHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIGxlbmd0aCArPSB3cml0ZXIud3JpdGVCeXRlcyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfTtcbiAgICBEeW5hbWljQnl0ZXNDb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRCeXRlcyhyZWFkZXIucmVhZFZhbHVlKCkudG9OdW1iZXIoKSwgdHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRHluYW1pY0J5dGVzQ29kZXI7XG59KGFic3RyYWN0X2NvZGVyXzEuQ29kZXIpKTtcbmV4cG9ydHMuRHluYW1pY0J5dGVzQ29kZXIgPSBEeW5hbWljQnl0ZXNDb2RlcjtcbnZhciBCeXRlc0NvZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCeXRlc0NvZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ5dGVzQ29kZXIobG9jYWxOYW1lKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcImJ5dGVzXCIsIGxvY2FsTmFtZSkgfHwgdGhpcztcbiAgICB9XG4gICAgQnl0ZXNDb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsICgwLCBieXRlc18xLmhleGxpZnkpKF9zdXBlci5wcm90b3R5cGUuZGVjb2RlLmNhbGwodGhpcywgcmVhZGVyKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ5dGVzQ29kZXI7XG59KER5bmFtaWNCeXRlc0NvZGVyKSk7XG5leHBvcnRzLkJ5dGVzQ29kZXIgPSBCeXRlc0NvZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FixedBytesCoder = void 0;\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\n// @TODO: Merge this with bytes\nvar FixedBytesCoder = /** @class */ (function (_super) {\n    __extends(FixedBytesCoder, _super);\n    function FixedBytesCoder(size, localName) {\n        var _this = this;\n        var name = \"bytes\" + String(size);\n        _this = _super.call(this, name, name, localName, false) || this;\n        _this.size = size;\n        return _this;\n    }\n    FixedBytesCoder.prototype.defaultValue = function () {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    };\n    FixedBytesCoder.prototype.encode = function (writer, value) {\n        var data = (0, bytes_1.arrayify)(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    };\n    FixedBytesCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.name, (0, bytes_1.hexlify)(reader.readBytes(this.size)));\n    };\n    return FixedBytesCoder;\n}(abstract_coder_1.Coder));\nexports.FixedBytesCoder = FixedBytesCoder;\n//# sourceMappingURL=fixed-bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL2ZpeGVkLWJ5dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixjQUFjLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzVDLHVCQUF1QixtQkFBTyxDQUFDLDBIQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi9jb2RlcnMvZml4ZWQtYnl0ZXMuanM/NDY0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpeGVkQnl0ZXNDb2RlciA9IHZvaWQgMDtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCIpO1xudmFyIGFic3RyYWN0X2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2RlclwiKTtcbi8vIEBUT0RPOiBNZXJnZSB0aGlzIHdpdGggYnl0ZXNcbnZhciBGaXhlZEJ5dGVzQ29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZpeGVkQnl0ZXNDb2RlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaXhlZEJ5dGVzQ29kZXIoc2l6ZSwgbG9jYWxOYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuYW1lID0gXCJieXRlc1wiICsgU3RyaW5nKHNpemUpO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5hbWUsIG5hbWUsIGxvY2FsTmFtZSwgZmFsc2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNpemUgPSBzaXplO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpeGVkQnl0ZXNDb2Rlci5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpLnN1YnN0cmluZygwLCAyICsgdGhpcy5zaXplICogMik7XG4gICAgfTtcbiAgICBGaXhlZEJ5dGVzQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXRhID0gKDAsIGJ5dGVzXzEuYXJyYXlpZnkpKHZhbHVlKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJpbmNvcnJlY3QgZGF0YSBsZW5ndGhcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhkYXRhKTtcbiAgICB9O1xuICAgIEZpeGVkQnl0ZXNDb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsICgwLCBieXRlc18xLmhleGxpZnkpKHJlYWRlci5yZWFkQnl0ZXModGhpcy5zaXplKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpeGVkQnl0ZXNDb2Rlcjtcbn0oYWJzdHJhY3RfY29kZXJfMS5Db2RlcikpO1xuZXhwb3J0cy5GaXhlZEJ5dGVzQ29kZXIgPSBGaXhlZEJ5dGVzQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXhlZC1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/null.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/null.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NullCoder = void 0;\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar NullCoder = /** @class */ (function (_super) {\n    __extends(NullCoder, _super);\n    function NullCoder(localName) {\n        return _super.call(this, \"null\", \"\", localName, false) || this;\n    }\n    NullCoder.prototype.defaultValue = function () {\n        return null;\n    };\n    NullCoder.prototype.encode = function (writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    };\n    NullCoder.prototype.decode = function (reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    };\n    return NullCoder;\n}(abstract_coder_1.Coder));\nexports.NullCoder = NullCoder;\n//# sourceMappingURL=null.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL251bGwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLHVCQUF1QixtQkFBTyxDQUFDLDBIQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliL2NvZGVycy9udWxsLmpzPzU5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OdWxsQ29kZXIgPSB2b2lkIDA7XG52YXIgYWJzdHJhY3RfY29kZXJfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0LWNvZGVyXCIpO1xudmFyIE51bGxDb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTnVsbENvZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE51bGxDb2Rlcihsb2NhbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwibnVsbFwiLCBcIlwiLCBsb2NhbE5hbWUsIGZhbHNlKSB8fCB0aGlzO1xuICAgIH1cbiAgICBOdWxsQ29kZXIucHJvdG90eXBlLmRlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBOdWxsQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwibm90IG51bGxcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhbXSk7XG4gICAgfTtcbiAgICBOdWxsQ29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChyZWFkZXIpIHtcbiAgICAgICAgcmVhZGVyLnJlYWRCeXRlcygwKTtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLCBudWxsKTtcbiAgICB9O1xuICAgIHJldHVybiBOdWxsQ29kZXI7XG59KGFic3RyYWN0X2NvZGVyXzEuQ29kZXIpKTtcbmV4cG9ydHMuTnVsbENvZGVyID0gTnVsbENvZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVsbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/null.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/number.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/number.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NumberCoder = void 0;\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar constants_1 = __webpack_require__(/*! @ethersproject/constants */ \"(ssr)/./node_modules/@ethersproject/constants/lib/index.js\");\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar NumberCoder = /** @class */ (function (_super) {\n    __extends(NumberCoder, _super);\n    function NumberCoder(size, signed, localName) {\n        var _this = this;\n        var name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        _this = _super.call(this, name, name, localName, false) || this;\n        _this.size = size;\n        _this.signed = signed;\n        return _this;\n    }\n    NumberCoder.prototype.defaultValue = function () {\n        return 0;\n    };\n    NumberCoder.prototype.encode = function (writer, value) {\n        var v = bignumber_1.BigNumber.from(value);\n        // Check bounds are safe for encoding\n        var maxUintValue = constants_1.MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            var bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(constants_1.One).mul(constants_1.NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(constants_1.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    };\n    NumberCoder.prototype.decode = function (reader) {\n        var value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    };\n    return NumberCoder;\n}(abstract_coder_1.Coder));\nexports.NumberCoder = NumberCoder;\n//# sourceMappingURL=number.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL251bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsa0JBQWtCLG1CQUFPLENBQUMsNEZBQTBCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLDRGQUEwQjtBQUNwRCx1QkFBdUIsbUJBQU8sQ0FBQywwSEFBa0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi9jb2RlcnMvbnVtYmVyLmpzP2NhNWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OdW1iZXJDb2RlciA9IHZvaWQgMDtcbnZhciBiaWdudW1iZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIik7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzXCIpO1xudmFyIGFic3RyYWN0X2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2RlclwiKTtcbnZhciBOdW1iZXJDb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTnVtYmVyQ29kZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTnVtYmVyQ29kZXIoc2l6ZSwgc2lnbmVkLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG5hbWUgPSAoKHNpZ25lZCA/IFwiaW50XCIgOiBcInVpbnRcIikgKyAoc2l6ZSAqIDgpKTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgX3RoaXMuc2lnbmVkID0gc2lnbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE51bWJlckNvZGVyLnByb3RvdHlwZS5kZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgTnVtYmVyQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHZhciB2ID0gYmlnbnVtYmVyXzEuQmlnTnVtYmVyLmZyb20odmFsdWUpO1xuICAgICAgICAvLyBDaGVjayBib3VuZHMgYXJlIHNhZmUgZm9yIGVuY29kaW5nXG4gICAgICAgIHZhciBtYXhVaW50VmFsdWUgPSBjb25zdGFudHNfMS5NYXhVaW50MjU2Lm1hc2sod3JpdGVyLndvcmRTaXplICogOCk7XG4gICAgICAgIGlmICh0aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSAqIDggLSAxKTtcbiAgICAgICAgICAgIGlmICh2Lmd0KGJvdW5kcykgfHwgdi5sdChib3VuZHMuYWRkKGNvbnN0YW50c18xLk9uZSkubXVsKGNvbnN0YW50c18xLk5lZ2F0aXZlT25lKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodi5sdChjb25zdGFudHNfMS5aZXJvKSB8fCB2Lmd0KG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSAqIDgpKSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHYgPSB2LnRvVHdvcyh0aGlzLnNpemUgKiA4KS5tYXNrKHRoaXMuc2l6ZSAqIDgpO1xuICAgICAgICBpZiAodGhpcy5zaWduZWQpIHtcbiAgICAgICAgICAgIHYgPSB2LmZyb21Ud29zKHRoaXMuc2l6ZSAqIDgpLnRvVHdvcyg4ICogd3JpdGVyLndvcmRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodik7XG4gICAgfTtcbiAgICBOdW1iZXJDb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICB2YXIgdmFsdWUgPSByZWFkZXIucmVhZFZhbHVlKCkubWFzayh0aGlzLnNpemUgKiA4KTtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmZyb21Ud29zKHRoaXMuc2l6ZSAqIDgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIE51bWJlckNvZGVyO1xufShhYnN0cmFjdF9jb2Rlcl8xLkNvZGVyKSk7XG5leHBvcnRzLk51bWJlckNvZGVyID0gTnVtYmVyQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/string.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/string.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StringCoder = void 0;\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/bytes.js\");\nvar StringCoder = /** @class */ (function (_super) {\n    __extends(StringCoder, _super);\n    function StringCoder(localName) {\n        return _super.call(this, \"string\", localName) || this;\n    }\n    StringCoder.prototype.defaultValue = function () {\n        return \"\";\n    };\n    StringCoder.prototype.encode = function (writer, value) {\n        return _super.prototype.encode.call(this, writer, (0, strings_1.toUtf8Bytes)(value));\n    };\n    StringCoder.prototype.decode = function (reader) {\n        return (0, strings_1.toUtf8String)(_super.prototype.decode.call(this, reader));\n    };\n    return StringCoder;\n}(bytes_1.DynamicBytesCoder));\nexports.StringCoder = StringCoder;\n//# sourceMappingURL=string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0JBQWdCLG1CQUFPLENBQUMsd0ZBQXdCO0FBQ2hELGNBQWMsbUJBQU8sQ0FBQyx3R0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi9jb2RlcnMvc3RyaW5nLmpzPzJhMzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJpbmdDb2RlciA9IHZvaWQgMDtcbnZhciBzdHJpbmdzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIgU3RyaW5nQ29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0cmluZ0NvZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0cmluZ0NvZGVyKGxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJzdHJpbmdcIiwgbG9jYWxOYW1lKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTdHJpbmdDb2Rlci5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9O1xuICAgIFN0cmluZ0NvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCB3cml0ZXIsICgwLCBzdHJpbmdzXzEudG9VdGY4Qnl0ZXMpKHZhbHVlKSk7XG4gICAgfTtcbiAgICBTdHJpbmdDb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gKDAsIHN0cmluZ3NfMS50b1V0ZjhTdHJpbmcpKF9zdXBlci5wcm90b3R5cGUuZGVjb2RlLmNhbGwodGhpcywgcmVhZGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3RyaW5nQ29kZXI7XG59KGJ5dGVzXzEuRHluYW1pY0J5dGVzQ29kZXIpKTtcbmV4cG9ydHMuU3RyaW5nQ29kZXIgPSBTdHJpbmdDb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/tuple.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/tuple.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TupleCoder = void 0;\nvar abstract_coder_1 = __webpack_require__(/*! ./abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nvar array_1 = __webpack_require__(/*! ./array */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/array.js\");\nvar TupleCoder = /** @class */ (function (_super) {\n    __extends(TupleCoder, _super);\n    function TupleCoder(coders, localName) {\n        var _this = this;\n        var dynamic = false;\n        var types = [];\n        coders.forEach(function (coder) {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        var type = (\"tuple(\" + types.join(\",\") + \")\");\n        _this = _super.call(this, \"tuple\", type, localName, dynamic) || this;\n        _this.coders = coders;\n        return _this;\n    }\n    TupleCoder.prototype.defaultValue = function () {\n        var values = [];\n        this.coders.forEach(function (coder) {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        var uniqueNames = this.coders.reduce(function (accum, coder) {\n            var name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach(function (coder, index) {\n            var name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    };\n    TupleCoder.prototype.encode = function (writer, value) {\n        return (0, array_1.pack)(writer, this.coders, value);\n    };\n    TupleCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.name, (0, array_1.unpack)(reader, this.coders));\n    };\n    return TupleCoder;\n}(abstract_coder_1.Coder));\nexports.TupleCoder = TupleCoder;\n//# sourceMappingURL=tuple.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL3R1cGxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQix1QkFBdUIsbUJBQU8sQ0FBQywwSEFBa0I7QUFDakQsY0FBYyxtQkFBTyxDQUFDLHdHQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvY29kZXJzL3R1cGxlLmpzPzMwYmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UdXBsZUNvZGVyID0gdm9pZCAwO1xudmFyIGFic3RyYWN0X2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2RlclwiKTtcbnZhciBhcnJheV8xID0gcmVxdWlyZShcIi4vYXJyYXlcIik7XG52YXIgVHVwbGVDb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVHVwbGVDb2RlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUdXBsZUNvZGVyKGNvZGVycywgbG9jYWxOYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkeW5hbWljID0gZmFsc2U7XG4gICAgICAgIHZhciB0eXBlcyA9IFtdO1xuICAgICAgICBjb2RlcnMuZm9yRWFjaChmdW5jdGlvbiAoY29kZXIpIHtcbiAgICAgICAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlcy5wdXNoKGNvZGVyLnR5cGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHR5cGUgPSAoXCJ0dXBsZShcIiArIHR5cGVzLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwidHVwbGVcIiwgdHlwZSwgbG9jYWxOYW1lLCBkeW5hbWljKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb2RlcnMgPSBjb2RlcnM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVHVwbGVDb2Rlci5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIHRoaXMuY29kZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvZGVyKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChjb2Rlci5kZWZhdWx0VmFsdWUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBXZSBvbmx5IG91dHB1dCBuYW1lZCBwcm9wZXJ0aWVzIGZvciB1bmlxdWVseSBuYW1lZCBjb2RlcnNcbiAgICAgICAgdmFyIHVuaXF1ZU5hbWVzID0gdGhpcy5jb2RlcnMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bSwgY29kZXIpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY3VtW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtW25hbWVdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgICAgICAvLyBBZGQgbmFtZWQgdmFsdWVzXG4gICAgICAgIHRoaXMuY29kZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvZGVyLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBpZiAoIW5hbWUgfHwgdW5pcXVlTmFtZXNbbmFtZV0gIT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBcIl9sZW5ndGhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlc1tuYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpO1xuICAgIH07XG4gICAgVHVwbGVDb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBhcnJheV8xLnBhY2spKHdyaXRlciwgdGhpcy5jb2RlcnMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFR1cGxlQ29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLCAoMCwgYXJyYXlfMS51bnBhY2spKHJlYWRlciwgdGhpcy5jb2RlcnMpKTtcbiAgICB9O1xuICAgIHJldHVybiBUdXBsZUNvZGVyO1xufShhYnN0cmFjdF9jb2Rlcl8xLkNvZGVyKSk7XG5leHBvcnRzLlR1cGxlQ29kZXIgPSBUdXBsZUNvZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHVwbGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/tuple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/fragments.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/fragments.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\n;\nvar _constructorGuard = {};\nvar ModifiersBytes = { calldata: true, memory: true, storage: true };\nvar ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    var originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(\"unexpected character at position \" + i, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        var node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    var parent = { type: \"\", name: \"\", state: { allowType: true } };\n    var node = parent;\n    for (var i = 0; i < param.length; i++) {\n        var c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                var child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                var sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (var key in params) {\n        (0, properties_1.defineReadOnly)(object, key, params[key]);\n    }\n}\nexports.FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nvar ParamType = /** @class */ (function () {\n    function ParamType(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        var match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    ParamType.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            var result_1 = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result_1.indexed = this.indexed;\n            }\n            if (this.components) {\n                result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });\n            }\n            return JSON.stringify(result_1);\n        }\n        var result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== exports.FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== exports.FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === exports.FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    };\n    ParamType.from = function (value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    };\n    ParamType.fromObject = function (value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    };\n    ParamType.fromString = function (value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    };\n    ParamType.isParamType = function (value) {\n        return !!(value != null && value._isParamType);\n    };\n    return ParamType;\n}());\nexports.ParamType = ParamType;\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });\n}\nvar Fragment = /** @class */ (function () {\n    function Fragment(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    Fragment.from = function (value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    };\n    Fragment.fromObject = function (value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    };\n    Fragment.fromString = function (value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    };\n    Fragment.isFragment = function (value) {\n        return !!(value && value._isFragment);\n    };\n    return Fragment;\n}());\nexports.Fragment = Fragment;\nvar EventFragment = /** @class */ (function (_super) {\n    __extends(EventFragment, _super);\n    function EventFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EventFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })\n            });\n        }\n        var result = \"\";\n        if (format !== exports.FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== exports.FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    };\n    EventFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    };\n    EventFragment.fromObject = function (value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        var params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    };\n    EventFragment.fromString = function (value) {\n        var match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        var anonymous = false;\n        match[3].split(\" \").forEach(function (modifier) {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    };\n    EventFragment.isEventFragment = function (value) {\n        return (value && value._isFragment && value.type === \"event\");\n    };\n    return EventFragment;\n}(Fragment));\nexports.EventFragment = EventFragment;\nfunction parseGas(value, params) {\n    params.gas = null;\n    var comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = bignumber_1.BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach(function (modifier) {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    var result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nvar ConstructorFragment = /** @class */ (function (_super) {\n    __extends(ConstructorFragment, _super);\n    function ConstructorFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ConstructorFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })\n            });\n        }\n        if (format === exports.FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        var result = \"constructor(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    };\n    ConstructorFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    };\n    ConstructorFragment.fromObject = function (value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        var state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        var params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    };\n    ConstructorFragment.fromString = function (value) {\n        var params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        var parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    };\n    ConstructorFragment.isConstructorFragment = function (value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    };\n    return ConstructorFragment;\n}(Fragment));\nexports.ConstructorFragment = ConstructorFragment;\nvar FunctionFragment = /** @class */ (function (_super) {\n    __extends(FunctionFragment, _super);\n    function FunctionFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FunctionFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),\n                outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),\n            });\n        }\n        var result = \"\";\n        if (format !== exports.FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== exports.FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(function (output) { return output.format(format); }).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    };\n    FunctionFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    };\n    FunctionFragment.fromObject = function (value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        var state = verifyState(value);\n        var params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    };\n    FunctionFragment.fromString = function (value) {\n        var params = { type: \"function\" };\n        value = parseGas(value, params);\n        var comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        var parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            var returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    };\n    FunctionFragment.isFunctionFragment = function (value) {\n        return (value && value._isFragment && value.type === \"function\");\n    };\n    return FunctionFragment;\n}(ConstructorFragment));\nexports.FunctionFragment = FunctionFragment;\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    var sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(\"cannot specify user defined \" + sig + \" error\", \"fragment\", fragment);\n    }\n    return fragment;\n}\nvar ErrorFragment = /** @class */ (function (_super) {\n    __extends(ErrorFragment, _super);\n    function ErrorFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ErrorFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),\n            });\n        }\n        var result = \"\";\n        if (format !== exports.FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    };\n    ErrorFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    };\n    ErrorFragment.fromObject = function (value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        var params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    };\n    ErrorFragment.fromString = function (value) {\n        var params = { type: \"error\" };\n        var parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    };\n    ErrorFragment.isErrorFragment = function (value) {\n        return (value && value._isFragment && value.type === \"error\");\n    };\n    return ErrorFragment;\n}(Fragment));\nexports.ErrorFragment = ErrorFragment;\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nvar regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(\"invalid identifier \\\"\" + value + \"\\\"\", \"value\", value);\n    }\n    return value;\n}\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    var result = [];\n    var accum = \"\";\n    var depth = 0;\n    for (var offset = 0; offset < value.length; offset++) {\n        var c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/fragments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;\nvar fragments_1 = __webpack_require__(/*! ./fragments */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/fragments.js\");\nObject.defineProperty(exports, \"ConstructorFragment\", ({ enumerable: true, get: function () { return fragments_1.ConstructorFragment; } }));\nObject.defineProperty(exports, \"ErrorFragment\", ({ enumerable: true, get: function () { return fragments_1.ErrorFragment; } }));\nObject.defineProperty(exports, \"EventFragment\", ({ enumerable: true, get: function () { return fragments_1.EventFragment; } }));\nObject.defineProperty(exports, \"FormatTypes\", ({ enumerable: true, get: function () { return fragments_1.FormatTypes; } }));\nObject.defineProperty(exports, \"Fragment\", ({ enumerable: true, get: function () { return fragments_1.Fragment; } }));\nObject.defineProperty(exports, \"FunctionFragment\", ({ enumerable: true, get: function () { return fragments_1.FunctionFragment; } }));\nObject.defineProperty(exports, \"ParamType\", ({ enumerable: true, get: function () { return fragments_1.ParamType; } }));\nvar abi_coder_1 = __webpack_require__(/*! ./abi-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/abi-coder.js\");\nObject.defineProperty(exports, \"AbiCoder\", ({ enumerable: true, get: function () { return abi_coder_1.AbiCoder; } }));\nObject.defineProperty(exports, \"defaultAbiCoder\", ({ enumerable: true, get: function () { return abi_coder_1.defaultAbiCoder; } }));\nvar interface_1 = __webpack_require__(/*! ./interface */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/interface.js\");\nObject.defineProperty(exports, \"checkResultErrors\", ({ enumerable: true, get: function () { return interface_1.checkResultErrors; } }));\nObject.defineProperty(exports, \"Indexed\", ({ enumerable: true, get: function () { return interface_1.Indexed; } }));\nObject.defineProperty(exports, \"Interface\", ({ enumerable: true, get: function () { return interface_1.Interface; } }));\nObject.defineProperty(exports, \"LogDescription\", ({ enumerable: true, get: function () { return interface_1.LogDescription; } }));\nObject.defineProperty(exports, \"TransactionDescription\", ({ enumerable: true, get: function () { return interface_1.TransactionDescription; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsc0JBQXNCLEdBQUcseUJBQXlCLEdBQUcsZUFBZSxHQUFHLGlCQUFpQixHQUFHLHVCQUF1QixHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLHdCQUF3QixHQUFHLGdCQUFnQixHQUFHLHFCQUFxQixHQUFHLHFCQUFxQixHQUFHLDJCQUEyQjtBQUM1VSxrQkFBa0IsbUJBQU8sQ0FBQyx5R0FBYTtBQUN2Qyx1REFBc0QsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDekksaURBQWdELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQzdILGlEQUFnRCxFQUFFLHFDQUFxQyxxQ0FBcUMsRUFBQztBQUM3SCwrQ0FBOEMsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDekgsNENBQTJDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ25ILG9EQUFtRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNuSSw2Q0FBNEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDckgsa0JBQWtCLG1CQUFPLENBQUMseUdBQWE7QUFDdkMsNENBQTJDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ25ILG1EQUFrRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNqSSxrQkFBa0IsbUJBQU8sQ0FBQyx5R0FBYTtBQUN2QyxxREFBb0QsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDckksMkNBQTBDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2pILDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNySCxrREFBaUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDL0gsMERBQXlELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDO0FBQy9JIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi9pbmRleC5qcz80ODI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFuc2FjdGlvbkRlc2NyaXB0aW9uID0gZXhwb3J0cy5Mb2dEZXNjcmlwdGlvbiA9IGV4cG9ydHMuY2hlY2tSZXN1bHRFcnJvcnMgPSBleHBvcnRzLkluZGV4ZWQgPSBleHBvcnRzLkludGVyZmFjZSA9IGV4cG9ydHMuZGVmYXVsdEFiaUNvZGVyID0gZXhwb3J0cy5BYmlDb2RlciA9IGV4cG9ydHMuRm9ybWF0VHlwZXMgPSBleHBvcnRzLlBhcmFtVHlwZSA9IGV4cG9ydHMuRnVuY3Rpb25GcmFnbWVudCA9IGV4cG9ydHMuRnJhZ21lbnQgPSBleHBvcnRzLkV2ZW50RnJhZ21lbnQgPSBleHBvcnRzLkVycm9yRnJhZ21lbnQgPSBleHBvcnRzLkNvbnN0cnVjdG9yRnJhZ21lbnQgPSB2b2lkIDA7XG52YXIgZnJhZ21lbnRzXzEgPSByZXF1aXJlKFwiLi9mcmFnbWVudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25zdHJ1Y3RvckZyYWdtZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmcmFnbWVudHNfMS5Db25zdHJ1Y3RvckZyYWdtZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXJyb3JGcmFnbWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJhZ21lbnRzXzEuRXJyb3JGcmFnbWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV2ZW50RnJhZ21lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyYWdtZW50c18xLkV2ZW50RnJhZ21lbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JtYXRUeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJhZ21lbnRzXzEuRm9ybWF0VHlwZXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGcmFnbWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJhZ21lbnRzXzEuRnJhZ21lbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGdW5jdGlvbkZyYWdtZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmcmFnbWVudHNfMS5GdW5jdGlvbkZyYWdtZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyYW1UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmcmFnbWVudHNfMS5QYXJhbVR5cGU7IH0gfSk7XG52YXIgYWJpX2NvZGVyXzEgPSByZXF1aXJlKFwiLi9hYmktY29kZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYmlDb2RlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJpX2NvZGVyXzEuQWJpQ29kZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0QWJpQ29kZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFiaV9jb2Rlcl8xLmRlZmF1bHRBYmlDb2RlcjsgfSB9KTtcbnZhciBpbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL2ludGVyZmFjZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNoZWNrUmVzdWx0RXJyb3JzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcmZhY2VfMS5jaGVja1Jlc3VsdEVycm9yczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkluZGV4ZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVyZmFjZV8xLkluZGV4ZWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnRlcmZhY2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVyZmFjZV8xLkludGVyZmFjZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxvZ0Rlc2NyaXB0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcmZhY2VfMS5Mb2dEZXNjcmlwdGlvbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRyYW5zYWN0aW9uRGVzY3JpcHRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVyZmFjZV8xLlRyYW5zYWN0aW9uRGVzY3JpcHRpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/interface.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/interface.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib/index.js\");\nvar keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar abi_coder_1 = __webpack_require__(/*! ./abi-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/abi-coder.js\");\nvar abstract_coder_1 = __webpack_require__(/*! ./coders/abstract-coder */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js\");\nObject.defineProperty(exports, \"checkResultErrors\", ({ enumerable: true, get: function () { return abstract_coder_1.checkResultErrors; } }));\nvar fragments_1 = __webpack_require__(/*! ./fragments */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/fragments.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar LogDescription = /** @class */ (function (_super) {\n    __extends(LogDescription, _super);\n    function LogDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LogDescription;\n}(properties_1.Description));\nexports.LogDescription = LogDescription;\nvar TransactionDescription = /** @class */ (function (_super) {\n    __extends(TransactionDescription, _super);\n    function TransactionDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TransactionDescription;\n}(properties_1.Description));\nexports.TransactionDescription = TransactionDescription;\nvar ErrorDescription = /** @class */ (function (_super) {\n    __extends(ErrorDescription, _super);\n    function ErrorDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ErrorDescription;\n}(properties_1.Description));\nexports.ErrorDescription = ErrorDescription;\nvar Indexed = /** @class */ (function (_super) {\n    __extends(Indexed, _super);\n    function Indexed() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Indexed.isIndexed = function (value) {\n        return !!(value && value._isIndexed);\n    };\n    return Indexed;\n}(properties_1.Description));\nexports.Indexed = Indexed;\nvar BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    var wrap = new Error(\"deferred error during ABI decoding triggered accessing \" + property);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nvar Interface = /** @class */ (function () {\n    function Interface(fragments) {\n        var _newTarget = this.constructor;\n        var _this = this;\n        var abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        (0, properties_1.defineReadOnly)(this, \"fragments\", abi.map(function (fragment) {\n            return fragments_1.Fragment.from(fragment);\n        }).filter(function (fragment) { return (fragment != null); }));\n        (0, properties_1.defineReadOnly)(this, \"_abiCoder\", (0, properties_1.getStatic)(_newTarget, \"getAbiCoder\")());\n        (0, properties_1.defineReadOnly)(this, \"functions\", {});\n        (0, properties_1.defineReadOnly)(this, \"errors\", {});\n        (0, properties_1.defineReadOnly)(this, \"events\", {});\n        (0, properties_1.defineReadOnly)(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach(function (fragment) {\n            var bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (_this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    (0, properties_1.defineReadOnly)(_this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = _this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = _this.events;\n                    break;\n                case \"error\":\n                    bucket = _this.errors;\n                    break;\n                default:\n                    return;\n            }\n            var signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            (0, properties_1.defineReadOnly)(this, \"deploy\", fragments_1.ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        (0, properties_1.defineReadOnly)(this, \"_isInterface\", true);\n    }\n    Interface.prototype.format = function (format) {\n        if (!format) {\n            format = fragments_1.FormatTypes.full;\n        }\n        if (format === fragments_1.FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        var abi = this.fragments.map(function (fragment) { return fragment.format(format); });\n        // We need to re-bundle the JSON fragments a bit\n        if (format === fragments_1.FormatTypes.json) {\n            return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));\n        }\n        return abi;\n    };\n    // Sub-classes can override these to handle other blockchains\n    Interface.getAbiCoder = function () {\n        return abi_coder_1.defaultAbiCoder;\n    };\n    Interface.getAddress = function (address) {\n        return (0, address_1.getAddress)(address);\n    };\n    Interface.getSighash = function (fragment) {\n        return (0, bytes_1.hexDataSlice)((0, hash_1.id)(fragment.format()), 0, 4);\n    };\n    Interface.getEventTopic = function (eventFragment) {\n        return (0, hash_1.id)(eventFragment.format());\n    };\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {\n        if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {\n            for (var name_1 in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {\n                    return this.functions[name_1];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            var name_2 = nameOrSignatureOrSighash.trim();\n            var matching = Object.keys(this.functions).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_2); });\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name_2);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name_2);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    };\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {\n        if ((0, bytes_1.isHexString)(nameOrSignatureOrTopic)) {\n            var topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (var name_3 in this.events) {\n                if (topichash === this.getEventTopic(name_3)) {\n                    return this.events[name_3];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            var name_4 = nameOrSignatureOrTopic.trim();\n            var matching = Object.keys(this.events).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_4); });\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name_4);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name_4);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    };\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    Interface.prototype.getError = function (nameOrSignatureOrSighash) {\n        if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {\n            var getSighash = (0, properties_1.getStatic)(this.constructor, \"getSighash\");\n            for (var name_5 in this.errors) {\n                var error = this.errors[name_5];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name_5];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            var name_6 = nameOrSignatureOrSighash.trim();\n            var matching = Object.keys(this.errors).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_6); });\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name_6);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name_6);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        var result = this.errors[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    };\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    Interface.prototype.getSighash = function (fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return (0, properties_1.getStatic)(this.constructor, \"getSighash\")(fragment);\n    };\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    Interface.prototype.getEventTopic = function (eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return (0, properties_1.getStatic)(this.constructor, \"getEventTopic\")(eventFragment);\n    };\n    Interface.prototype._decodeParams = function (params, data) {\n        return this._abiCoder.decode(params, data);\n    };\n    Interface.prototype._encodeParams = function (params, values) {\n        return this._abiCoder.encode(params, values);\n    };\n    Interface.prototype.encodeDeploy = function (values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    };\n    Interface.prototype.decodeErrorResult = function (fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        var bytes = (0, bytes_1.arrayify)(data);\n        if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(\"data signature does not match error \" + fragment.name + \".\", \"data\", (0, bytes_1.hexlify)(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    };\n    Interface.prototype.encodeErrorResult = function (fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return (0, bytes_1.hexlify)((0, bytes_1.concat)([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    };\n    // Decode the data for a function call (e.g. tx.data)\n    Interface.prototype.decodeFunctionData = function (functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        var bytes = (0, bytes_1.arrayify)(data);\n        if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(\"data signature does not match function \" + functionFragment.name + \".\", \"data\", (0, bytes_1.hexlify)(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    };\n    // Encode the data for a function call (e.g. tx.data)\n    Interface.prototype.encodeFunctionData = function (functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return (0, bytes_1.hexlify)((0, bytes_1.concat)([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    };\n    // Decode the result from a function call (e.g. from eth_call)\n    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        var bytes = (0, bytes_1.arrayify)(data);\n        var reason = null;\n        var message = \"\";\n        var errorArgs = null;\n        var errorName = null;\n        var errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                var selector = (0, bytes_1.hexlify)(bytes.slice(0, 4));\n                var builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = \"; VM Exception while processing transaction: reverted with reason string \" + JSON.stringify(errorArgs[0]);\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = \"; VM Exception while processing transaction: reverted with panic code \" + errorArgs[0];\n                    }\n                }\n                else {\n                    try {\n                        var error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, logger_1.Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: (0, bytes_1.hexlify)(data),\n            errorArgs: errorArgs,\n            errorName: errorName,\n            errorSignature: errorSignature,\n            reason: reason\n        });\n    };\n    // Encode the result for a function call (e.g. for eth_call)\n    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return (0, bytes_1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));\n    };\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {\n        var _this = this;\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        var topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        var encodeTopic = function (param, value) {\n            if (param.type === \"string\") {\n                return (0, hash_1.id)(value);\n            }\n            else if (param.type === \"bytes\") {\n                return (0, keccak256_1.keccak256)((0, bytes_1.hexlify)(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = bignumber_1.BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                _this._abiCoder.encode([\"address\"], [value]);\n            }\n            return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);\n        };\n        values.forEach(function (value, index) {\n            var param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map(function (value) { return encodeTopic(param, value); }));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    };\n    Interface.prototype.encodeEventLog = function (eventFragment, values) {\n        var _this = this;\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        var topics = [];\n        var dataTypes = [];\n        var dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach(function (param, index) {\n            var value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push((0, hash_1.id)(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push((0, keccak256_1.keccak256)(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(_this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    };\n    // Decode a filter for the event and the search criteria\n    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            var topicHash = this.getEventTopic(eventFragment);\n            if (!(0, bytes_1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        var indexed = [];\n        var nonIndexed = [];\n        var dynamic = [];\n        eventFragment.inputs.forEach(function (param, index) {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(fragments_1.ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, (0, bytes_1.concat)(topics)) : null;\n        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        var result = [];\n        var nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach(function (param, index) {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                var value_1 = result[index];\n                // Make error named values throw on access\n                if (value_1 instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: function () { throw wrapAccessError(\"property \" + JSON.stringify(param.name), value_1); }\n                    });\n                }\n                else {\n                    result[param.name] = value_1;\n                }\n            }\n        });\n        var _loop_1 = function (i) {\n            var value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: function () { throw wrapAccessError(\"index \" + i, value); }\n                });\n            }\n        };\n        // Make all error indexed values throw on access\n        for (var i = 0; i < result.length; i++) {\n            _loop_1(i);\n        }\n        return Object.freeze(result);\n    };\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    Interface.prototype.parseTransaction = function (tx) {\n        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: bignumber_1.BigNumber.from(tx.value || \"0\"),\n        });\n    };\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    Interface.prototype.parseLog = function (log) {\n        var fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    };\n    Interface.prototype.parseError = function (data) {\n        var hexData = (0, bytes_1.hexlify)(data);\n        var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    };\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    Interface.isInterface = function (value) {\n        return !!(value && value._isInterface);\n    };\n    return Interface;\n}());\nexports.Interface = Interface;\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/_version.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/_version.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"contracts/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2NvbnRyYWN0cy9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2NvbnRyYWN0cy9saWIvX3ZlcnNpb24uanM/ZmI0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwiY29udHJhY3RzLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractFactory = exports.Contract = exports.BaseContract = void 0;\nvar abi_1 = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/index.js\");\nvar abstract_provider_1 = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib/index.js\");\nvar abstract_signer_1 = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(ssr)/./node_modules/@ethersproject/abstract-signer/lib/index.js\");\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\n;\n;\n///////////////////////////////\nvar allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function () {\n        var name, address;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, nameOrPromise];\n                case 1:\n                    name = _a.sent();\n                    if (typeof (name) !== \"string\") {\n                        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n                    }\n                    // If it is already an address, just use it (after adding checksum)\n                    try {\n                        return [2 /*return*/, (0, address_1.getAddress)(name)];\n                    }\n                    catch (error) { }\n                    if (!resolver) {\n                        logger.throwError(\"a provider or signer is needed to resolve ENS names\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"resolveName\"\n                        });\n                    }\n                    return [4 /*yield*/, resolver.resolveName(name)];\n                case 2:\n                    address = _a.sent();\n                    if (address == null) {\n                        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n                    }\n                    return [2 /*return*/, address];\n            }\n        });\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!Array.isArray(paramType)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, Promise.all(paramType.map(function (paramType, index) {\n                            return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n                        }))];\n                case 1: return [2 /*return*/, _a.sent()];\n                case 2:\n                    if (!(paramType.type === \"address\")) return [3 /*break*/, 4];\n                    return [4 /*yield*/, resolveName(resolver, value)];\n                case 3: return [2 /*return*/, _a.sent()];\n                case 4:\n                    if (!(paramType.type === \"tuple\")) return [3 /*break*/, 6];\n                    return [4 /*yield*/, resolveAddresses(resolver, value, paramType.components)];\n                case 5: return [2 /*return*/, _a.sent()];\n                case 6:\n                    if (!(paramType.baseType === \"array\")) return [3 /*break*/, 8];\n                    if (!Array.isArray(value)) {\n                        return [2 /*return*/, Promise.reject(logger.makeError(\"invalid value for array\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                                argument: \"value\",\n                                value: value\n                            }))];\n                    }\n                    return [4 /*yield*/, Promise.all(value.map(function (v) { return resolveAddresses(resolver, v, paramType.arrayChildren); }))];\n                case 7: return [2 /*return*/, _a.sent()];\n                case 8: return [2 /*return*/, value];\n            }\n        });\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function () {\n        var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;\n        var _this = this;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    overrides = {};\n                    if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                        overrides = (0, properties_1.shallowCopy)(args.pop());\n                    }\n                    // Make sure the parameter count matches\n                    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n                    // Populate \"from\" override (allow promises)\n                    if (contract.signer) {\n                        if (overrides.from) {\n                            // Contracts with a Signer are from the Signer's frame-of-reference;\n                            // but we allow overriding \"from\" if it matches the signer\n                            overrides.from = (0, properties_1.resolveProperties)({\n                                override: resolveName(contract.signer, overrides.from),\n                                signer: contract.signer.getAddress()\n                            }).then(function (check) { return __awaiter(_this, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    if ((0, address_1.getAddress)(check.signer) !== check.override) {\n                                        logger.throwError(\"Contract with a Signer cannot override from\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                            operation: \"overrides.from\"\n                                        });\n                                    }\n                                    return [2 /*return*/, check.override];\n                                });\n                            }); });\n                        }\n                        else {\n                            overrides.from = contract.signer.getAddress();\n                        }\n                    }\n                    else if (overrides.from) {\n                        overrides.from = resolveName(contract.provider, overrides.from);\n                        //} else {\n                        // Contracts without a signer can override \"from\", and if\n                        // unspecified the zero address is used\n                        //overrides.from = AddressZero;\n                    }\n                    return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n                            address: contract.resolvedAddress,\n                            overrides: ((0, properties_1.resolveProperties)(overrides) || {})\n                        })];\n                case 1:\n                    resolved = _a.sent();\n                    data = contract.interface.encodeFunctionData(fragment, resolved.args);\n                    tx = {\n                        data: data,\n                        to: resolved.address\n                    };\n                    ro = resolved.overrides;\n                    // Populate simple overrides\n                    if (ro.nonce != null) {\n                        tx.nonce = bignumber_1.BigNumber.from(ro.nonce).toNumber();\n                    }\n                    if (ro.gasLimit != null) {\n                        tx.gasLimit = bignumber_1.BigNumber.from(ro.gasLimit);\n                    }\n                    if (ro.gasPrice != null) {\n                        tx.gasPrice = bignumber_1.BigNumber.from(ro.gasPrice);\n                    }\n                    if (ro.maxFeePerGas != null) {\n                        tx.maxFeePerGas = bignumber_1.BigNumber.from(ro.maxFeePerGas);\n                    }\n                    if (ro.maxPriorityFeePerGas != null) {\n                        tx.maxPriorityFeePerGas = bignumber_1.BigNumber.from(ro.maxPriorityFeePerGas);\n                    }\n                    if (ro.from != null) {\n                        tx.from = ro.from;\n                    }\n                    if (ro.type != null) {\n                        tx.type = ro.type;\n                    }\n                    if (ro.accessList != null) {\n                        tx.accessList = (0, transactions_1.accessListify)(ro.accessList);\n                    }\n                    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n                    if (tx.gasLimit == null && fragment.gas != null) {\n                        intrinsic = 21000;\n                        bytes = (0, bytes_1.arrayify)(data);\n                        for (i = 0; i < bytes.length; i++) {\n                            intrinsic += 4;\n                            if (bytes[i]) {\n                                intrinsic += 64;\n                            }\n                        }\n                        tx.gasLimit = bignumber_1.BigNumber.from(fragment.gas).add(intrinsic);\n                    }\n                    // Populate \"value\" override\n                    if (ro.value) {\n                        roValue = bignumber_1.BigNumber.from(ro.value);\n                        if (!roValue.isZero() && !fragment.payable) {\n                            logger.throwError(\"non-payable method cannot override value\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"overrides.value\",\n                                value: overrides.value\n                            });\n                        }\n                        tx.value = roValue;\n                    }\n                    if (ro.customData) {\n                        tx.customData = (0, properties_1.shallowCopy)(ro.customData);\n                    }\n                    if (ro.ccipReadEnabled) {\n                        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n                    }\n                    // Remove the overrides\n                    delete overrides.nonce;\n                    delete overrides.gasLimit;\n                    delete overrides.gasPrice;\n                    delete overrides.from;\n                    delete overrides.value;\n                    delete overrides.type;\n                    delete overrides.accessList;\n                    delete overrides.maxFeePerGas;\n                    delete overrides.maxPriorityFeePerGas;\n                    delete overrides.customData;\n                    delete overrides.ccipReadEnabled;\n                    leftovers = Object.keys(overrides).filter(function (key) { return (overrides[key] != null); });\n                    if (leftovers.length) {\n                        logger.throwError(\"cannot override \" + leftovers.map(function (l) { return JSON.stringify(l); }).join(\",\"), logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides\",\n                            overrides: leftovers\n                        });\n                    }\n                    return [2 /*return*/, tx];\n            }\n        });\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    var signerOrProvider = (contract.signer || contract.provider);\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var tx;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!signerOrProvider) {\n                            logger.throwError(\"estimate require a provider or signer\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"estimateGas\"\n                            });\n                        }\n                        return [4 /*yield*/, populateTransaction(contract, fragment, args)];\n                    case 1:\n                        tx = _a.sent();\n                        return [4 /*yield*/, signerOrProvider.estimateGas(tx)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    var wait = tx.wait.bind(tx);\n    tx.wait = function (confirmations) {\n        return wait(confirmations).then(function (receipt) {\n            receipt.events = receipt.logs.map(function (log) {\n                var event = (0, properties_1.deepCopy)(log);\n                var parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = function (data, topics) {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = function () { return contract.provider; };\n                event.getBlock = function () {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = function () {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = function () {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    var signerOrProvider = (contract.signer || contract.provider);\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var blockTag, overrides, tx, result, value;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        blockTag = undefined;\n                        if (!(args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\")) return [3 /*break*/, 3];\n                        overrides = (0, properties_1.shallowCopy)(args.pop());\n                        if (!(overrides.blockTag != null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, overrides.blockTag];\n                    case 1:\n                        blockTag = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        delete overrides.blockTag;\n                        args.push(overrides);\n                        _a.label = 3;\n                    case 3:\n                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, contract._deployed(blockTag)];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [4 /*yield*/, populateTransaction(contract, fragment, args)];\n                    case 6:\n                        tx = _a.sent();\n                        return [4 /*yield*/, signerOrProvider.call(tx, blockTag)];\n                    case 7:\n                        result = _a.sent();\n                        try {\n                            value = contract.interface.decodeFunctionResult(fragment, result);\n                            if (collapseSimple && fragment.outputs.length === 1) {\n                                value = value[0];\n                            }\n                            return [2 /*return*/, value];\n                        }\n                        catch (error) {\n                            if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {\n                                error.address = contract.address;\n                                error.args = args;\n                                error.transaction = tx;\n                            }\n                            throw error;\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var txRequest, tx;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!contract.signer) {\n                            logger.throwError(\"sending a transaction requires a signer\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"sendTransaction\"\n                            });\n                        }\n                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, contract._deployed()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, populateTransaction(contract, fragment, args)];\n                    case 3:\n                        txRequest = _a.sent();\n                        return [4 /*yield*/, contract.signer.sendTransaction(txRequest)];\n                    case 4:\n                        tx = _a.sent();\n                        // Tweak the tx.wait so the receipt has extra properties\n                        addContractWait(contract, tx);\n                        return [2 /*return*/, tx];\n                }\n            });\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nvar RunningEvent = /** @class */ (function () {\n    function RunningEvent(tag, filter) {\n        (0, properties_1.defineReadOnly)(this, \"tag\", tag);\n        (0, properties_1.defineReadOnly)(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    RunningEvent.prototype.addListener = function (listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    };\n    RunningEvent.prototype.removeListener = function (listener) {\n        var done = false;\n        this._listeners = this._listeners.filter(function (item) {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    };\n    RunningEvent.prototype.removeAllListeners = function () {\n        this._listeners = [];\n    };\n    RunningEvent.prototype.listeners = function () {\n        return this._listeners.map(function (i) { return i.listener; });\n    };\n    RunningEvent.prototype.listenerCount = function () {\n        return this._listeners.length;\n    };\n    RunningEvent.prototype.run = function (args) {\n        var _this = this;\n        var listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter(function (item) {\n            var argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(function () {\n                item.listener.apply(_this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    };\n    RunningEvent.prototype.prepareEvent = function (event) {\n    };\n    // Returns the array that will be applied to an emit\n    RunningEvent.prototype.getEmit = function (event) {\n        return [event];\n    };\n    return RunningEvent;\n}());\nvar ErrorRunningEvent = /** @class */ (function (_super) {\n    __extends(ErrorRunningEvent, _super);\n    function ErrorRunningEvent() {\n        return _super.call(this, \"error\", null) || this;\n    }\n    return ErrorRunningEvent;\n}(RunningEvent));\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nvar FragmentRunningEvent = /** @class */ (function (_super) {\n    __extends(FragmentRunningEvent, _super);\n    function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n        var _this = this;\n        var filter = {\n            address: address\n        };\n        var topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        _this = _super.call(this, getEventTag(filter), filter) || this;\n        (0, properties_1.defineReadOnly)(_this, \"address\", address);\n        (0, properties_1.defineReadOnly)(_this, \"interface\", contractInterface);\n        (0, properties_1.defineReadOnly)(_this, \"fragment\", fragment);\n        return _this;\n    }\n    FragmentRunningEvent.prototype.prepareEvent = function (event) {\n        var _this = this;\n        _super.prototype.prepareEvent.call(this, event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = function (data, topics) {\n            return _this.interface.decodeEventLog(_this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    };\n    FragmentRunningEvent.prototype.getEmit = function (event) {\n        var errors = (0, abi_1.checkResultErrors)(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        var args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    };\n    return FragmentRunningEvent;\n}(RunningEvent));\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nvar WildcardRunningEvent = /** @class */ (function (_super) {\n    __extends(WildcardRunningEvent, _super);\n    function WildcardRunningEvent(address, contractInterface) {\n        var _this = _super.call(this, \"*\", { address: address }) || this;\n        (0, properties_1.defineReadOnly)(_this, \"address\", address);\n        (0, properties_1.defineReadOnly)(_this, \"interface\", contractInterface);\n        return _this;\n    }\n    WildcardRunningEvent.prototype.prepareEvent = function (event) {\n        var _this = this;\n        _super.prototype.prepareEvent.call(this, event);\n        try {\n            var parsed_1 = this.interface.parseLog(event);\n            event.event = parsed_1.name;\n            event.eventSignature = parsed_1.signature;\n            event.decode = function (data, topics) {\n                return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);\n            };\n            event.args = parsed_1.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    };\n    return WildcardRunningEvent;\n}(RunningEvent));\nvar BaseContract = /** @class */ (function () {\n    function BaseContract(addressOrName, contractInterface, signerOrProvider) {\n        var _newTarget = this.constructor;\n        var _this = this;\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        (0, properties_1.defineReadOnly)(this, \"interface\", (0, properties_1.getStatic)(_newTarget, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            (0, properties_1.defineReadOnly)(this, \"provider\", null);\n            (0, properties_1.defineReadOnly)(this, \"signer\", null);\n        }\n        else if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {\n            (0, properties_1.defineReadOnly)(this, \"provider\", signerOrProvider.provider || null);\n            (0, properties_1.defineReadOnly)(this, \"signer\", signerOrProvider);\n        }\n        else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {\n            (0, properties_1.defineReadOnly)(this, \"provider\", signerOrProvider);\n            (0, properties_1.defineReadOnly)(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        (0, properties_1.defineReadOnly)(this, \"callStatic\", {});\n        (0, properties_1.defineReadOnly)(this, \"estimateGas\", {});\n        (0, properties_1.defineReadOnly)(this, \"functions\", {});\n        (0, properties_1.defineReadOnly)(this, \"populateTransaction\", {});\n        (0, properties_1.defineReadOnly)(this, \"filters\", {});\n        {\n            var uniqueFilters_1 = {};\n            Object.keys(this.interface.events).forEach(function (eventSignature) {\n                var event = _this.interface.events[eventSignature];\n                (0, properties_1.defineReadOnly)(_this.filters, eventSignature, function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    return {\n                        address: _this.address,\n                        topics: _this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters_1[event.name]) {\n                    uniqueFilters_1[event.name] = [];\n                }\n                uniqueFilters_1[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters_1).forEach(function (name) {\n                var filters = uniqueFilters_1[name];\n                if (filters.length === 1) {\n                    (0, properties_1.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(\"Duplicate definition of \" + name + \" (\" + filters.join(\", \") + \")\");\n                }\n            });\n        }\n        (0, properties_1.defineReadOnly)(this, \"_runningEvents\", {});\n        (0, properties_1.defineReadOnly)(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        (0, properties_1.defineReadOnly)(this, \"address\", addressOrName);\n        if (this.provider) {\n            (0, properties_1.defineReadOnly)(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                (0, properties_1.defineReadOnly)(this, \"resolvedAddress\", Promise.resolve((0, address_1.getAddress)(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch(function (e) { });\n        var uniqueNames = {};\n        var uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach(function (signature) {\n            var fragment = _this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(\"Duplicate ABI entry for \" + JSON.stringify(signature));\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                var name_1 = fragment.name;\n                if (!uniqueNames[\"%\" + name_1]) {\n                    uniqueNames[\"%\" + name_1] = [];\n                }\n                uniqueNames[\"%\" + name_1].push(signature);\n            }\n            if (_this[signature] == null) {\n                (0, properties_1.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (_this.functions[signature] == null) {\n                (0, properties_1.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));\n            }\n            if (_this.callStatic[signature] == null) {\n                (0, properties_1.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));\n            }\n            if (_this.populateTransaction[signature] == null) {\n                (0, properties_1.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));\n            }\n            if (_this.estimateGas[signature] == null) {\n                (0, properties_1.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach(function (name) {\n            // Ambiguous names to not get attached as bare names\n            var signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            var signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (_this[name] == null) {\n                    (0, properties_1.defineReadOnly)(_this, name, _this[signature]);\n                }\n            }\n            catch (e) { }\n            if (_this.functions[name] == null) {\n                (0, properties_1.defineReadOnly)(_this.functions, name, _this.functions[signature]);\n            }\n            if (_this.callStatic[name] == null) {\n                (0, properties_1.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);\n            }\n            if (_this.populateTransaction[name] == null) {\n                (0, properties_1.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);\n            }\n            if (_this.estimateGas[name] == null) {\n                (0, properties_1.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);\n            }\n        });\n    }\n    BaseContract.getContractAddress = function (transaction) {\n        return (0, address_1.getContractAddress)(transaction);\n    };\n    BaseContract.getInterface = function (contractInterface) {\n        if (abi_1.Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new abi_1.Interface(contractInterface);\n    };\n    // @TODO: Allow timeout?\n    BaseContract.prototype.deployed = function () {\n        return this._deployed();\n    };\n    BaseContract.prototype._deployed = function (blockTag) {\n        var _this = this;\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(function () {\n                    return _this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: _this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return _this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    };\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    BaseContract.prototype.fallback = function (overrides) {\n        var _this = this;\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        var tx = (0, properties_1.shallowCopy)(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(function () {\n            return _this.signer.sendTransaction(tx);\n        });\n    };\n    // Reconnect to a different signer or provider\n    BaseContract.prototype.connect = function (signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new abstract_signer_1.VoidSigner(signerOrProvider, this.provider);\n        }\n        var contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            (0, properties_1.defineReadOnly)(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    };\n    // Re-attach to a different on-chain instance of this contract\n    BaseContract.prototype.attach = function (addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    };\n    BaseContract.isIndexed = function (value) {\n        return abi_1.Indexed.isIndexed(value);\n    };\n    BaseContract.prototype._normalizeRunningEvent = function (runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    };\n    BaseContract.prototype._getRunningEvent = function (eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            var fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                var topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                var fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            var filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    };\n    BaseContract.prototype._checkRunningEvents = function (runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            var emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    };\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    BaseContract.prototype._wrapEvent = function (runningEvent, log, listener) {\n        var _this = this;\n        var event = (0, properties_1.deepCopy)(log);\n        event.removeListener = function () {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            _this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };\n        event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    };\n    BaseContract.prototype._addEventListener = function (runningEvent, listener, once) {\n        var _this = this;\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            var wrappedEmit = function (log) {\n                var event = _this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        var args = runningEvent.getEmit(event);\n                        _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    _this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    _this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    };\n    BaseContract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {\n        var _this = this;\n        var runningEvent = this._getRunningEvent(event);\n        var filter = (0, properties_1.shallowCopy)(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && (0, bytes_1.isHexString)(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then(function (logs) {\n            return logs.map(function (log) { return _this._wrapEvent(runningEvent, log, null); });\n        });\n    };\n    BaseContract.prototype.on = function (event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    };\n    BaseContract.prototype.once = function (event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    };\n    BaseContract.prototype.emit = function (eventName) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!this.provider) {\n            return false;\n        }\n        var runningEvent = this._getRunningEvent(eventName);\n        var result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    };\n    BaseContract.prototype.listenerCount = function (eventName) {\n        var _this = this;\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce(function (accum, key) {\n                return accum + _this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    };\n    BaseContract.prototype.listeners = function (eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            var result_1 = [];\n            for (var tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach(function (listener) {\n                    result_1.push(listener);\n                });\n            }\n            return result_1;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    };\n    BaseContract.prototype.removeAllListeners = function (eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (var tag in this._runningEvents) {\n                var runningEvent_1 = this._runningEvents[tag];\n                runningEvent_1.removeAllListeners();\n                this._checkRunningEvents(runningEvent_1);\n            }\n            return this;\n        }\n        // Delete any listeners\n        var runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    };\n    BaseContract.prototype.off = function (eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        var runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    };\n    BaseContract.prototype.removeListener = function (eventName, listener) {\n        return this.off(eventName, listener);\n    };\n    return BaseContract;\n}());\nexports.BaseContract = BaseContract;\nvar Contract = /** @class */ (function (_super) {\n    __extends(Contract, _super);\n    function Contract() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Contract;\n}(BaseContract));\nexports.Contract = Contract;\nvar ContractFactory = /** @class */ (function () {\n    function ContractFactory(contractInterface, bytecode, signer) {\n        var _newTarget = this.constructor;\n        var bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if ((0, bytes_1.isBytes)(bytecode)) {\n            bytecodeHex = (0, bytes_1.hexlify)(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!(0, bytes_1.isHexString)(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !abstract_signer_1.Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        (0, properties_1.defineReadOnly)(this, \"bytecode\", bytecodeHex);\n        (0, properties_1.defineReadOnly)(this, \"interface\", (0, properties_1.getStatic)(_newTarget, \"getInterface\")(contractInterface));\n        (0, properties_1.defineReadOnly)(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    ContractFactory.prototype.getDeployTransaction = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = (0, properties_1.shallowCopy)(args.pop());\n            for (var key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            var value = bignumber_1.BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = (0, bytes_1.hexlify)((0, bytes_1.concat)([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    };\n    ContractFactory.prototype.deploy = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var overrides, params, unsignedTx, tx, address, contract;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        overrides = {};\n                        // If 1 extra parameter was passed in, it contains overrides\n                        if (args.length === this.interface.deploy.inputs.length + 1) {\n                            overrides = args.pop();\n                        }\n                        // Make sure the call matches the constructor signature\n                        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n                        return [4 /*yield*/, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];\n                    case 1:\n                        params = _a.sent();\n                        params.push(overrides);\n                        unsignedTx = this.getDeployTransaction.apply(this, params);\n                        return [4 /*yield*/, this.signer.sendTransaction(unsignedTx)];\n                    case 2:\n                        tx = _a.sent();\n                        address = (0, properties_1.getStatic)(this.constructor, \"getContractAddress\")(tx);\n                        contract = (0, properties_1.getStatic)(this.constructor, \"getContract\")(address, this.interface, this.signer);\n                        // Add the modified wait that wraps events\n                        addContractWait(contract, tx);\n                        (0, properties_1.defineReadOnly)(contract, \"deployTransaction\", tx);\n                        return [2 /*return*/, contract];\n                }\n            });\n        });\n    };\n    ContractFactory.prototype.attach = function (address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    };\n    ContractFactory.prototype.connect = function (signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    };\n    ContractFactory.fromSolidity = function (compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", logger_1.Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        var abi = compilerOutput.abi;\n        var bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    };\n    ContractFactory.getInterface = function (contractInterface) {\n        return Contract.getInterface(contractInterface);\n    };\n    ContractFactory.getContractAddress = function (tx) {\n        return (0, address_1.getContractAddress)(tx);\n    };\n    ContractFactory.getContract = function (address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    };\n    return ContractFactory;\n}());\nexports.ContractFactory = ContractFactory;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/_version.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/_version.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"hdnode/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hkbm9kZS9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hkbm9kZS9saWIvX3ZlcnNpb24uanM/NmVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwiaGRub2RlLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAccountPath = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.mnemonicToSeed = exports.HDNode = exports.defaultPath = void 0;\nvar basex_1 = __webpack_require__(/*! @ethersproject/basex */ \"(ssr)/./node_modules/@ethersproject/basex/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar pbkdf2_1 = __webpack_require__(/*! @ethersproject/pbkdf2 */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar signing_key_1 = __webpack_require__(/*! @ethersproject/signing-key */ \"(ssr)/./node_modules/@ethersproject/signing-key/lib/index.js\");\nvar sha2_1 = __webpack_require__(/*! @ethersproject/sha2 */ \"(ssr)/./node_modules/@ethersproject/sha2/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar wordlists_1 = __webpack_require__(/*! @ethersproject/wordlists */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar N = bignumber_1.BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nvar MasterSecret = (0, strings_1.toUtf8Bytes)(\"Bitcoin seed\");\nvar HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits);\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);\n}\nfunction base58check(data) {\n    return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return wordlists_1.wordlists[\"en\"];\n    }\n    if (typeof (wordlist) === \"string\") {\n        var words = wordlists_1.wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nvar _constructorGuard = {};\nexports.defaultPath = \"m/44'/60'/0'/0/0\";\n;\nvar HDNode = /** @class */ (function () {\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            var signingKey = new signing_key_1.SigningKey(privateKey);\n            (0, properties_1.defineReadOnly)(this, \"privateKey\", signingKey.privateKey);\n            (0, properties_1.defineReadOnly)(this, \"publicKey\", signingKey.compressedPublicKey);\n        }\n        else {\n            (0, properties_1.defineReadOnly)(this, \"privateKey\", null);\n            (0, properties_1.defineReadOnly)(this, \"publicKey\", (0, bytes_1.hexlify)(publicKey));\n        }\n        (0, properties_1.defineReadOnly)(this, \"parentFingerprint\", parentFingerprint);\n        (0, properties_1.defineReadOnly)(this, \"fingerprint\", (0, bytes_1.hexDataSlice)((0, sha2_1.ripemd160)((0, sha2_1.sha256)(this.publicKey)), 0, 4));\n        (0, properties_1.defineReadOnly)(this, \"address\", (0, transactions_1.computeAddress)(this.publicKey));\n        (0, properties_1.defineReadOnly)(this, \"chainCode\", chainCode);\n        (0, properties_1.defineReadOnly)(this, \"index\", index);\n        (0, properties_1.defineReadOnly)(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            (0, properties_1.defineReadOnly)(this, \"mnemonic\", null);\n            (0, properties_1.defineReadOnly)(this, \"path\", null);\n        }\n        else if (typeof (mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            (0, properties_1.defineReadOnly)(this, \"mnemonic\", null);\n            (0, properties_1.defineReadOnly)(this, \"path\", mnemonicOrPath);\n        }\n        else {\n            // From a fully qualified source\n            (0, properties_1.defineReadOnly)(this, \"mnemonic\", mnemonicOrPath);\n            (0, properties_1.defineReadOnly)(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n    Object.defineProperty(HDNode.prototype, \"extendedKey\", {\n        get: function () {\n            // We only support the mainnet values for now, but if anyone needs\n            // testnet values, let me know. I believe current sentiment is that\n            // we should always use mainnet, and use BIP-44 to derive the network\n            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n            //   - Testnet: public=0x043587CF, private=0x04358394\n            if (this.depth >= 256) {\n                throw new Error(\"Depth too large!\");\n            }\n            return base58check((0, bytes_1.concat)([\n                ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n                (0, bytes_1.hexlify)(this.depth),\n                this.parentFingerprint,\n                (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(this.index), 4),\n                this.chainCode,\n                ((this.privateKey != null) ? (0, bytes_1.concat)([\"0x00\", this.privateKey]) : this.publicKey),\n            ]));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HDNode.prototype.neuter = function () {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    };\n    HDNode.prototype._derive = function (index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        var path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        var data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set((0, bytes_1.arrayify)(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        }\n        else {\n            // Data = ser_p(point(k_par))\n            data.set((0, bytes_1.arrayify)(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for (var i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n        }\n        var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, this.chainCode, data));\n        var IL = I.slice(0, 32);\n        var IR = I.slice(32);\n        // The private key\n        var ki = null;\n        // The public key\n        var Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(bignumber_1.BigNumber.from(IL).add(this.privateKey).mod(N));\n        }\n        else {\n            var ek = new signing_key_1.SigningKey((0, bytes_1.hexlify)(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        var mnemonicOrPath = path;\n        var srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    };\n    HDNode.prototype.derivePath = function (path) {\n        var components = path.split(\"/\");\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        var result = this;\n        for (var i = 0; i < components.length; i++) {\n            var component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                var index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            }\n            else if (component.match(/^[0-9]+$/)) {\n                var index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            }\n            else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    };\n    HDNode._fromSeed = function (seed, mnemonic) {\n        var seedArray = (0, bytes_1.arrayify)(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    };\n    HDNode.fromMnemonic = function (mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    };\n    HDNode.fromSeed = function (seed) {\n        return HDNode._fromSeed(seed, null);\n    };\n    HDNode.fromExtendedKey = function (extendedKey) {\n        var bytes = basex_1.Base58.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        var depth = bytes[4];\n        var parentFingerprint = (0, bytes_1.hexlify)(bytes.slice(5, 9));\n        var index = parseInt((0, bytes_1.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n        var chainCode = (0, bytes_1.hexlify)(bytes.slice(13, 45));\n        var key = bytes.slice(45, 78);\n        switch ((0, bytes_1.hexlify)(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, (0, bytes_1.hexlify)(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, (0, bytes_1.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    };\n    return HDNode;\n}());\nexports.HDNode = HDNode;\nfunction mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    var salt = (0, strings_1.toUtf8Bytes)(\"mnemonic\" + password, strings_1.UnicodeNormalizationForm.NFKD);\n    return (0, pbkdf2_1.pbkdf2)((0, strings_1.toUtf8Bytes)(mnemonic, strings_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    logger.checkNormalize();\n    var words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    var entropy = (0, bytes_1.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    var offset = 0;\n    for (var i = 0; i < words.length; i++) {\n        var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for (var bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    var entropyBits = 32 * words.length / 3;\n    var checksumBits = words.length / 3;\n    var checksumMask = getUpperMask(checksumBits);\n    var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return (0, bytes_1.hexlify)(entropy.slice(0, entropyBits / 8));\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = (0, bytes_1.arrayify)(entropy);\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    var indices = [0];\n    var remainingBits = 11;\n    for (var i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    var checksumBits = entropy.length / 4;\n    var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexports.isValidMnemonic = isValidMnemonic;\nfunction getAccountPath(index) {\n    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return \"m/44'/60'/\" + index + \"'/0/0\";\n}\nexports.getAccountPath = getAccountPath;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/_version.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/_version.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"json-wallets/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvX3ZlcnNpb24uanM/ZGMzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwianNvbi13YWxsZXRzLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/crowdsale.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/crowdsale.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decrypt = exports.CrowdsaleAccount = void 0;\nvar aes_js_1 = __importDefault(__webpack_require__(/*! aes-js */ \"(ssr)/./node_modules/near-social-vm/node_modules/aes-js/index.js\"));\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib/index.js\");\nvar pbkdf2_1 = __webpack_require__(/*! @ethersproject/pbkdf2 */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/utils.js\");\nvar CrowdsaleAccount = /** @class */ (function (_super) {\n    __extends(CrowdsaleAccount, _super);\n    function CrowdsaleAccount() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {\n        return !!(value && value._isCrowdsaleAccount);\n    };\n    return CrowdsaleAccount;\n}(properties_1.Description));\nexports.CrowdsaleAccount = CrowdsaleAccount;\n// See: https://github.com/ethereum/pyethsaletool\nfunction decrypt(json, password) {\n    var data = JSON.parse(json);\n    password = (0, utils_1.getPassword)(password);\n    // Ethereum Address\n    var ethaddr = (0, address_1.getAddress)((0, utils_1.searchPath)(data, \"ethaddr\"));\n    // Encrypted Seed\n    var encseed = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    var key = (0, bytes_1.arrayify)((0, pbkdf2_1.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    var iv = encseed.slice(0, 16);\n    var encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n    var seed = aes_js_1.default.padding.pkcs7.strip((0, bytes_1.arrayify)(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    var seedHex = \"\";\n    for (var i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    var seedHexBytes = (0, strings_1.toUtf8Bytes)(seedHex);\n    var privateKey = (0, keccak256_1.keccak256)(seedHexBytes);\n    return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=crowdsale.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvY3Jvd2RzYWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLHdCQUF3QjtBQUMxQywrQkFBK0IsbUJBQU8sQ0FBQyxnRkFBUTtBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RkFBd0I7QUFDaEQsY0FBYyxtQkFBTyxDQUFDLG9GQUFzQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDcEQsZUFBZSxtQkFBTyxDQUFDLGtIQUF1QjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RkFBd0I7QUFDaEQsbUJBQW1CLG1CQUFPLENBQUMsOEZBQTJCO0FBQ3RELGVBQWUsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsZ0hBQVk7QUFDckM7QUFDQSxjQUFjLG1CQUFPLENBQUMsMEdBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvY3Jvd2RzYWxlLmpzPzc4MmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNyeXB0ID0gZXhwb3J0cy5Dcm93ZHNhbGVBY2NvdW50ID0gdm9pZCAwO1xudmFyIGFlc19qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJhZXMtanNcIikpO1xudmFyIGFkZHJlc3NfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIik7XG52YXIga2VjY2FrMjU2XzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCIpO1xudmFyIHBia2RmMl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L3Bia2RmMlwiKTtcbnZhciBzdHJpbmdzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiKTtcbnZhciBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiKTtcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIik7XG52YXIgX3ZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL192ZXJzaW9uXCIpO1xudmFyIGxvZ2dlciA9IG5ldyBsb2dnZXJfMS5Mb2dnZXIoX3ZlcnNpb25fMS52ZXJzaW9uKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgQ3Jvd2RzYWxlQWNjb3VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ3Jvd2RzYWxlQWNjb3VudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDcm93ZHNhbGVBY2NvdW50KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIENyb3dkc2FsZUFjY291bnQucHJvdG90eXBlLmlzQ3Jvd2RzYWxlQWNjb3VudCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzQ3Jvd2RzYWxlQWNjb3VudCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ3Jvd2RzYWxlQWNjb3VudDtcbn0ocHJvcGVydGllc18xLkRlc2NyaXB0aW9uKSk7XG5leHBvcnRzLkNyb3dkc2FsZUFjY291bnQgPSBDcm93ZHNhbGVBY2NvdW50O1xuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vcHlldGhzYWxldG9vbFxuZnVuY3Rpb24gZGVjcnlwdChqc29uLCBwYXNzd29yZCkge1xuICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICBwYXNzd29yZCA9ICgwLCB1dGlsc18xLmdldFBhc3N3b3JkKShwYXNzd29yZCk7XG4gICAgLy8gRXRoZXJldW0gQWRkcmVzc1xuICAgIHZhciBldGhhZGRyID0gKDAsIGFkZHJlc3NfMS5nZXRBZGRyZXNzKSgoMCwgdXRpbHNfMS5zZWFyY2hQYXRoKShkYXRhLCBcImV0aGFkZHJcIikpO1xuICAgIC8vIEVuY3J5cHRlZCBTZWVkXG4gICAgdmFyIGVuY3NlZWQgPSAoMCwgdXRpbHNfMS5sb29zZUFycmF5aWZ5KSgoMCwgdXRpbHNfMS5zZWFyY2hQYXRoKShkYXRhLCBcImVuY3NlZWRcIikpO1xuICAgIGlmICghZW5jc2VlZCB8fCAoZW5jc2VlZC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZW5jc2VlZFwiLCBcImpzb25cIiwganNvbik7XG4gICAgfVxuICAgIHZhciBrZXkgPSAoMCwgYnl0ZXNfMS5hcnJheWlmeSkoKDAsIHBia2RmMl8xLnBia2RmMikocGFzc3dvcmQsIHBhc3N3b3JkLCAyMDAwLCAzMiwgXCJzaGEyNTZcIikpLnNsaWNlKDAsIDE2KTtcbiAgICB2YXIgaXYgPSBlbmNzZWVkLnNsaWNlKDAsIDE2KTtcbiAgICB2YXIgZW5jcnlwdGVkU2VlZCA9IGVuY3NlZWQuc2xpY2UoMTYpO1xuICAgIC8vIERlY3J5cHQgdGhlIHNlZWRcbiAgICB2YXIgYWVzQ2JjID0gbmV3IGFlc19qc18xLmRlZmF1bHQuTW9kZU9mT3BlcmF0aW9uLmNiYyhrZXksIGl2KTtcbiAgICB2YXIgc2VlZCA9IGFlc19qc18xLmRlZmF1bHQucGFkZGluZy5wa2NzNy5zdHJpcCgoMCwgYnl0ZXNfMS5hcnJheWlmeSkoYWVzQ2JjLmRlY3J5cHQoZW5jcnlwdGVkU2VlZCkpKTtcbiAgICAvLyBUaGlzIHdhbGxldCBmb3JtYXQgaXMgd2VpcmQuLi4gQ29udmVydCB0aGUgYmluYXJ5IGVuY29kZWQgaGV4IHRvIGEgc3RyaW5nLlxuICAgIHZhciBzZWVkSGV4ID0gXCJcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VlZEhleCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHNlZWRbaV0pO1xuICAgIH1cbiAgICB2YXIgc2VlZEhleEJ5dGVzID0gKDAsIHN0cmluZ3NfMS50b1V0ZjhCeXRlcykoc2VlZEhleCk7XG4gICAgdmFyIHByaXZhdGVLZXkgPSAoMCwga2VjY2FrMjU2XzEua2VjY2FrMjU2KShzZWVkSGV4Qnl0ZXMpO1xuICAgIHJldHVybiBuZXcgQ3Jvd2RzYWxlQWNjb3VudCh7XG4gICAgICAgIF9pc0Nyb3dkc2FsZUFjY291bnQ6IHRydWUsXG4gICAgICAgIGFkZHJlc3M6IGV0aGFkZHIsXG4gICAgICAgIHByaXZhdGVLZXk6IHByaXZhdGVLZXlcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVjcnlwdCA9IGRlY3J5cHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcm93ZHNhbGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/crowdsale.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;\nvar crowdsale_1 = __webpack_require__(/*! ./crowdsale */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/crowdsale.js\");\nObject.defineProperty(exports, \"decryptCrowdsale\", ({ enumerable: true, get: function () { return crowdsale_1.decrypt; } }));\nvar inspect_1 = __webpack_require__(/*! ./inspect */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/inspect.js\");\nObject.defineProperty(exports, \"getJsonWalletAddress\", ({ enumerable: true, get: function () { return inspect_1.getJsonWalletAddress; } }));\nObject.defineProperty(exports, \"isCrowdsaleWallet\", ({ enumerable: true, get: function () { return inspect_1.isCrowdsaleWallet; } }));\nObject.defineProperty(exports, \"isKeystoreWallet\", ({ enumerable: true, get: function () { return inspect_1.isKeystoreWallet; } }));\nvar keystore_1 = __webpack_require__(/*! ./keystore */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/keystore.js\");\nObject.defineProperty(exports, \"decryptKeystore\", ({ enumerable: true, get: function () { return keystore_1.decrypt; } }));\nObject.defineProperty(exports, \"decryptKeystoreSync\", ({ enumerable: true, get: function () { return keystore_1.decryptSync; } }));\nObject.defineProperty(exports, \"encryptKeystore\", ({ enumerable: true, get: function () { return keystore_1.encrypt; } }));\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if ((0, inspect_1.isCrowdsaleWallet)(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        var account = (0, crowdsale_1.decrypt)(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if ((0, inspect_1.isKeystoreWallet)(json)) {\n        return (0, keystore_1.decrypt)(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nexports.decryptJsonWallet = decryptJsonWallet;\nfunction decryptJsonWalletSync(json, password) {\n    if ((0, inspect_1.isCrowdsaleWallet)(json)) {\n        return (0, crowdsale_1.decrypt)(json, password);\n    }\n    if ((0, inspect_1.isKeystoreWallet)(json)) {\n        return (0, keystore_1.decryptSync)(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\nexports.decryptJsonWalletSync = decryptJsonWalletSync;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcseUJBQXlCLEdBQUcsNEJBQTRCLEdBQUcsd0JBQXdCLEdBQUcseUJBQXlCLEdBQUcsdUJBQXVCLEdBQUcsMkJBQTJCLEdBQUcsdUJBQXVCLEdBQUcsd0JBQXdCO0FBQzVQLGtCQUFrQixtQkFBTyxDQUFDLGtIQUFhO0FBQ3ZDLG9EQUFtRCxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUMxSCxnQkFBZ0IsbUJBQU8sQ0FBQyw4R0FBVztBQUNuQyx3REFBdUQsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDekkscURBQW9ELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ25JLG9EQUFtRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNqSSxpQkFBaUIsbUJBQU8sQ0FBQyxnSEFBWTtBQUNyQyxtREFBa0QsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDeEgsdURBQXNELEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ2hJLG1EQUFrRCxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUN4SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliL2luZGV4LmpzP2E1MzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY3J5cHRKc29uV2FsbGV0U3luYyA9IGV4cG9ydHMuZGVjcnlwdEpzb25XYWxsZXQgPSBleHBvcnRzLmdldEpzb25XYWxsZXRBZGRyZXNzID0gZXhwb3J0cy5pc0tleXN0b3JlV2FsbGV0ID0gZXhwb3J0cy5pc0Nyb3dkc2FsZVdhbGxldCA9IGV4cG9ydHMuZW5jcnlwdEtleXN0b3JlID0gZXhwb3J0cy5kZWNyeXB0S2V5c3RvcmVTeW5jID0gZXhwb3J0cy5kZWNyeXB0S2V5c3RvcmUgPSBleHBvcnRzLmRlY3J5cHRDcm93ZHNhbGUgPSB2b2lkIDA7XG52YXIgY3Jvd2RzYWxlXzEgPSByZXF1aXJlKFwiLi9jcm93ZHNhbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNyeXB0Q3Jvd2RzYWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcm93ZHNhbGVfMS5kZWNyeXB0OyB9IH0pO1xudmFyIGluc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2luc3BlY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRKc29uV2FsbGV0QWRkcmVzc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zcGVjdF8xLmdldEpzb25XYWxsZXRBZGRyZXNzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNDcm93ZHNhbGVXYWxsZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3BlY3RfMS5pc0Nyb3dkc2FsZVdhbGxldDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzS2V5c3RvcmVXYWxsZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3BlY3RfMS5pc0tleXN0b3JlV2FsbGV0OyB9IH0pO1xudmFyIGtleXN0b3JlXzEgPSByZXF1aXJlKFwiLi9rZXlzdG9yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY3J5cHRLZXlzdG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ga2V5c3RvcmVfMS5kZWNyeXB0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjcnlwdEtleXN0b3JlU3luY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ga2V5c3RvcmVfMS5kZWNyeXB0U3luYzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY3J5cHRLZXlzdG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ga2V5c3RvcmVfMS5lbmNyeXB0OyB9IH0pO1xuZnVuY3Rpb24gZGVjcnlwdEpzb25XYWxsZXQoanNvbiwgcGFzc3dvcmQsIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICBpZiAoKDAsIGluc3BlY3RfMS5pc0Nyb3dkc2FsZVdhbGxldCkoanNvbikpIHtcbiAgICAgICAgaWYgKHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2soMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjY291bnQgPSAoMCwgY3Jvd2RzYWxlXzEuZGVjcnlwdCkoanNvbiwgcGFzc3dvcmQpO1xuICAgICAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjaygxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFjY291bnQpO1xuICAgIH1cbiAgICBpZiAoKDAsIGluc3BlY3RfMS5pc0tleXN0b3JlV2FsbGV0KShqc29uKSkge1xuICAgICAgICByZXR1cm4gKDAsIGtleXN0b3JlXzEuZGVjcnlwdCkoanNvbiwgcGFzc3dvcmQsIHByb2dyZXNzQ2FsbGJhY2spO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaW52YWxpZCBKU09OIHdhbGxldFwiKSk7XG59XG5leHBvcnRzLmRlY3J5cHRKc29uV2FsbGV0ID0gZGVjcnlwdEpzb25XYWxsZXQ7XG5mdW5jdGlvbiBkZWNyeXB0SnNvbldhbGxldFN5bmMoanNvbiwgcGFzc3dvcmQpIHtcbiAgICBpZiAoKDAsIGluc3BlY3RfMS5pc0Nyb3dkc2FsZVdhbGxldCkoanNvbikpIHtcbiAgICAgICAgcmV0dXJuICgwLCBjcm93ZHNhbGVfMS5kZWNyeXB0KShqc29uLCBwYXNzd29yZCk7XG4gICAgfVxuICAgIGlmICgoMCwgaW5zcGVjdF8xLmlzS2V5c3RvcmVXYWxsZXQpKGpzb24pKSB7XG4gICAgICAgIHJldHVybiAoMCwga2V5c3RvcmVfMS5kZWNyeXB0U3luYykoanNvbiwgcGFzc3dvcmQpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIEpTT04gd2FsbGV0XCIpO1xufVxuZXhwb3J0cy5kZWNyeXB0SnNvbldhbGxldFN5bmMgPSBkZWNyeXB0SnNvbldhbGxldFN5bmM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/inspect.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/inspect.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = void 0;\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nfunction isCrowdsaleWallet(json) {\n    var data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    return (data.encseed && data.ethaddr);\n}\nexports.isCrowdsaleWallet = isCrowdsaleWallet;\nfunction isKeystoreWallet(json) {\n    var data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\nexports.isKeystoreWallet = isKeystoreWallet;\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nfunction getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return (0, address_1.getAddress)(JSON.parse(json).ethaddr);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return (0, address_1.getAddress)(JSON.parse(json).address);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    return null;\n}\nexports.getJsonWalletAddress = getJsonWalletAddress;\n//# sourceMappingURL=inspect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvaW5zcGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsR0FBRyx3QkFBd0IsR0FBRyx5QkFBeUI7QUFDbkYsZ0JBQWdCLG1CQUFPLENBQUMsd0ZBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliL2luc3BlY3QuanM/MTBjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SnNvbldhbGxldEFkZHJlc3MgPSBleHBvcnRzLmlzS2V5c3RvcmVXYWxsZXQgPSBleHBvcnRzLmlzQ3Jvd2RzYWxlV2FsbGV0ID0gdm9pZCAwO1xudmFyIGFkZHJlc3NfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCIpO1xuZnVuY3Rpb24gaXNDcm93ZHNhbGVXYWxsZXQoanNvbikge1xuICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChkYXRhLmVuY3NlZWQgJiYgZGF0YS5ldGhhZGRyKTtcbn1cbmV4cG9ydHMuaXNDcm93ZHNhbGVXYWxsZXQgPSBpc0Nyb3dkc2FsZVdhbGxldDtcbmZ1bmN0aW9uIGlzS2V5c3RvcmVXYWxsZXQoanNvbikge1xuICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFkYXRhLnZlcnNpb24gfHwgcGFyc2VJbnQoZGF0YS52ZXJzaW9uKSAhPT0gZGF0YS52ZXJzaW9uIHx8IHBhcnNlSW50KGRhdGEudmVyc2lvbikgIT09IDMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBAVE9ETzogUHV0IG1vcmUgY2hlY2tzIHRvIG1ha2Ugc3VyZSBpdCBoYXMga2RmLCBpdiBhbmQgYWxsIHRoYXQgZ29vZCBzdHVmZlxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5pc0tleXN0b3JlV2FsbGV0ID0gaXNLZXlzdG9yZVdhbGxldDtcbi8vZXhwb3J0IGZ1bmN0aW9uIGlzSnNvbldhbGxldChqc29uOiBzdHJpbmcpOiBib29sZWFuIHtcbi8vICAgIHJldHVybiAoaXNTZWNyZXRTdG9yYWdlV2FsbGV0KGpzb24pIHx8IGlzQ3Jvd2RzYWxlV2FsbGV0KGpzb24pKTtcbi8vfVxuZnVuY3Rpb24gZ2V0SnNvbldhbGxldEFkZHJlc3MoanNvbikge1xuICAgIGlmIChpc0Nyb3dkc2FsZVdhbGxldChqc29uKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBhZGRyZXNzXzEuZ2V0QWRkcmVzcykoSlNPTi5wYXJzZShqc29uKS5ldGhhZGRyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc0tleXN0b3JlV2FsbGV0KGpzb24pKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGFkZHJlc3NfMS5nZXRBZGRyZXNzKShKU09OLnBhcnNlKGpzb24pLmFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmdldEpzb25XYWxsZXRBZGRyZXNzID0gZ2V0SnNvbldhbGxldEFkZHJlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnNwZWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/inspect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/keystore.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/keystore.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encrypt = exports.decrypt = exports.decryptSync = exports.KeystoreAccount = void 0;\nvar aes_js_1 = __importDefault(__webpack_require__(/*! aes-js */ \"(ssr)/./node_modules/near-social-vm/node_modules/aes-js/index.js\"));\nvar scrypt_js_1 = __importDefault(__webpack_require__(/*! scrypt-js */ \"(ssr)/./node_modules/scrypt-js/scrypt.js\"));\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar hdnode_1 = __webpack_require__(/*! @ethersproject/hdnode */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/index.js\");\nvar keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib/index.js\");\nvar pbkdf2_1 = __webpack_require__(/*! @ethersproject/pbkdf2 */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/index.js\");\nvar random_1 = __webpack_require__(/*! @ethersproject/random */ \"(ssr)/./node_modules/@ethersproject/random/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/utils.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\n// Exported Types\nfunction hasMnemonic(value) {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\nvar KeystoreAccount = /** @class */ (function (_super) {\n    __extends(KeystoreAccount, _super);\n    function KeystoreAccount() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    KeystoreAccount.prototype.isKeystoreAccount = function (value) {\n        return !!(value && value._isKeystoreAccount);\n    };\n    return KeystoreAccount;\n}(properties_1.Description));\nexports.KeystoreAccount = KeystoreAccount;\nfunction _decrypt(data, key, ciphertext) {\n    var cipher = (0, utils_1.searchPath)(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        var iv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"crypto/cipherparams/iv\"));\n        var counter = new aes_js_1.default.Counter(iv);\n        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);\n        return (0, bytes_1.arrayify)(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n}\nfunction _getAccount(data, key) {\n    var ciphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"crypto/ciphertext\"));\n    var computedMAC = (0, bytes_1.hexlify)((0, keccak256_1.keccak256)((0, bytes_1.concat)([key.slice(16, 32), ciphertext]))).substring(2);\n    if (computedMAC !== (0, utils_1.searchPath)(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n    var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n    var mnemonicKey = key.slice(32, 64);\n    var address = (0, transactions_1.computeAddress)(privateKey);\n    if (data.address) {\n        var check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") {\n            check = \"0x\" + check;\n        }\n        if ((0, address_1.getAddress)(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n    var account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: (0, bytes_1.hexlify)(privateKey)\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if ((0, utils_1.searchPath)(data, \"x-ethers/version\") === \"0.1\") {\n        var mnemonicCiphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"x-ethers/mnemonicCiphertext\"));\n        var mnemonicIv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"x-ethers/mnemonicCounter\"));\n        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        var path = (0, utils_1.searchPath)(data, \"x-ethers/path\") || hdnode_1.defaultPath;\n        var locale = (0, utils_1.searchPath)(data, \"x-ethers/locale\") || \"en\";\n        var entropy = (0, bytes_1.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n        try {\n            var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, locale);\n            var node = hdnode_1.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n            account.mnemonic = node.mnemonic;\n        }\n        catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n    return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return (0, bytes_1.arrayify)((0, pbkdf2_1.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    var passwordBytes = (0, utils_1.getPassword)(password);\n    var kdf = (0, utils_1.searchPath)(data, \"crypto/kdf\");\n    if (kdf && typeof (kdf) === \"string\") {\n        var throwError = function (name, value) {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n        if (kdf.toLowerCase() === \"scrypt\") {\n            var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"crypto/kdfparams/salt\"));\n            var N = parseInt((0, utils_1.searchPath)(data, \"crypto/kdfparams/n\"));\n            var r = parseInt((0, utils_1.searchPath)(data, \"crypto/kdfparams/r\"));\n            var p = parseInt((0, utils_1.searchPath)(data, \"crypto/kdfparams/p\"));\n            // Check for all required parameters\n            if (!N || !r || !p) {\n                throwError(\"kdf\", kdf);\n            }\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) {\n                throwError(\"N\", N);\n            }\n            var dkLen = parseInt((0, utils_1.searchPath)(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, \"crypto/kdfparams/salt\"));\n            var prfFunc = null;\n            var prf = (0, utils_1.searchPath)(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            }\n            else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            }\n            else {\n                throwError(\"prf\", prf);\n            }\n            var count = parseInt((0, utils_1.searchPath)(data, \"crypto/kdfparams/c\"));\n            var dkLen = parseInt((0, utils_1.searchPath)(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nfunction decryptSync(json, password) {\n    var data = JSON.parse(json);\n    var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);\n    return _getAccount(data, key);\n}\nexports.decryptSync = decryptSync;\nfunction decrypt(json, password, progressCallback) {\n    return __awaiter(this, void 0, void 0, function () {\n        var data, key;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    data = JSON.parse(json);\n                    return [4 /*yield*/, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];\n                case 1:\n                    key = _a.sent();\n                    return [2 /*return*/, _getAccount(data, key)];\n            }\n        });\n    });\n}\nexports.decrypt = decrypt;\nfunction encrypt(account, password, options, progressCallback) {\n    try {\n        // Check the address matches the private key\n        if ((0, address_1.getAddress)(account.address) !== (0, transactions_1.computeAddress)(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            var mnemonic = account.mnemonic;\n            var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || hdnode_1.defaultPath);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n    // The options are optional, so adjust the call as needed\n    if (typeof (options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    var privateKey = (0, bytes_1.arrayify)(account.privateKey);\n    var passwordBytes = (0, utils_1.getPassword)(password);\n    var entropy = null;\n    var path = null;\n    var locale = null;\n    if (hasMnemonic(account)) {\n        var srcMnemonic = account.mnemonic;\n        entropy = (0, bytes_1.arrayify)((0, hdnode_1.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || hdnode_1.defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n    var client = options.client;\n    if (!client) {\n        client = \"ethers.js\";\n    }\n    // Check/generate the salt\n    var salt = null;\n    if (options.salt) {\n        salt = (0, bytes_1.arrayify)(options.salt);\n    }\n    else {\n        salt = (0, random_1.randomBytes)(32);\n        ;\n    }\n    // Override initialization vector\n    var iv = null;\n    if (options.iv) {\n        iv = (0, bytes_1.arrayify)(options.iv);\n        if (iv.length !== 16) {\n            throw new Error(\"invalid iv\");\n        }\n    }\n    else {\n        iv = (0, random_1.randomBytes)(16);\n    }\n    // Override the uuid\n    var uuidRandom = null;\n    if (options.uuid) {\n        uuidRandom = (0, bytes_1.arrayify)(options.uuid);\n        if (uuidRandom.length !== 16) {\n            throw new Error(\"invalid uuid\");\n        }\n    }\n    else {\n        uuidRandom = (0, random_1.randomBytes)(16);\n    }\n    // Override the scrypt password-based key derivation function parameters\n    var N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {\n        key = (0, bytes_1.arrayify)(key);\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        var derivedKey = key.slice(0, 16);\n        var macPrefix = key.slice(16, 32);\n        // This will be used to encrypt the mnemonic phrase (if any)\n        var mnemonicKey = key.slice(32, 64);\n        // Encrypt the private key\n        var counter = new aes_js_1.default.Counter(iv);\n        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);\n        var ciphertext = (0, bytes_1.arrayify)(aesCtr.encrypt(privateKey));\n        // Compute the message authentication code, used to check the password\n        var mac = (0, keccak256_1.keccak256)((0, bytes_1.concat)([macPrefix, ciphertext]));\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        var data = {\n            address: account.address.substring(2).toLowerCase(),\n            id: (0, utils_1.uuidV4)(uuidRandom),\n            version: 3,\n            crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: (0, bytes_1.hexlify)(iv).substring(2),\n                },\n                ciphertext: (0, bytes_1.hexlify)(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: (0, bytes_1.hexlify)(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            var mnemonicIv = (0, random_1.randomBytes)(16);\n            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            var mnemonicCiphertext = (0, bytes_1.arrayify)(mnemonicAesCtr.encrypt(entropy));\n            var now = new Date();\n            var timestamp = (now.getUTCFullYear() + \"-\" +\n                (0, utils_1.zpad)(now.getUTCMonth() + 1, 2) + \"-\" +\n                (0, utils_1.zpad)(now.getUTCDate(), 2) + \"T\" +\n                (0, utils_1.zpad)(now.getUTCHours(), 2) + \"-\" +\n                (0, utils_1.zpad)(now.getUTCMinutes(), 2) + \"-\" +\n                (0, utils_1.zpad)(now.getUTCSeconds(), 2) + \".0Z\");\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: (0, bytes_1.hexlify)(mnemonicIv).substring(2),\n                mnemonicCiphertext: (0, bytes_1.hexlify)(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n        return JSON.stringify(data);\n    });\n}\nexports.encrypt = encrypt;\n//# sourceMappingURL=keystore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/keystore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/utils.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/utils.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.uuidV4 = exports.searchPath = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nfunction looseArrayify(hexString) {\n    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n    }\n    return (0, bytes_1.arrayify)(hexString);\n}\nexports.looseArrayify = looseArrayify;\nfunction zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nexports.zpad = zpad;\nfunction getPassword(password) {\n    if (typeof (password) === 'string') {\n        return (0, strings_1.toUtf8Bytes)(password, strings_1.UnicodeNormalizationForm.NFKC);\n    }\n    return (0, bytes_1.arrayify)(password);\n}\nexports.getPassword = getPassword;\nfunction searchPath(object, path) {\n    var currentChild = object;\n    var comps = path.toLowerCase().split('/');\n    for (var i = 0; i < comps.length; i++) {\n        // Search for a child object with a case-insensitive matching key\n        var matchingChild = null;\n        for (var key in currentChild) {\n            if (key.toLowerCase() === comps[i]) {\n                matchingChild = currentChild[key];\n                break;\n            }\n        }\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n    return currentChild;\n}\nexports.searchPath = searchPath;\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nfunction uuidV4(randomBytes) {\n    var bytes = (0, bytes_1.arrayify)(randomBytes);\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    var value = (0, bytes_1.hexlify)(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34),\n    ].join(\"-\");\n}\nexports.uuidV4 = uuidV4;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLFlBQVksR0FBRyxxQkFBcUI7QUFDaEcsY0FBYyxtQkFBTyxDQUFDLG9GQUFzQjtBQUM1QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliL3V0aWxzLmpzP2Y2NTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnV1aWRWNCA9IGV4cG9ydHMuc2VhcmNoUGF0aCA9IGV4cG9ydHMuZ2V0UGFzc3dvcmQgPSBleHBvcnRzLnpwYWQgPSBleHBvcnRzLmxvb3NlQXJyYXlpZnkgPSB2b2lkIDA7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiKTtcbnZhciBzdHJpbmdzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiKTtcbmZ1bmN0aW9uIGxvb3NlQXJyYXlpZnkoaGV4U3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiAoaGV4U3RyaW5nKSA9PT0gJ3N0cmluZycgJiYgaGV4U3RyaW5nLnN1YnN0cmluZygwLCAyKSAhPT0gJzB4Jykge1xuICAgICAgICBoZXhTdHJpbmcgPSAnMHgnICsgaGV4U3RyaW5nO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGJ5dGVzXzEuYXJyYXlpZnkpKGhleFN0cmluZyk7XG59XG5leHBvcnRzLmxvb3NlQXJyYXlpZnkgPSBsb29zZUFycmF5aWZ5O1xuZnVuY3Rpb24genBhZCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIHdoaWxlICh2YWx1ZS5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0cy56cGFkID0genBhZDtcbmZ1bmN0aW9uIGdldFBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gICAgaWYgKHR5cGVvZiAocGFzc3dvcmQpID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gKDAsIHN0cmluZ3NfMS50b1V0ZjhCeXRlcykocGFzc3dvcmQsIHN0cmluZ3NfMS5Vbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uTkZLQyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgYnl0ZXNfMS5hcnJheWlmeSkocGFzc3dvcmQpO1xufVxuZXhwb3J0cy5nZXRQYXNzd29yZCA9IGdldFBhc3N3b3JkO1xuZnVuY3Rpb24gc2VhcmNoUGF0aChvYmplY3QsIHBhdGgpIHtcbiAgICB2YXIgY3VycmVudENoaWxkID0gb2JqZWN0O1xuICAgIHZhciBjb21wcyA9IHBhdGgudG9Mb3dlckNhc2UoKS5zcGxpdCgnLycpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gU2VhcmNoIGZvciBhIGNoaWxkIG9iamVjdCB3aXRoIGEgY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaGluZyBrZXlcbiAgICAgICAgdmFyIG1hdGNoaW5nQ2hpbGQgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09IGNvbXBzW2ldKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdDaGlsZCA9IGN1cnJlbnRDaGlsZFtrZXldO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIERpZG4ndCBmaW5kIG9uZS4gOicoXG4gICAgICAgIGlmIChtYXRjaGluZ0NoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgY2hlY2sgdGhpcyBjaGlsZC4uLlxuICAgICAgICBjdXJyZW50Q2hpbGQgPSBtYXRjaGluZ0NoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENoaWxkO1xufVxuZXhwb3J0cy5zZWFyY2hQYXRoID0gc2VhcmNoUGF0aDtcbi8vIFNlZTogaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQxMjIudHh0IChTZWN0aW9uIDQuNClcbmZ1bmN0aW9uIHV1aWRWNChyYW5kb21CeXRlcykge1xuICAgIHZhciBieXRlcyA9ICgwLCBieXRlc18xLmFycmF5aWZ5KShyYW5kb21CeXRlcyk7XG4gICAgLy8gU2VjdGlvbjogNC4xLjM6XG4gICAgLy8gLSB0aW1lX2hpX2FuZF92ZXJzaW9uWzEyOjE2XSA9IDBiMDEwMFxuICAgIGJ5dGVzWzZdID0gKGJ5dGVzWzZdICYgMHgwZikgfCAweDQwO1xuICAgIC8vIFNlY3Rpb24gNC40XG4gICAgLy8gLSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkWzZdID0gMGIwXG4gICAgLy8gLSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkWzddID0gMGIxXG4gICAgYnl0ZXNbOF0gPSAoYnl0ZXNbOF0gJiAweDNmKSB8IDB4ODA7XG4gICAgdmFyIHZhbHVlID0gKDAsIGJ5dGVzXzEuaGV4bGlmeSkoYnl0ZXMpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyLCAxMCksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxMCwgMTQpLFxuICAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMTQsIDE4KSxcbiAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDE4LCAyMiksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyMiwgMzQpLFxuICAgIF0uam9pbihcIi1cIik7XG59XG5leHBvcnRzLnV1aWRWNCA9IHV1aWRWNDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pbkdf2 = void 0;\nvar pbkdf2_1 = __webpack_require__(/*! ./pbkdf2 */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/pbkdf2.js\");\nObject.defineProperty(exports, \"pbkdf2\", ({ enumerable: true, get: function () { return pbkdf2_1.pbkdf2; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Bia2RmMi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGVBQWUsbUJBQU8sQ0FBQyxzR0FBVTtBQUNqQywwQ0FBeUMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUM7QUFDNUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wYmtkZjIvbGliL2luZGV4LmpzPzFmNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBia2RmMiA9IHZvaWQgMDtcbnZhciBwYmtkZjJfMSA9IHJlcXVpcmUoXCIuL3Bia2RmMlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBia2RmMlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGJrZGYyXzEucGJrZGYyOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/pbkdf2.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/pbkdf2.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pbkdf2 = void 0;\nvar crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nfunction bufferify(value) {\n    return Buffer.from((0, bytes_1.arrayify)(value));\n}\nfunction pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n    return (0, bytes_1.hexlify)((0, crypto_1.pbkdf2Sync)(bufferify(password), bufferify(salt), iterations, keylen, hashAlgorithm));\n}\nexports.pbkdf2 = pbkdf2;\n//# sourceMappingURL=pbkdf2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Bia2RmMi9saWIvcGJrZGYyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0IsY0FBYyxtQkFBTyxDQUFDLG9GQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wYmtkZjIvbGliL3Bia2RmMi5qcz9lMTM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYmtkZjIgPSB2b2lkIDA7XG52YXIgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIik7XG5mdW5jdGlvbiBidWZmZXJpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oKDAsIGJ5dGVzXzEuYXJyYXlpZnkpKHZhbHVlKSk7XG59XG5mdW5jdGlvbiBwYmtkZjIocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgaGFzaEFsZ29yaXRobSkge1xuICAgIHJldHVybiAoMCwgYnl0ZXNfMS5oZXhsaWZ5KSgoMCwgY3J5cHRvXzEucGJrZGYyU3luYykoYnVmZmVyaWZ5KHBhc3N3b3JkKSwgYnVmZmVyaWZ5KHNhbHQpLCBpdGVyYXRpb25zLCBrZXlsZW4sIGhhc2hBbGdvcml0aG0pKTtcbn1cbmV4cG9ydHMucGJrZGYyID0gcGJrZGYyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGJrZGYyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/pbkdf2/lib/pbkdf2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"providers/5.7.2\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvX3ZlcnNpb24uanM/MjJkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwicHJvdmlkZXJzLzUuNy4yXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/alchemy-provider.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/alchemy-provider.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlchemyProvider = exports.AlchemyWebSocketProvider = void 0;\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nvar websocket_provider_1 = __webpack_require__(/*! ./websocket-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/websocket-provider.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nvar AlchemyWebSocketProvider = /** @class */ (function (_super) {\n    __extends(AlchemyWebSocketProvider, _super);\n    function AlchemyWebSocketProvider(network, apiKey) {\n        var _this = this;\n        var provider = new AlchemyProvider(network, apiKey);\n        var url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        _this = _super.call(this, url, provider.network) || this;\n        (0, properties_1.defineReadOnly)(_this, \"apiKey\", provider.apiKey);\n        return _this;\n    }\n    AlchemyWebSocketProvider.prototype.isCommunityResource = function () {\n        return (this.apiKey === defaultApiKey);\n    };\n    return AlchemyWebSocketProvider;\n}(websocket_provider_1.WebSocketProvider));\nexports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;\nvar AlchemyProvider = /** @class */ (function (_super) {\n    __extends(AlchemyProvider, _super);\n    function AlchemyProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AlchemyProvider.getWebSocketProvider = function (network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    };\n    AlchemyProvider.getApiKey = function (apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    };\n    AlchemyProvider.getUrl = function (network, apiKey) {\n        var host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: function (attempt, url) {\n                if (apiKey === defaultApiKey) {\n                    (0, formatter_1.showThrottleMessage)();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    };\n    AlchemyProvider.prototype.isCommunityResource = function () {\n        return (this.apiKey === defaultApiKey);\n    };\n    return AlchemyProvider;\n}(url_json_rpc_provider_1.UrlJsonRpcProvider));\nexports.AlchemyProvider = AlchemyProvider;\n//# sourceMappingURL=alchemy-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/alchemy-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ankr-provider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ankr-provider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AnkrProvider = void 0;\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\nvar AnkrProvider = /** @class */ (function (_super) {\n    __extends(AnkrProvider, _super);\n    function AnkrProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AnkrProvider.prototype.isCommunityResource = function () {\n        return (this.apiKey === defaultApiKey);\n    };\n    AnkrProvider.getApiKey = function (apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        return apiKey;\n    };\n    AnkrProvider.getUrl = function (network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        var connection = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: function (attempt, url) {\n                if (apiKey.apiKey === defaultApiKey) {\n                    (0, formatter_1.showThrottleMessage)();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    };\n    return AnkrProvider;\n}(url_json_rpc_provider_1.UrlJsonRpcProvider));\nexports.AnkrProvider = AnkrProvider;\n//# sourceMappingURL=ankr-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvYW5rci1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsa0JBQWtCLG1CQUFPLENBQUMsK0dBQWE7QUFDdkMsOEJBQThCLG1CQUFPLENBQUMsdUlBQXlCO0FBQy9ELGVBQWUsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsNkdBQVk7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvYW5rci1wcm92aWRlci5qcz9jNDc1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQW5rclByb3ZpZGVyID0gdm9pZCAwO1xudmFyIGZvcm1hdHRlcl8xID0gcmVxdWlyZShcIi4vZm9ybWF0dGVyXCIpO1xudmFyIHVybF9qc29uX3JwY19wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vdXJsLWpzb24tcnBjLXByb3ZpZGVyXCIpO1xudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiKTtcbnZhciBfdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vX3ZlcnNpb25cIik7XG52YXIgbG9nZ2VyID0gbmV3IGxvZ2dlcl8xLkxvZ2dlcihfdmVyc2lvbl8xLnZlcnNpb24pO1xudmFyIGRlZmF1bHRBcGlLZXkgPSBcIjlmN2Q5MjliMDE4Y2RmZmIzMzg1MTdlZmEwNmY1ODM1OWU4NmZmMWZmZDM1MGJjODg5NzM4NTIzNjU5ZTc5NzJcIjtcbmZ1bmN0aW9uIGdldEhvc3QobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlIFwiaG9tZXN0ZWFkXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoL1wiO1xuICAgICAgICBjYXNlIFwicm9wc3RlblwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2V0aF9yb3BzdGVuL1wiO1xuICAgICAgICBjYXNlIFwicmlua2VieVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2V0aF9yaW5rZWJ5L1wiO1xuICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoX2dvZXJsaS9cIjtcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vcG9seWdvbi9cIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYXJiaXRydW0vXCI7XG4gICAgfVxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5hbWVcIiwgbmFtZSk7XG59XG52YXIgQW5rclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbmtyUHJvdmlkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5rclByb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFua3JQcm92aWRlci5wcm90b3R5cGUuaXNDb21tdW5pdHlSZXNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmFwaUtleSA9PT0gZGVmYXVsdEFwaUtleSk7XG4gICAgfTtcbiAgICBBbmtyUHJvdmlkZXIuZ2V0QXBpS2V5ID0gZnVuY3Rpb24gKGFwaUtleSkge1xuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0QXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGlLZXk7XG4gICAgfTtcbiAgICBBbmtyUHJvdmlkZXIuZ2V0VXJsID0gZnVuY3Rpb24gKG5ldHdvcmssIGFwaUtleSkge1xuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleSA9IGRlZmF1bHRBcGlLZXk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB7XG4gICAgICAgICAgICBhbGxvd0d6aXA6IHRydWUsXG4gICAgICAgICAgICB1cmw6IChcImh0dHBzOi9cXC9cIiArIGdldEhvc3QobmV0d29yay5uYW1lKSArIGFwaUtleSksXG4gICAgICAgICAgICB0aHJvdHRsZUNhbGxiYWNrOiBmdW5jdGlvbiAoYXR0ZW1wdCwgdXJsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwaUtleS5hcGlLZXkgPT09IGRlZmF1bHRBcGlLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgKDAsIGZvcm1hdHRlcl8xLnNob3dUaHJvdHRsZU1lc3NhZ2UpKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChhcGlLZXkucHJvamVjdFNlY3JldCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnVzZXIgPSBcIlwiO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5wYXNzd29yZCA9IGFwaUtleS5wcm9qZWN0U2VjcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIEFua3JQcm92aWRlcjtcbn0odXJsX2pzb25fcnBjX3Byb3ZpZGVyXzEuVXJsSnNvblJwY1Byb3ZpZGVyKSk7XG5leHBvcnRzLkFua3JQcm92aWRlciA9IEFua3JQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFua3ItcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ankr-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseProvider = exports.Resolver = exports.Event = void 0;\nvar abstract_provider_1 = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib/index.js\");\nvar base64_1 = __webpack_require__(/*! @ethersproject/base64 */ \"(ssr)/./node_modules/@ethersproject/base64/lib/index.js\");\nvar basex_1 = __webpack_require__(/*! @ethersproject/basex */ \"(ssr)/./node_modules/@ethersproject/basex/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar constants_1 = __webpack_require__(/*! @ethersproject/constants */ \"(ssr)/./node_modules/@ethersproject/constants/lib/index.js\");\nvar hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib/index.js\");\nvar networks_1 = __webpack_require__(/*! @ethersproject/networks */ \"(ssr)/./node_modules/@ethersproject/networks/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar sha2_1 = __webpack_require__(/*! @ethersproject/sha2 */ \"(ssr)/./node_modules/@ethersproject/sha2/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib/index.js\");\nvar bech32_1 = __importDefault(__webpack_require__(/*! bech32 */ \"(ssr)/./node_modules/bech32/index.js\"));\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nvar MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if ((0, bytes_1.hexDataLength)(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map(function (topic) {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            var unique_1 = {};\n            topic.forEach(function (topic) {\n                unique_1[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            var sorted = Object.keys(unique_1);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map(function (topic) {\n        if (topic === \"\") {\n            return [];\n        }\n        var comps = topic.split(\"|\").map(function (topic) {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if ((0, bytes_1.hexDataLength)(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (abstract_provider_1.ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nvar Event = /** @class */ (function () {\n    function Event(tag, listener, once) {\n        (0, properties_1.defineReadOnly)(this, \"tag\", tag);\n        (0, properties_1.defineReadOnly)(this, \"listener\", listener);\n        (0, properties_1.defineReadOnly)(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    Object.defineProperty(Event.prototype, \"event\", {\n        get: function () {\n            switch (this.type) {\n                case \"tx\":\n                    return this.hash;\n                case \"filter\":\n                    return this.filter;\n            }\n            return this.tag;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"type\", {\n        get: function () {\n            return this.tag.split(\":\")[0];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"hash\", {\n        get: function () {\n            var comps = this.tag.split(\":\");\n            if (comps[0] !== \"tx\") {\n                return null;\n            }\n            return comps[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Event.prototype, \"filter\", {\n        get: function () {\n            var comps = this.tag.split(\":\");\n            if (comps[0] !== \"filter\") {\n                return null;\n            }\n            var address = comps[1];\n            var topics = deserializeTopics(comps[2]);\n            var filter = {};\n            if (topics.length > 0) {\n                filter.topics = topics;\n            }\n            if (address && address !== \"*\") {\n                filter.address = address;\n            }\n            return filter;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Event.prototype.pollable = function () {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    };\n    return Event;\n}());\nexports.Event = Event;\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nvar coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));\n}\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return (0, strings_1.toUtf8String)(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    var offset = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, start, start + 32)).toNumber();\n    var length = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, offset, offset + 32)).toNumber();\n    return (0, bytes_1.hexDataSlice)(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return \"https://gateway.ipfs.io/ipfs/\" + link;\n}\nfunction numPad(value) {\n    var result = (0, bytes_1.arrayify)(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    var padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    var result = [];\n    var byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (var i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (var i = 0; i < datas.length; i++) {\n        var data = (0, bytes_1.arrayify)(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return (0, bytes_1.hexConcat)(result);\n}\nvar Resolver = /** @class */ (function () {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    function Resolver(provider, address, name, resolvedAddress) {\n        (0, properties_1.defineReadOnly)(this, \"provider\", provider);\n        (0, properties_1.defineReadOnly)(this, \"name\", name);\n        (0, properties_1.defineReadOnly)(this, \"address\", provider.formatter.address(address));\n        (0, properties_1.defineReadOnly)(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    Resolver.prototype.supportsWildcard = function () {\n        var _this = this;\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then(function (result) {\n                return bignumber_1.BigNumber.from(result).eq(1);\n            }).catch(function (error) {\n                if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                _this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    };\n    Resolver.prototype._fetch = function (selector, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, parseBytes, result, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tx = {\n                            to: this.address,\n                            ccipReadEnabled: true,\n                            data: (0, bytes_1.hexConcat)([selector, (0, hash_1.namehash)(this.name), (parameters || \"0x\")])\n                        };\n                        parseBytes = false;\n                        return [4 /*yield*/, this.supportsWildcard()];\n                    case 1:\n                        if (_a.sent()) {\n                            parseBytes = true;\n                            // selector(\"resolve(bytes,bytes)\")\n                            tx.data = (0, bytes_1.hexConcat)([\"0x9061b923\", encodeBytes([(0, hash_1.dnsEncode)(this.name), tx.data])]);\n                        }\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.provider.call(tx)];\n                    case 3:\n                        result = _a.sent();\n                        if (((0, bytes_1.arrayify)(result).length % 32) === 4) {\n                            logger.throwError(\"resolver threw error\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                                transaction: tx, data: result\n                            });\n                        }\n                        if (parseBytes) {\n                            result = _parseBytes(result, 0);\n                        }\n                        return [2 /*return*/, result];\n                    case 4:\n                        error_1 = _a.sent();\n                        if (error_1.code === logger_1.Logger.errors.CALL_EXCEPTION) {\n                            return [2 /*return*/, null];\n                        }\n                        throw error_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Resolver.prototype._fetchBytes = function (selector, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._fetch(selector, parameters)];\n                    case 1:\n                        result = _a.sent();\n                        if (result != null) {\n                            return [2 /*return*/, _parseBytes(result, 0)];\n                        }\n                        return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    Resolver.prototype._getAddress = function (coinType, hexBytes) {\n        var coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(\"unsupported coin type: \" + coinType, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getAddress(\" + coinType + \")\"\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        var bytes = (0, bytes_1.arrayify)(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                var length_1 = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {\n                    return base58Encode((0, bytes_1.concat)([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                var length_2 = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {\n                    return base58Encode((0, bytes_1.concat)([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            var length_3 = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            var version_1 = bytes[0];\n            if (version_1 === 0x00) {\n                if (length_3 !== 20 && length_3 !== 32) {\n                    version_1 = -1;\n                }\n            }\n            else {\n                version_1 = -1;\n            }\n            if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {\n                var words = bech32_1.default.toWords(bytes.slice(2));\n                words.unshift(version_1);\n                return bech32_1.default.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    };\n    Resolver.prototype.getAddress = function (coinType) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, error_2, hexBytes, address;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (coinType == null) {\n                            coinType = 60;\n                        }\n                        if (!(coinType === 60)) return [3 /*break*/, 4];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._fetch(\"0x3b3b57de\")];\n                    case 2:\n                        result = _a.sent();\n                        // No address\n                        if (result === \"0x\" || result === constants_1.HashZero) {\n                            return [2 /*return*/, null];\n                        }\n                        return [2 /*return*/, this.provider.formatter.callAddress(result)];\n                    case 3:\n                        error_2 = _a.sent();\n                        if (error_2.code === logger_1.Logger.errors.CALL_EXCEPTION) {\n                            return [2 /*return*/, null];\n                        }\n                        throw error_2;\n                    case 4: return [4 /*yield*/, this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType))];\n                    case 5:\n                        hexBytes = _a.sent();\n                        // No address\n                        if (hexBytes == null || hexBytes === \"0x\") {\n                            return [2 /*return*/, null];\n                        }\n                        address = this._getAddress(coinType, hexBytes);\n                        if (address == null) {\n                            logger.throwError(\"invalid or unsupported coin data\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"getAddress(\" + coinType + \")\",\n                                coinType: coinType,\n                                data: hexBytes\n                            });\n                        }\n                        return [2 /*return*/, address];\n                }\n            });\n        });\n    };\n    Resolver.prototype.getAvatar = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var linkage, avatar, i, match, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs, error_3;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        linkage = [{ type: \"name\", content: this.name }];\n                        _h.label = 1;\n                    case 1:\n                        _h.trys.push([1, 19, , 20]);\n                        return [4 /*yield*/, this.getText(\"avatar\")];\n                    case 2:\n                        avatar = _h.sent();\n                        if (avatar == null) {\n                            return [2 /*return*/, null];\n                        }\n                        i = 0;\n                        _h.label = 3;\n                    case 3:\n                        if (!(i < matchers.length)) return [3 /*break*/, 18];\n                        match = avatar.match(matchers[i]);\n                        if (match == null) {\n                            return [3 /*break*/, 17];\n                        }\n                        scheme = match[1].toLowerCase();\n                        _a = scheme;\n                        switch (_a) {\n                            case \"https\": return [3 /*break*/, 4];\n                            case \"data\": return [3 /*break*/, 5];\n                            case \"ipfs\": return [3 /*break*/, 6];\n                            case \"erc721\": return [3 /*break*/, 7];\n                            case \"erc1155\": return [3 /*break*/, 7];\n                        }\n                        return [3 /*break*/, 17];\n                    case 4:\n                        linkage.push({ type: \"url\", content: avatar });\n                        return [2 /*return*/, { linkage: linkage, url: avatar }];\n                    case 5:\n                        linkage.push({ type: \"data\", content: avatar });\n                        return [2 /*return*/, { linkage: linkage, url: avatar }];\n                    case 6:\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return [2 /*return*/, { linkage: linkage, url: getIpfsLink(avatar) }];\n                    case 7:\n                        selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n                        _b = this._resolvedAddress;\n                        if (_b) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.getAddress()];\n                    case 8:\n                        _b = (_h.sent());\n                        _h.label = 9;\n                    case 9:\n                        owner = (_b);\n                        comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) {\n                            return [2 /*return*/, null];\n                        }\n                        return [4 /*yield*/, this.provider.formatter.address(comps[0])];\n                    case 10:\n                        addr = _h.sent();\n                        tokenId = (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(comps[1]).toHexString(), 32);\n                        if (!(scheme === \"erc721\")) return [3 /*break*/, 12];\n                        _d = (_c = this.provider.formatter).callAddress;\n                        return [4 /*yield*/, this.provider.call({\n                                to: addr, data: (0, bytes_1.hexConcat)([\"0x6352211e\", tokenId])\n                            })];\n                    case 11:\n                        tokenOwner = _d.apply(_c, [_h.sent()]);\n                        if (owner !== tokenOwner) {\n                            return [2 /*return*/, null];\n                        }\n                        linkage.push({ type: \"owner\", content: tokenOwner });\n                        return [3 /*break*/, 14];\n                    case 12:\n                        if (!(scheme === \"erc1155\")) return [3 /*break*/, 14];\n                        _f = (_e = bignumber_1.BigNumber).from;\n                        return [4 /*yield*/, this.provider.call({\n                                to: addr, data: (0, bytes_1.hexConcat)([\"0x00fdd58e\", (0, bytes_1.hexZeroPad)(owner, 32), tokenId])\n                            })];\n                    case 13:\n                        balance = _f.apply(_e, [_h.sent()]);\n                        if (balance.isZero()) {\n                            return [2 /*return*/, null];\n                        }\n                        linkage.push({ type: \"balance\", content: balance.toString() });\n                        _h.label = 14;\n                    case 14:\n                        tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: (0, bytes_1.hexConcat)([selector, tokenId])\n                        };\n                        _g = _parseString;\n                        return [4 /*yield*/, this.provider.call(tx)];\n                    case 15:\n                        metadataUrl = _g.apply(void 0, [_h.sent(), 0]);\n                        if (metadataUrl == null) {\n                            return [2 /*return*/, null];\n                        }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                        return [4 /*yield*/, (0, web_1.fetchJson)(metadataUrl)];\n                    case 16:\n                        metadata = _h.sent();\n                        if (!metadata) {\n                            return [2 /*return*/, null];\n                        }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                        imageUrl = metadata.image;\n                        if (typeof (imageUrl) !== \"string\") {\n                            return [2 /*return*/, null];\n                        }\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        }\n                        else {\n                            ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) {\n                                return [2 /*return*/, null];\n                            }\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n                        linkage.push({ type: \"url\", content: imageUrl });\n                        return [2 /*return*/, { linkage: linkage, url: imageUrl }];\n                    case 17:\n                        i++;\n                        return [3 /*break*/, 3];\n                    case 18: return [3 /*break*/, 20];\n                    case 19:\n                        error_3 = _h.sent();\n                        return [3 /*break*/, 20];\n                    case 20: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    Resolver.prototype.getContentHash = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var hexBytes, ipfs, length_4, ipns, length_5, swarm, skynet, urlSafe_1, hash;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._fetchBytes(\"0xbc1c58d1\")];\n                    case 1:\n                        hexBytes = _a.sent();\n                        // No contenthash\n                        if (hexBytes == null || hexBytes === \"0x\") {\n                            return [2 /*return*/, null];\n                        }\n                        ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n                        if (ipfs) {\n                            length_4 = parseInt(ipfs[3], 16);\n                            if (ipfs[4].length === length_4 * 2) {\n                                return [2 /*return*/, \"ipfs:/\\/\" + basex_1.Base58.encode(\"0x\" + ipfs[1])];\n                            }\n                        }\n                        ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n                        if (ipns) {\n                            length_5 = parseInt(ipns[3], 16);\n                            if (ipns[4].length === length_5 * 2) {\n                                return [2 /*return*/, \"ipns:/\\/\" + basex_1.Base58.encode(\"0x\" + ipns[1])];\n                            }\n                        }\n                        swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n                        if (swarm) {\n                            if (swarm[1].length === (32 * 2)) {\n                                return [2 /*return*/, \"bzz:/\\/\" + swarm[1]];\n                            }\n                        }\n                        skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n                        if (skynet) {\n                            if (skynet[1].length === (34 * 2)) {\n                                urlSafe_1 = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                                hash = (0, base64_1.encode)(\"0x\" + skynet[1]).replace(/[=+\\/]/g, function (a) { return (urlSafe_1[a]); });\n                                return [2 /*return*/, \"sia:/\\/\" + hash];\n                            }\n                        }\n                        return [2 /*return*/, logger.throwError(\"invalid or unsupported content hash data\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"getContentHash()\",\n                                data: hexBytes\n                            })];\n                }\n            });\n        });\n    };\n    Resolver.prototype.getText = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var keyBytes, hexBytes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        keyBytes = (0, strings_1.toUtf8Bytes)(key);\n                        // The nodehash consumes the first slot, so the string pointer targets\n                        // offset 64, with the length at offset 64 and data starting at offset 96\n                        keyBytes = (0, bytes_1.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n                        // Pad to word-size (32 bytes)\n                        if ((keyBytes.length % 32) !== 0) {\n                            keyBytes = (0, bytes_1.concat)([keyBytes, (0, bytes_1.hexZeroPad)(\"0x\", 32 - (key.length % 32))]);\n                        }\n                        return [4 /*yield*/, this._fetchBytes(\"0x59d1d43c\", (0, bytes_1.hexlify)(keyBytes))];\n                    case 1:\n                        hexBytes = _a.sent();\n                        if (hexBytes == null || hexBytes === \"0x\") {\n                            return [2 /*return*/, null];\n                        }\n                        return [2 /*return*/, (0, strings_1.toUtf8String)(hexBytes)];\n                }\n            });\n        });\n    };\n    return Resolver;\n}());\nexports.Resolver = Resolver;\nvar defaultFormatter = null;\nvar nextPollId = 1;\nvar BaseProvider = /** @class */ (function (_super) {\n    __extends(BaseProvider, _super);\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    function BaseProvider(network) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this) || this;\n        // Events being listened to\n        _this._events = [];\n        _this._emitted = { block: -2 };\n        _this.disableCcipRead = false;\n        _this.formatter = _newTarget.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        (0, properties_1.defineReadOnly)(_this, \"anyNetwork\", (network === \"any\"));\n        if (_this.anyNetwork) {\n            network = _this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            _this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch(function (error) { });\n            // Trigger initial network setting (async)\n            _this._ready().catch(function (error) { });\n        }\n        else {\n            var knownNetwork = (0, properties_1.getStatic)(_newTarget, \"getNetwork\")(network);\n            if (knownNetwork) {\n                (0, properties_1.defineReadOnly)(_this, \"_network\", knownNetwork);\n                _this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        _this._maxInternalBlockNumber = -1024;\n        _this._lastBlockNumber = -2;\n        _this._maxFilterBlockRange = 10;\n        _this._pollingInterval = 4000;\n        _this._fastQueryDate = 0;\n        return _this;\n    }\n    BaseProvider.prototype._ready = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var network, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this._network == null)) return [3 /*break*/, 7];\n                        network = null;\n                        if (!this._networkPromise) return [3 /*break*/, 4];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._networkPromise];\n                    case 2:\n                        network = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_4 = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4:\n                        if (!(network == null)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.detectNetwork()];\n                    case 5:\n                        network = _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // This should never happen; every Provider sub-class should have\n                        // suggested a network by here (or have thrown).\n                        if (!network) {\n                            logger.throwError(\"no network detected\", logger_1.Logger.errors.UNKNOWN_ERROR, {});\n                        }\n                        // Possible this call stacked so do not call defineReadOnly again\n                        if (this._network == null) {\n                            if (this.anyNetwork) {\n                                this._network = network;\n                            }\n                            else {\n                                (0, properties_1.defineReadOnly)(this, \"_network\", network);\n                            }\n                            this.emit(\"network\", network, null);\n                        }\n                        _a.label = 7;\n                    case 7: return [2 /*return*/, this._network];\n                }\n            });\n        });\n    };\n    Object.defineProperty(BaseProvider.prototype, \"ready\", {\n        // This will always return the most recently established network.\n        // For \"any\", this can change (a \"network\" event is emitted before\n        // any change is reflected); otherwise this cannot change\n        get: function () {\n            var _this = this;\n            return (0, web_1.poll)(function () {\n                return _this._ready().then(function (network) {\n                    return network;\n                }, function (error) {\n                    // If the network isn't running yet, we will wait\n                    if (error.code === logger_1.Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                        return undefined;\n                    }\n                    throw error;\n                });\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // @TODO: Remove this and just create a singleton formatter\n    BaseProvider.getFormatter = function () {\n        if (defaultFormatter == null) {\n            defaultFormatter = new formatter_1.Formatter();\n        }\n        return defaultFormatter;\n    };\n    // @TODO: Remove this and just use getNetwork\n    BaseProvider.getNetwork = function (network) {\n        return (0, networks_1.getNetwork)((network == null) ? \"homestead\" : network);\n    };\n    BaseProvider.prototype.ccipReadFetch = function (tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function () {\n            var sender, data, errorMessages, i, url, href, json, result, errorMessage;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.disableCcipRead || urls.length === 0) {\n                            return [2 /*return*/, null];\n                        }\n                        sender = tx.to.toLowerCase();\n                        data = calldata.toLowerCase();\n                        errorMessages = [];\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < urls.length)) return [3 /*break*/, 4];\n                        url = urls[i];\n                        href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                        json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data: data, sender: sender });\n                        return [4 /*yield*/, (0, web_1.fetchJson)({ url: href, errorPassThrough: true }, json, function (value, response) {\n                                value.status = response.statusCode;\n                                return value;\n                            })];\n                    case 2:\n                        result = _a.sent();\n                        if (result.data) {\n                            return [2 /*return*/, result.data];\n                        }\n                        errorMessage = (result.message || \"unknown error\");\n                        // 4xx indicates the result is not present; stop\n                        if (result.status >= 400 && result.status < 500) {\n                            return [2 /*return*/, logger.throwError(\"response not found during CCIP fetch: \" + errorMessage, logger_1.Logger.errors.SERVER_ERROR, { url: url, errorMessage: errorMessage })];\n                        }\n                        // 5xx indicates server issue; try the next url\n                        errorMessages.push(errorMessage);\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, logger.throwError(\"error encountered during CCIP fetch: \" + errorMessages.map(function (m) { return JSON.stringify(m); }).join(\", \"), logger_1.Logger.errors.SERVER_ERROR, {\n                            urls: urls,\n                            errorMessages: errorMessages\n                        })];\n                }\n            });\n        });\n    };\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {\n        return __awaiter(this, void 0, void 0, function () {\n            var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ready()];\n                    case 1:\n                        _a.sent();\n                        if (!(maxAge > 0)) return [3 /*break*/, 7];\n                        _a.label = 2;\n                    case 2:\n                        if (!this._internalBlockNumber) return [3 /*break*/, 7];\n                        internalBlockNumber = this._internalBlockNumber;\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, internalBlockNumber];\n                    case 4:\n                        result = _a.sent();\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return [2 /*return*/, result.blockNumber];\n                        }\n                        // Too old; fetch a new value\n                        return [3 /*break*/, 7];\n                    case 5:\n                        error_5 = _a.sent();\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            return [3 /*break*/, 7];\n                        }\n                        return [3 /*break*/, 6];\n                    case 6: return [3 /*break*/, 2];\n                    case 7:\n                        reqTime = getTime();\n                        checkInternalBlockNumber = (0, properties_1.resolveProperties)({\n                            blockNumber: this.perform(\"getBlockNumber\", {}),\n                            networkError: this.getNetwork().then(function (network) { return (null); }, function (error) { return (error); })\n                        }).then(function (_a) {\n                            var blockNumber = _a.blockNumber, networkError = _a.networkError;\n                            if (networkError) {\n                                // Unremember this bad internal block number\n                                if (_this._internalBlockNumber === checkInternalBlockNumber) {\n                                    _this._internalBlockNumber = null;\n                                }\n                                throw networkError;\n                            }\n                            var respTime = getTime();\n                            blockNumber = bignumber_1.BigNumber.from(blockNumber).toNumber();\n                            if (blockNumber < _this._maxInternalBlockNumber) {\n                                blockNumber = _this._maxInternalBlockNumber;\n                            }\n                            _this._maxInternalBlockNumber = blockNumber;\n                            _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                            return { blockNumber: blockNumber, reqTime: reqTime, respTime: respTime };\n                        });\n                        this._internalBlockNumber = checkInternalBlockNumber;\n                        // Swallow unhandled exceptions; if needed they are handled else where\n                        checkInternalBlockNumber.catch(function (error) {\n                            // Don't null the dead (rejected) fetch, if it has already been updated\n                            if (_this._internalBlockNumber === checkInternalBlockNumber) {\n                                _this._internalBlockNumber = null;\n                            }\n                        });\n                        return [4 /*yield*/, checkInternalBlockNumber];\n                    case 8: return [2 /*return*/, (_a.sent()).blockNumber];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.poll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var pollId, runners, blockNumber, error_6, i;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        pollId = nextPollId++;\n                        runners = [];\n                        blockNumber = null;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];\n                    case 2:\n                        blockNumber = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_6 = _a.sent();\n                        this.emit(\"error\", error_6);\n                        return [2 /*return*/];\n                    case 4:\n                        this._setFastBlockNumber(blockNumber);\n                        // Emit a poll event after we have the latest (fast) block number\n                        this.emit(\"poll\", pollId, blockNumber);\n                        // If the block has not changed, meh.\n                        if (blockNumber === this._lastBlockNumber) {\n                            this.emit(\"didPoll\", pollId);\n                            return [2 /*return*/];\n                        }\n                        // First polling cycle, trigger a \"block\" events\n                        if (this._emitted.block === -2) {\n                            this._emitted.block = blockNumber - 1;\n                        }\n                        if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                            logger.warn(\"network block skew detected; skipping block events (emitted=\" + this._emitted.block + \" blockNumber\" + blockNumber + \")\");\n                            this.emit(\"error\", logger.makeError(\"network block skew detected\", logger_1.Logger.errors.NETWORK_ERROR, {\n                                blockNumber: blockNumber,\n                                event: \"blockSkew\",\n                                previousBlockNumber: this._emitted.block\n                            }));\n                            this.emit(\"block\", blockNumber);\n                        }\n                        else {\n                            // Notify all listener for each block that has passed\n                            for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                                this.emit(\"block\", i);\n                            }\n                        }\n                        // The emitted block was updated, check for obsolete events\n                        if (this._emitted.block !== blockNumber) {\n                            this._emitted.block = blockNumber;\n                            Object.keys(this._emitted).forEach(function (key) {\n                                // The block event does not expire\n                                if (key === \"block\") {\n                                    return;\n                                }\n                                // The block we were at when we emitted this event\n                                var eventBlockNumber = _this._emitted[key];\n                                // We cannot garbage collect pending transactions or blocks here\n                                // They should be garbage collected by the Provider when setting\n                                // \"pending\" events\n                                if (eventBlockNumber === \"pending\") {\n                                    return;\n                                }\n                                // Evict any transaction hashes or block hashes over 12 blocks\n                                // old, since they should not return null anyways\n                                if (blockNumber - eventBlockNumber > 12) {\n                                    delete _this._emitted[key];\n                                }\n                            });\n                        }\n                        // First polling cycle\n                        if (this._lastBlockNumber === -2) {\n                            this._lastBlockNumber = blockNumber - 1;\n                        }\n                        // Find all transaction hashes we are waiting on\n                        this._events.forEach(function (event) {\n                            switch (event.type) {\n                                case \"tx\": {\n                                    var hash_2 = event.hash;\n                                    var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {\n                                        if (!receipt || receipt.blockNumber == null) {\n                                            return null;\n                                        }\n                                        _this._emitted[\"t:\" + hash_2] = receipt.blockNumber;\n                                        _this.emit(hash_2, receipt);\n                                        return null;\n                                    }).catch(function (error) { _this.emit(\"error\", error); });\n                                    runners.push(runner);\n                                    break;\n                                }\n                                case \"filter\": {\n                                    // We only allow a single getLogs to be in-flight at a time\n                                    if (!event._inflight) {\n                                        event._inflight = true;\n                                        // This is the first filter for this event, so we want to\n                                        // restrict events to events that happened no earlier than now\n                                        if (event._lastBlockNumber === -2) {\n                                            event._lastBlockNumber = blockNumber - 1;\n                                        }\n                                        // Filter from the last *known* event; due to load-balancing\n                                        // and some nodes returning updated block numbers before\n                                        // indexing events, a logs result with 0 entries cannot be\n                                        // trusted and we must retry a range which includes it again\n                                        var filter_1 = event.filter;\n                                        filter_1.fromBlock = event._lastBlockNumber + 1;\n                                        filter_1.toBlock = blockNumber;\n                                        // Prevent fitler ranges from growing too wild, since it is quite\n                                        // likely there just haven't been any events to move the lastBlockNumber.\n                                        var minFromBlock = filter_1.toBlock - _this._maxFilterBlockRange;\n                                        if (minFromBlock > filter_1.fromBlock) {\n                                            filter_1.fromBlock = minFromBlock;\n                                        }\n                                        if (filter_1.fromBlock < 0) {\n                                            filter_1.fromBlock = 0;\n                                        }\n                                        var runner = _this.getLogs(filter_1).then(function (logs) {\n                                            // Allow the next getLogs\n                                            event._inflight = false;\n                                            if (logs.length === 0) {\n                                                return;\n                                            }\n                                            logs.forEach(function (log) {\n                                                // Only when we get an event for a given block number\n                                                // can we trust the events are indexed\n                                                if (log.blockNumber > event._lastBlockNumber) {\n                                                    event._lastBlockNumber = log.blockNumber;\n                                                }\n                                                // Make sure we stall requests to fetch blocks and txs\n                                                _this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                                _this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                                _this.emit(filter_1, log);\n                                            });\n                                        }).catch(function (error) {\n                                            _this.emit(\"error\", error);\n                                            // Allow another getLogs (the range was not updated)\n                                            event._inflight = false;\n                                        });\n                                        runners.push(runner);\n                                    }\n                                    break;\n                                }\n                            }\n                        });\n                        this._lastBlockNumber = blockNumber;\n                        // Once all events for this loop have been processed, emit \"didPoll\"\n                        Promise.all(runners).then(function () {\n                            _this.emit(\"didPoll\", pollId);\n                        }).catch(function (error) { _this.emit(\"error\", error); });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Deprecated; do not use this\n    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    };\n    Object.defineProperty(BaseProvider.prototype, \"network\", {\n        get: function () {\n            return this._network;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    BaseProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, logger.throwError(\"provider does not support network detection\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"provider.detectNetwork\"\n                    })];\n            });\n        });\n    };\n    BaseProvider.prototype.getNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var network, currentNetwork, error;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ready()];\n                    case 1:\n                        network = _a.sent();\n                        return [4 /*yield*/, this.detectNetwork()];\n                    case 2:\n                        currentNetwork = _a.sent();\n                        if (!(network.chainId !== currentNetwork.chainId)) return [3 /*break*/, 5];\n                        if (!this.anyNetwork) return [3 /*break*/, 4];\n                        this._network = currentNetwork;\n                        // Reset all internal block number guards and caches\n                        this._lastBlockNumber = -2;\n                        this._fastBlockNumber = null;\n                        this._fastBlockNumberPromise = null;\n                        this._fastQueryDate = 0;\n                        this._emitted.block = -2;\n                        this._maxInternalBlockNumber = -1024;\n                        this._internalBlockNumber = null;\n                        // The \"network\" event MUST happen before this method resolves\n                        // so any events have a chance to unregister, so we stall an\n                        // additional event loop before returning from /this/ call\n                        this.emit(\"network\", currentNetwork, network);\n                        return [4 /*yield*/, stall(0)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, this._network];\n                    case 4:\n                        error = logger.makeError(\"underlying network changed\", logger_1.Logger.errors.NETWORK_ERROR, {\n                            event: \"changed\",\n                            network: network,\n                            detectedNetwork: currentNetwork\n                        });\n                        this.emit(\"error\", error);\n                        throw error;\n                    case 5: return [2 /*return*/, network];\n                }\n            });\n        });\n    };\n    Object.defineProperty(BaseProvider.prototype, \"blockNumber\", {\n        get: function () {\n            var _this = this;\n            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n                _this._setFastBlockNumber(blockNumber);\n            }, function (error) { });\n            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseProvider.prototype, \"polling\", {\n        get: function () {\n            return (this._poller != null);\n        },\n        set: function (value) {\n            var _this = this;\n            if (value && !this._poller) {\n                this._poller = setInterval(function () { _this.poll(); }, this.pollingInterval);\n                if (!this._bootstrapPoll) {\n                    this._bootstrapPoll = setTimeout(function () {\n                        _this.poll();\n                        // We block additional polls until the polling interval\n                        // is done, to prevent overwhelming the poll function\n                        _this._bootstrapPoll = setTimeout(function () {\n                            // If polling was disabled, something may require a poke\n                            // since starting the bootstrap poll and it was disabled\n                            if (!_this._poller) {\n                                _this.poll();\n                            }\n                            // Clear out the bootstrap so we can do another\n                            _this._bootstrapPoll = null;\n                        }, _this.pollingInterval);\n                    }, 0);\n                }\n            }\n            else if (!value && this._poller) {\n                clearInterval(this._poller);\n                this._poller = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseProvider.prototype, \"pollingInterval\", {\n        get: function () {\n            return this._pollingInterval;\n        },\n        set: function (value) {\n            var _this = this;\n            if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n                throw new Error(\"invalid polling interval\");\n            }\n            this._pollingInterval = value;\n            if (this._poller) {\n                clearInterval(this._poller);\n                this._poller = setInterval(function () { _this.poll(); }, this._pollingInterval);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BaseProvider.prototype._getFastBlockNumber = function () {\n        var _this = this;\n        var now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {\n                    _this._fastBlockNumber = blockNumber;\n                }\n                return _this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    };\n    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    };\n    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null)];\n            });\n        });\n    };\n    BaseProvider.prototype._waitForTransaction = function (transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function () {\n            var receipt;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getTransactionReceipt(transactionHash)];\n                    case 1:\n                        receipt = _a.sent();\n                        // Receipt is already good\n                        if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                            return [2 /*return*/, receipt];\n                        }\n                        // Poll until the receipt is good...\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                var cancelFuncs = [];\n                                var done = false;\n                                var alreadyDone = function () {\n                                    if (done) {\n                                        return true;\n                                    }\n                                    done = true;\n                                    cancelFuncs.forEach(function (func) { func(); });\n                                    return false;\n                                };\n                                var minedHandler = function (receipt) {\n                                    if (receipt.confirmations < confirmations) {\n                                        return;\n                                    }\n                                    if (alreadyDone()) {\n                                        return;\n                                    }\n                                    resolve(receipt);\n                                };\n                                _this.on(transactionHash, minedHandler);\n                                cancelFuncs.push(function () { _this.removeListener(transactionHash, minedHandler); });\n                                if (replaceable) {\n                                    var lastBlockNumber_1 = replaceable.startBlock;\n                                    var scannedBlock_1 = null;\n                                    var replaceHandler_1 = function (blockNumber) { return __awaiter(_this, void 0, void 0, function () {\n                                        var _this = this;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    if (done) {\n                                                        return [2 /*return*/];\n                                                    }\n                                                    // Wait 1 second; this is only used in the case of a fault, so\n                                                    // we will trade off a little bit of latency for more consistent\n                                                    // results and fewer JSON-RPC calls\n                                                    return [4 /*yield*/, stall(1000)];\n                                                case 1:\n                                                    // Wait 1 second; this is only used in the case of a fault, so\n                                                    // we will trade off a little bit of latency for more consistent\n                                                    // results and fewer JSON-RPC calls\n                                                    _a.sent();\n                                                    this.getTransactionCount(replaceable.from).then(function (nonce) { return __awaiter(_this, void 0, void 0, function () {\n                                                        var mined, block, ti, tx, receipt_1, reason;\n                                                        return __generator(this, function (_a) {\n                                                            switch (_a.label) {\n                                                                case 0:\n                                                                    if (done) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    if (!(nonce <= replaceable.nonce)) return [3 /*break*/, 1];\n                                                                    lastBlockNumber_1 = blockNumber;\n                                                                    return [3 /*break*/, 9];\n                                                                case 1: return [4 /*yield*/, this.getTransaction(transactionHash)];\n                                                                case 2:\n                                                                    mined = _a.sent();\n                                                                    if (mined && mined.blockNumber != null) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    // First time scanning. We start a little earlier for some\n                                                                    // wiggle room here to handle the eventually consistent nature\n                                                                    // of blockchain (e.g. the getTransactionCount was for a\n                                                                    // different block)\n                                                                    if (scannedBlock_1 == null) {\n                                                                        scannedBlock_1 = lastBlockNumber_1 - 3;\n                                                                        if (scannedBlock_1 < replaceable.startBlock) {\n                                                                            scannedBlock_1 = replaceable.startBlock;\n                                                                        }\n                                                                    }\n                                                                    _a.label = 3;\n                                                                case 3:\n                                                                    if (!(scannedBlock_1 <= blockNumber)) return [3 /*break*/, 9];\n                                                                    if (done) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    return [4 /*yield*/, this.getBlockWithTransactions(scannedBlock_1)];\n                                                                case 4:\n                                                                    block = _a.sent();\n                                                                    ti = 0;\n                                                                    _a.label = 5;\n                                                                case 5:\n                                                                    if (!(ti < block.transactions.length)) return [3 /*break*/, 8];\n                                                                    tx = block.transactions[ti];\n                                                                    // Successfully mined!\n                                                                    if (tx.hash === transactionHash) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) return [3 /*break*/, 7];\n                                                                    if (done) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    return [4 /*yield*/, this.waitForTransaction(tx.hash, confirmations)];\n                                                                case 6:\n                                                                    receipt_1 = _a.sent();\n                                                                    // Already resolved or rejected (prolly a timeout)\n                                                                    if (alreadyDone()) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    reason = \"replaced\";\n                                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                                        reason = \"repriced\";\n                                                                    }\n                                                                    else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                                        reason = \"cancelled\";\n                                                                    }\n                                                                    // Explain why we were replaced\n                                                                    reject(logger.makeError(\"transaction was replaced\", logger_1.Logger.errors.TRANSACTION_REPLACED, {\n                                                                        cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                                        reason: reason,\n                                                                        replacement: this._wrapTransaction(tx),\n                                                                        hash: transactionHash,\n                                                                        receipt: receipt_1\n                                                                    }));\n                                                                    return [2 /*return*/];\n                                                                case 7:\n                                                                    ti++;\n                                                                    return [3 /*break*/, 5];\n                                                                case 8:\n                                                                    scannedBlock_1++;\n                                                                    return [3 /*break*/, 3];\n                                                                case 9:\n                                                                    if (done) {\n                                                                        return [2 /*return*/];\n                                                                    }\n                                                                    this.once(\"block\", replaceHandler_1);\n                                                                    return [2 /*return*/];\n                                                            }\n                                                        });\n                                                    }); }, function (error) {\n                                                        if (done) {\n                                                            return;\n                                                        }\n                                                        _this.once(\"block\", replaceHandler_1);\n                                                    });\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    }); };\n                                    if (done) {\n                                        return;\n                                    }\n                                    _this.once(\"block\", replaceHandler_1);\n                                    cancelFuncs.push(function () {\n                                        _this.removeListener(\"block\", replaceHandler_1);\n                                    });\n                                }\n                                if (typeof (timeout) === \"number\" && timeout > 0) {\n                                    var timer_1 = setTimeout(function () {\n                                        if (alreadyDone()) {\n                                            return;\n                                        }\n                                        reject(logger.makeError(\"timeout exceeded\", logger_1.Logger.errors.TIMEOUT, { timeout: timeout }));\n                                    }, timeout);\n                                    if (timer_1.unref) {\n                                        timer_1.unref();\n                                    }\n                                    cancelFuncs.push(function () { clearTimeout(timer_1); });\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getBlockNumber = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._getInternalBlockNumber(0)];\n            });\n        });\n    };\n    BaseProvider.prototype.getGasPrice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.perform(\"getGasPrice\", {})];\n                    case 2:\n                        result = _a.sent();\n                        try {\n                            return [2 /*return*/, bignumber_1.BigNumber.from(result)];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"getGasPrice\",\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                                address: this._getAddress(addressOrName),\n                                blockTag: this._getBlockTag(blockTag)\n                            })];\n                    case 2:\n                        params = _a.sent();\n                        return [4 /*yield*/, this.perform(\"getBalance\", params)];\n                    case 3:\n                        result = _a.sent();\n                        try {\n                            return [2 /*return*/, bignumber_1.BigNumber.from(result)];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"getBalance\",\n                                    params: params,\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                                address: this._getAddress(addressOrName),\n                                blockTag: this._getBlockTag(blockTag)\n                            })];\n                    case 2:\n                        params = _a.sent();\n                        return [4 /*yield*/, this.perform(\"getTransactionCount\", params)];\n                    case 3:\n                        result = _a.sent();\n                        try {\n                            return [2 /*return*/, bignumber_1.BigNumber.from(result).toNumber()];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"getTransactionCount\",\n                                    params: params,\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                                address: this._getAddress(addressOrName),\n                                blockTag: this._getBlockTag(blockTag)\n                            })];\n                    case 2:\n                        params = _a.sent();\n                        return [4 /*yield*/, this.perform(\"getCode\", params)];\n                    case 3:\n                        result = _a.sent();\n                        try {\n                            return [2 /*return*/, (0, bytes_1.hexlify)(result)];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"getCode\",\n                                    params: params,\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                                address: this._getAddress(addressOrName),\n                                blockTag: this._getBlockTag(blockTag),\n                                position: Promise.resolve(position).then(function (p) { return (0, bytes_1.hexValue)(p); })\n                            })];\n                    case 2:\n                        params = _a.sent();\n                        return [4 /*yield*/, this.perform(\"getStorageAt\", params)];\n                    case 3:\n                        result = _a.sent();\n                        try {\n                            return [2 /*return*/, (0, bytes_1.hexlify)(result)];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"getStorageAt\",\n                                    params: params,\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // This should be called by any subclass wrapping a TransactionResponse\n    BaseProvider.prototype._wrapTransaction = function (tx, hash, startBlock) {\n        var _this = this;\n        if (hash != null && (0, bytes_1.hexDataLength)(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        var result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", logger_1.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = function (confirms, timeout) { return __awaiter(_this, void 0, void 0, function () {\n            var replacement, receipt;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (confirms == null) {\n                            confirms = 1;\n                        }\n                        if (timeout == null) {\n                            timeout = 0;\n                        }\n                        replacement = undefined;\n                        if (confirms !== 0 && startBlock != null) {\n                            replacement = {\n                                data: tx.data,\n                                from: tx.from,\n                                nonce: tx.nonce,\n                                to: tx.to,\n                                value: tx.value,\n                                startBlock: startBlock\n                            };\n                        }\n                        return [4 /*yield*/, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];\n                    case 1:\n                        receipt = _a.sent();\n                        if (receipt == null && confirms === 0) {\n                            return [2 /*return*/, null];\n                        }\n                        // No longer pending, allow the polling loop to garbage collect this\n                        this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                        if (receipt.status === 0) {\n                            logger.throwError(\"transaction failed\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                                transactionHash: tx.hash,\n                                transaction: tx,\n                                receipt: receipt\n                            });\n                        }\n                        return [2 /*return*/, receipt];\n                }\n            });\n        }); };\n        return result;\n    };\n    BaseProvider.prototype.sendTransaction = function (signedTransaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var hexTx, tx, blockNumber, hash, error_7;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, Promise.resolve(signedTransaction).then(function (t) { return (0, bytes_1.hexlify)(t); })];\n                    case 2:\n                        hexTx = _a.sent();\n                        tx = this.formatter.transaction(signedTransaction);\n                        if (tx.confirmations == null) {\n                            tx.confirmations = 0;\n                        }\n                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n                    case 3:\n                        blockNumber = _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 6, , 7]);\n                        return [4 /*yield*/, this.perform(\"sendTransaction\", { signedTransaction: hexTx })];\n                    case 5:\n                        hash = _a.sent();\n                        return [2 /*return*/, this._wrapTransaction(tx, hash, blockNumber)];\n                    case 6:\n                        error_7 = _a.sent();\n                        error_7.transaction = tx;\n                        error_7.transactionHash = tx.hash;\n                        throw error_7;\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._getTransactionRequest = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var values, tx, _a, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, transaction];\n                    case 1:\n                        values = _c.sent();\n                        tx = {};\n                        [\"from\", \"to\"].forEach(function (key) {\n                            if (values[key] == null) {\n                                return;\n                            }\n                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? _this._getAddress(v) : null); });\n                        });\n                        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                            if (values[key] == null) {\n                                return;\n                            }\n                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? bignumber_1.BigNumber.from(v) : null); });\n                        });\n                        [\"type\"].forEach(function (key) {\n                            if (values[key] == null) {\n                                return;\n                            }\n                            tx[key] = Promise.resolve(values[key]).then(function (v) { return ((v != null) ? v : null); });\n                        });\n                        if (values.accessList) {\n                            tx.accessList = this.formatter.accessList(values.accessList);\n                        }\n                        [\"data\"].forEach(function (key) {\n                            if (values[key] == null) {\n                                return;\n                            }\n                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? (0, bytes_1.hexlify)(v) : null); });\n                        });\n                        _b = (_a = this.formatter).transactionRequest;\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)(tx)];\n                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._getFilter = function (filter) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, _a, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, filter];\n                    case 1:\n                        filter = _c.sent();\n                        result = {};\n                        if (filter.address != null) {\n                            result.address = this._getAddress(filter.address);\n                        }\n                        [\"blockHash\", \"topics\"].forEach(function (key) {\n                            if (filter[key] == null) {\n                                return;\n                            }\n                            result[key] = filter[key];\n                        });\n                        [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                            if (filter[key] == null) {\n                                return;\n                            }\n                            result[key] = _this._getBlockTag(filter[key]);\n                        });\n                        _b = (_a = this.formatter).filter;\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)(result)];\n                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._call = function (transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function () {\n            var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx, error_8;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (attempt >= MAX_CCIP_REDIRECTS) {\n                            logger.throwError(\"CCIP read exceeded maximum redirections\", logger_1.Logger.errors.SERVER_ERROR, {\n                                redirects: attempt,\n                                transaction: transaction\n                            });\n                        }\n                        txSender = transaction.to;\n                        return [4 /*yield*/, this.perform(\"call\", { transaction: transaction, blockTag: blockTag })];\n                    case 1:\n                        result = _a.sent();\n                        if (!(attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && ((0, bytes_1.hexDataLength)(result) % 32 === 4))) return [3 /*break*/, 5];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        data = (0, bytes_1.hexDataSlice)(result, 4);\n                        sender = (0, bytes_1.hexDataSlice)(data, 0, 32);\n                        if (!bignumber_1.BigNumber.from(sender).eq(txSender)) {\n                            logger.throwError(\"CCIP Read sender did not match\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction: transaction,\n                                data: result\n                            });\n                        }\n                        urls = [];\n                        urlsOffset = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, 32, 64)).toNumber();\n                        urlsLength = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();\n                        urlsData = (0, bytes_1.hexDataSlice)(data, urlsOffset + 32);\n                        for (u = 0; u < urlsLength; u++) {\n                            url = _parseString(urlsData, u * 32);\n                            if (url == null) {\n                                logger.throwError(\"CCIP Read contained corrupt URL string\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                                    name: \"OffchainLookup\",\n                                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                    transaction: transaction,\n                                    data: result\n                                });\n                            }\n                            urls.push(url);\n                        }\n                        calldata = _parseBytes(data, 64);\n                        // Get the callbackSelector (bytes4)\n                        if (!bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, 100, 128)).isZero()) {\n                            logger.throwError(\"CCIP Read callback selector included junk\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction: transaction,\n                                data: result\n                            });\n                        }\n                        callbackSelector = (0, bytes_1.hexDataSlice)(data, 96, 100);\n                        extraData = _parseBytes(data, 128);\n                        return [4 /*yield*/, this.ccipReadFetch(transaction, calldata, urls)];\n                    case 3:\n                        ccipResult = _a.sent();\n                        if (ccipResult == null) {\n                            logger.throwError(\"CCIP Read disabled or provided no URLs\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction: transaction,\n                                data: result\n                            });\n                        }\n                        tx = {\n                            to: txSender,\n                            data: (0, bytes_1.hexConcat)([callbackSelector, encodeBytes([ccipResult, extraData])])\n                        };\n                        return [2 /*return*/, this._call(tx, blockTag, attempt + 1)];\n                    case 4:\n                        error_8 = _a.sent();\n                        if (error_8.code === logger_1.Logger.errors.SERVER_ERROR) {\n                            throw error_8;\n                        }\n                        return [3 /*break*/, 5];\n                    case 5:\n                        try {\n                            return [2 /*return*/, (0, bytes_1.hexlify)(result)];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"call\",\n                                    params: { transaction: transaction, blockTag: blockTag },\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.call = function (transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resolved;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                                transaction: this._getTransactionRequest(transaction),\n                                blockTag: this._getBlockTag(blockTag),\n                                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n                            })];\n                    case 2:\n                        resolved = _a.sent();\n                        return [2 /*return*/, this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1)];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.estimateGas = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({\n                                transaction: this._getTransactionRequest(transaction)\n                            })];\n                    case 2:\n                        params = _a.sent();\n                        return [4 /*yield*/, this.perform(\"estimateGas\", params)];\n                    case 3:\n                        result = _a.sent();\n                        try {\n                            return [2 /*return*/, bignumber_1.BigNumber.from(result)];\n                        }\n                        catch (error) {\n                            return [2 /*return*/, logger.throwError(\"bad result from backend\", logger_1.Logger.errors.SERVER_ERROR, {\n                                    method: \"estimateGas\",\n                                    params: params,\n                                    result: result,\n                                    error: error\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._getAddress = function (addressOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var address;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addressOrName];\n                    case 1:\n                        addressOrName = _a.sent();\n                        if (typeof (addressOrName) !== \"string\") {\n                            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n                        }\n                        return [4 /*yield*/, this.resolveName(addressOrName)];\n                    case 2:\n                        address = _a.sent();\n                        if (address == null) {\n                            logger.throwError(\"ENS name not configured\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"resolveName(\" + JSON.stringify(addressOrName) + \")\"\n                            });\n                        }\n                        return [2 /*return*/, address];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockNumber, params, _a, error_9;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _b.sent();\n                        return [4 /*yield*/, blockHashOrBlockTag];\n                    case 2:\n                        blockHashOrBlockTag = _b.sent();\n                        blockNumber = -128;\n                        params = {\n                            includeTransactions: !!includeTransactions\n                        };\n                        if (!(0, bytes_1.isHexString)(blockHashOrBlockTag, 32)) return [3 /*break*/, 3];\n                        params.blockHash = blockHashOrBlockTag;\n                        return [3 /*break*/, 6];\n                    case 3:\n                        _b.trys.push([3, 5, , 6]);\n                        _a = params;\n                        return [4 /*yield*/, this._getBlockTag(blockHashOrBlockTag)];\n                    case 4:\n                        _a.blockTag = _b.sent();\n                        if ((0, bytes_1.isHexString)(params.blockTag)) {\n                            blockNumber = parseInt(params.blockTag.substring(2), 16);\n                        }\n                        return [3 /*break*/, 6];\n                    case 5:\n                        error_9 = _b.sent();\n                        logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n                            var block, blockNumber_1, i, tx, confirmations, blockWithTxs;\n                            var _this = this;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, this.perform(\"getBlock\", params)];\n                                    case 1:\n                                        block = _a.sent();\n                                        // Block was not found\n                                        if (block == null) {\n                                            // For blockhashes, if we didn't say it existed, that blockhash may\n                                            // not exist. If we did see it though, perhaps from a log, we know\n                                            // it exists, and this node is just not caught up yet.\n                                            if (params.blockHash != null) {\n                                                if (this._emitted[\"b:\" + params.blockHash] == null) {\n                                                    return [2 /*return*/, null];\n                                                }\n                                            }\n                                            // For block tags, if we are asking for a future block, we return null\n                                            if (params.blockTag != null) {\n                                                if (blockNumber > this._emitted.block) {\n                                                    return [2 /*return*/, null];\n                                                }\n                                            }\n                                            // Retry on the next block\n                                            return [2 /*return*/, undefined];\n                                        }\n                                        if (!includeTransactions) return [3 /*break*/, 8];\n                                        blockNumber_1 = null;\n                                        i = 0;\n                                        _a.label = 2;\n                                    case 2:\n                                        if (!(i < block.transactions.length)) return [3 /*break*/, 7];\n                                        tx = block.transactions[i];\n                                        if (!(tx.blockNumber == null)) return [3 /*break*/, 3];\n                                        tx.confirmations = 0;\n                                        return [3 /*break*/, 6];\n                                    case 3:\n                                        if (!(tx.confirmations == null)) return [3 /*break*/, 6];\n                                        if (!(blockNumber_1 == null)) return [3 /*break*/, 5];\n                                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n                                    case 4:\n                                        blockNumber_1 = _a.sent();\n                                        _a.label = 5;\n                                    case 5:\n                                        confirmations = (blockNumber_1 - tx.blockNumber) + 1;\n                                        if (confirmations <= 0) {\n                                            confirmations = 1;\n                                        }\n                                        tx.confirmations = confirmations;\n                                        _a.label = 6;\n                                    case 6:\n                                        i++;\n                                        return [3 /*break*/, 2];\n                                    case 7:\n                                        blockWithTxs = this.formatter.blockWithTransactions(block);\n                                        blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) { return _this._wrapTransaction(tx); });\n                                        return [2 /*return*/, blockWithTxs];\n                                    case 8: return [2 /*return*/, this.formatter.block(block)];\n                                }\n                            });\n                        }); }, { oncePoll: this })];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    };\n    BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    };\n    BaseProvider.prototype.getTransaction = function (transactionHash) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, transactionHash];\n                    case 2:\n                        transactionHash = _a.sent();\n                        params = { transactionHash: this.formatter.hash(transactionHash, true) };\n                        return [2 /*return*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n                                var result, tx, blockNumber, confirmations;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.perform(\"getTransaction\", params)];\n                                        case 1:\n                                            result = _a.sent();\n                                            if (result == null) {\n                                                if (this._emitted[\"t:\" + transactionHash] == null) {\n                                                    return [2 /*return*/, null];\n                                                }\n                                                return [2 /*return*/, undefined];\n                                            }\n                                            tx = this.formatter.transactionResponse(result);\n                                            if (!(tx.blockNumber == null)) return [3 /*break*/, 2];\n                                            tx.confirmations = 0;\n                                            return [3 /*break*/, 4];\n                                        case 2:\n                                            if (!(tx.confirmations == null)) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n                                        case 3:\n                                            blockNumber = _a.sent();\n                                            confirmations = (blockNumber - tx.blockNumber) + 1;\n                                            if (confirmations <= 0) {\n                                                confirmations = 1;\n                                            }\n                                            tx.confirmations = confirmations;\n                                            _a.label = 4;\n                                        case 4: return [2 /*return*/, this._wrapTransaction(tx)];\n                                    }\n                                });\n                            }); }, { oncePoll: this })];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, transactionHash];\n                    case 2:\n                        transactionHash = _a.sent();\n                        params = { transactionHash: this.formatter.hash(transactionHash, true) };\n                        return [2 /*return*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n                                var result, receipt, blockNumber, confirmations;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.perform(\"getTransactionReceipt\", params)];\n                                        case 1:\n                                            result = _a.sent();\n                                            if (result == null) {\n                                                if (this._emitted[\"t:\" + transactionHash] == null) {\n                                                    return [2 /*return*/, null];\n                                                }\n                                                return [2 /*return*/, undefined];\n                                            }\n                                            // \"geth-etc\" returns receipts before they are ready\n                                            if (result.blockHash == null) {\n                                                return [2 /*return*/, undefined];\n                                            }\n                                            receipt = this.formatter.receipt(result);\n                                            if (!(receipt.blockNumber == null)) return [3 /*break*/, 2];\n                                            receipt.confirmations = 0;\n                                            return [3 /*break*/, 4];\n                                        case 2:\n                                            if (!(receipt.confirmations == null)) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n                                        case 3:\n                                            blockNumber = _a.sent();\n                                            confirmations = (blockNumber - receipt.blockNumber) + 1;\n                                            if (confirmations <= 0) {\n                                                confirmations = 1;\n                                            }\n                                            receipt.confirmations = confirmations;\n                                            _a.label = 4;\n                                        case 4: return [2 /*return*/, receipt];\n                                    }\n                                });\n                            }); }, { oncePoll: this })];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getLogs = function (filter) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, logs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, properties_1.resolveProperties)({ filter: this._getFilter(filter) })];\n                    case 2:\n                        params = _a.sent();\n                        return [4 /*yield*/, this.perform(\"getLogs\", params)];\n                    case 3:\n                        logs = _a.sent();\n                        logs.forEach(function (log) {\n                            if (log.removed == null) {\n                                log.removed = false;\n                            }\n                        });\n                        return [2 /*return*/, formatter_1.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getEtherPrice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, this.perform(\"getEtherPrice\", {})];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._getBlockTag = function (blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockNumber;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, blockTag];\n                    case 1:\n                        blockTag = _a.sent();\n                        if (!(typeof (blockTag) === \"number\" && blockTag < 0)) return [3 /*break*/, 3];\n                        if (blockTag % 1) {\n                            logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                        }\n                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n                    case 2:\n                        blockNumber = _a.sent();\n                        blockNumber += blockTag;\n                        if (blockNumber < 0) {\n                            blockNumber = 0;\n                        }\n                        return [2 /*return*/, this.formatter.blockTag(blockNumber)];\n                    case 3: return [2 /*return*/, this.formatter.blockTag(blockTag)];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getResolver = function (name) {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentName, addr, resolver, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        currentName = name;\n                        _b.label = 1;\n                    case 1:\n                        if (false) {}\n                        if (currentName === \"\" || currentName === \".\") {\n                            return [2 /*return*/, null];\n                        }\n                        // Optimization since the eth node cannot change and does\n                        // not have a wildcard resolver\n                        if (name !== \"eth\" && currentName === \"eth\") {\n                            return [2 /*return*/, null];\n                        }\n                        return [4 /*yield*/, this._getResolver(currentName, \"getResolver\")];\n                    case 2:\n                        addr = _b.sent();\n                        if (!(addr != null)) return [3 /*break*/, 5];\n                        resolver = new Resolver(this, addr, name);\n                        _a = currentName !== name;\n                        if (!_a) return [3 /*break*/, 4];\n                        return [4 /*yield*/, resolver.supportsWildcard()];\n                    case 3:\n                        _a = !(_b.sent());\n                        _b.label = 4;\n                    case 4:\n                        // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                        if (_a) {\n                            return [2 /*return*/, null];\n                        }\n                        return [2 /*return*/, resolver];\n                    case 5:\n                        // Get the parent node\n                        currentName = currentName.split(\".\").slice(1).join(\".\");\n                        return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype._getResolver = function (name, operation) {\n        return __awaiter(this, void 0, void 0, function () {\n            var network, addrData, error_10;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (operation == null) {\n                            operation = \"ENS\";\n                        }\n                        return [4 /*yield*/, this.getNetwork()];\n                    case 1:\n                        network = _a.sent();\n                        // No ENS...\n                        if (!network.ensAddress) {\n                            logger.throwError(\"network does not support ENS\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation, network: network.name });\n                        }\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.call({\n                                to: network.ensAddress,\n                                data: (\"0x0178b8bf\" + (0, hash_1.namehash)(name).substring(2))\n                            })];\n                    case 3:\n                        addrData = _a.sent();\n                        return [2 /*return*/, this.formatter.callAddress(addrData)];\n                    case 4:\n                        error_10 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.resolveName = function (name) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resolver;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, name];\n                    case 1:\n                        name = _a.sent();\n                        // If it is already an address, nothing to resolve\n                        try {\n                            return [2 /*return*/, Promise.resolve(this.formatter.address(name))];\n                        }\n                        catch (error) {\n                            // If is is a hexstring, the address is bad (See #694)\n                            if ((0, bytes_1.isHexString)(name)) {\n                                throw error;\n                            }\n                        }\n                        if (typeof (name) !== \"string\") {\n                            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                        }\n                        return [4 /*yield*/, this.getResolver(name)];\n                    case 2:\n                        resolver = _a.sent();\n                        if (!resolver) {\n                            return [2 /*return*/, null];\n                        }\n                        return [4 /*yield*/, resolver.getAddress()];\n                    case 3: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.lookupAddress = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var node, resolverAddr, name, _a, addr;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, address];\n                    case 1:\n                        address = _b.sent();\n                        address = this.formatter.address(address);\n                        node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                        return [4 /*yield*/, this._getResolver(node, \"lookupAddress\")];\n                    case 2:\n                        resolverAddr = _b.sent();\n                        if (resolverAddr == null) {\n                            return [2 /*return*/, null];\n                        }\n                        _a = _parseString;\n                        return [4 /*yield*/, this.call({\n                                to: resolverAddr,\n                                data: (\"0x691f3431\" + (0, hash_1.namehash)(node).substring(2))\n                            })];\n                    case 3:\n                        name = _a.apply(void 0, [_b.sent(), 0]);\n                        return [4 /*yield*/, this.resolveName(name)];\n                    case 4:\n                        addr = _b.sent();\n                        if (addr != address) {\n                            return [2 /*return*/, null];\n                        }\n                        return [2 /*return*/, name];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.getAvatar = function (nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resolver, address, node, resolverAddress, avatar_1, error_11, name_1, _a, error_12, avatar;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resolver = null;\n                        if (!(0, bytes_1.isHexString)(nameOrAddress)) return [3 /*break*/, 10];\n                        address = this.formatter.address(nameOrAddress);\n                        node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                        return [4 /*yield*/, this._getResolver(node, \"getAvatar\")];\n                    case 1:\n                        resolverAddress = _b.sent();\n                        if (!resolverAddress) {\n                            return [2 /*return*/, null];\n                        }\n                        // Try resolving the avatar against the addr.reverse resolver\n                        resolver = new Resolver(this, resolverAddress, node);\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, resolver.getAvatar()];\n                    case 3:\n                        avatar_1 = _b.sent();\n                        if (avatar_1) {\n                            return [2 /*return*/, avatar_1.url];\n                        }\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_11 = _b.sent();\n                        if (error_11.code !== logger_1.Logger.errors.CALL_EXCEPTION) {\n                            throw error_11;\n                        }\n                        return [3 /*break*/, 5];\n                    case 5:\n                        _b.trys.push([5, 8, , 9]);\n                        _a = _parseString;\n                        return [4 /*yield*/, this.call({\n                                to: resolverAddress,\n                                data: (\"0x691f3431\" + (0, hash_1.namehash)(node).substring(2))\n                            })];\n                    case 6:\n                        name_1 = _a.apply(void 0, [_b.sent(), 0]);\n                        return [4 /*yield*/, this.getResolver(name_1)];\n                    case 7:\n                        resolver = _b.sent();\n                        return [3 /*break*/, 9];\n                    case 8:\n                        error_12 = _b.sent();\n                        if (error_12.code !== logger_1.Logger.errors.CALL_EXCEPTION) {\n                            throw error_12;\n                        }\n                        return [2 /*return*/, null];\n                    case 9: return [3 /*break*/, 12];\n                    case 10: return [4 /*yield*/, this.getResolver(nameOrAddress)];\n                    case 11:\n                        // ENS name; forward lookup with wildcard\n                        resolver = _b.sent();\n                        if (!resolver) {\n                            return [2 /*return*/, null];\n                        }\n                        _b.label = 12;\n                    case 12: return [4 /*yield*/, resolver.getAvatar()];\n                    case 13:\n                        avatar = _b.sent();\n                        if (avatar == null) {\n                            return [2 /*return*/, null];\n                        }\n                        return [2 /*return*/, avatar.url];\n                }\n            });\n        });\n    };\n    BaseProvider.prototype.perform = function (method, params) {\n        return logger.throwError(method + \" not implemented\", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    };\n    BaseProvider.prototype._startEvent = function (event) {\n        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);\n    };\n    BaseProvider.prototype._stopEvent = function (event) {\n        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);\n    };\n    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {\n        var event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    };\n    BaseProvider.prototype.on = function (eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    };\n    BaseProvider.prototype.once = function (eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    };\n    BaseProvider.prototype.emit = function (eventName) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var result = false;\n        var stopped = [];\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(function () {\n                event.listener.apply(_this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach(function (event) { _this._stopEvent(event); });\n        return result;\n    };\n    BaseProvider.prototype.listenerCount = function (eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        var eventTag = getEventTag(eventName);\n        return this._events.filter(function (event) {\n            return (event.tag === eventTag);\n        }).length;\n    };\n    BaseProvider.prototype.listeners = function (eventName) {\n        if (eventName == null) {\n            return this._events.map(function (event) { return event.listener; });\n        }\n        var eventTag = getEventTag(eventName);\n        return this._events\n            .filter(function (event) { return (event.tag === eventTag); })\n            .map(function (event) { return event.listener; });\n    };\n    BaseProvider.prototype.off = function (eventName, listener) {\n        var _this = this;\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        var stopped = [];\n        var found = false;\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach(function (event) { _this._stopEvent(event); });\n        return this;\n    };\n    BaseProvider.prototype.removeAllListeners = function (eventName) {\n        var _this = this;\n        var stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            var eventTag_1 = getEventTag(eventName);\n            this._events = this._events.filter(function (event) {\n                if (event.tag !== eventTag_1) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach(function (event) { _this._stopEvent(event); });\n        return this;\n    };\n    return BaseProvider;\n}(abstract_provider_1.Provider));\nexports.BaseProvider = BaseProvider;\n//# sourceMappingURL=base-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/cloudflare-provider.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/cloudflare-provider.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CloudflareProvider = void 0;\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar CloudflareProvider = /** @class */ (function (_super) {\n    __extends(CloudflareProvider, _super);\n    function CloudflareProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CloudflareProvider.getApiKey = function (apiKey) {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    };\n    CloudflareProvider.getUrl = function (network, apiKey) {\n        var host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host;\n    };\n    CloudflareProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var block;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(method === \"getBlockNumber\")) return [3 /*break*/, 2];\n                        return [4 /*yield*/, _super.prototype.perform.call(this, \"getBlock\", { blockTag: \"latest\" })];\n                    case 1:\n                        block = _a.sent();\n                        return [2 /*return*/, block.number];\n                    case 2: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];\n                }\n            });\n        });\n    };\n    return CloudflareProvider;\n}(url_json_rpc_provider_1.UrlJsonRpcProvider));\nexports.CloudflareProvider = CloudflareProvider;\n//# sourceMappingURL=cloudflare-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/cloudflare-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/etherscan-provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/etherscan-provider.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EtherscanProvider = void 0;\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib/index.js\");\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar base_provider_1 = __webpack_require__(/*! ./base-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js\");\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    var result = {};\n    for (var key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        var value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n            value = (0, bytes_1.hexValue)((0, bytes_1.hexlify)(value));\n        }\n        else if (key === \"accessList\") {\n            value = \"[\" + (0, transactions_1.accessListify)(value).map(function (set) {\n                return \"{address:\\\"\" + set.address + \"\\\",storageKeys:[\\\"\" + set.storageKeys.join('\",\"') + \"\\\"]}\";\n            }).join(\",\") + \"]\";\n        }\n        else {\n            value = (0, bytes_1.hexlify)(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || typeof (result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        var error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        var error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        var error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        var error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === logger_1.Logger.errors.SERVER_ERROR) {\n        var e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            var data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if ((0, bytes_1.isHexString)(data)) {\n                return data;\n            }\n            logger.throwError(\"missing revert data in call exception\", logger_1.Logger.errors.CALL_EXCEPTION, {\n                error: error,\n                data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    var message = error.message;\n    if (error.code === logger_1.Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof (error.error.message) === \"string\") {\n            message = error.error.message;\n        }\n        else if (typeof (error.body) === \"string\") {\n            message = error.body;\n        }\n        else if (typeof (error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", logger_1.Logger.errors.NONCE_EXPIRED, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        logger.throwError(\"replacement fee too low\", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    throw error;\n}\nvar EtherscanProvider = /** @class */ (function (_super) {\n    __extends(EtherscanProvider, _super);\n    function EtherscanProvider(network, apiKey) {\n        var _this = _super.call(this, network) || this;\n        (0, properties_1.defineReadOnly)(_this, \"baseUrl\", _this.getBaseUrl());\n        (0, properties_1.defineReadOnly)(_this, \"apiKey\", apiKey || null);\n        return _this;\n    }\n    EtherscanProvider.prototype.getBaseUrl = function () {\n        switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    };\n    EtherscanProvider.prototype.getUrl = function (module, params) {\n        var query = Object.keys(params).reduce(function (accum, key) {\n            var value = params[key];\n            if (value != null) {\n                accum += \"&\" + key + \"=\" + value;\n            }\n            return accum;\n        }, \"\");\n        var apiKey = ((this.apiKey) ? \"&apikey=\" + this.apiKey : \"\");\n        return this.baseUrl + \"/api?module=\" + module + query + apiKey;\n    };\n    EtherscanProvider.prototype.getPostUrl = function () {\n        return this.baseUrl + \"/api\";\n    };\n    EtherscanProvider.prototype.getPostData = function (module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    };\n    EtherscanProvider.prototype.fetch = function (module, params, post) {\n        return __awaiter(this, void 0, void 0, function () {\n            var url, payload, procFunc, connection, payloadStr, result;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        url = (post ? this.getPostUrl() : this.getUrl(module, params));\n                        payload = (post ? this.getPostData(module, params) : null);\n                        procFunc = (module === \"proxy\") ? getJsonResult : getResult;\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            request: url,\n                            provider: this\n                        });\n                        connection = {\n                            url: url,\n                            throttleSlotInterval: 1000,\n                            throttleCallback: function (attempt, url) {\n                                if (_this.isCommunityResource()) {\n                                    (0, formatter_1.showThrottleMessage)();\n                                }\n                                return Promise.resolve(true);\n                            }\n                        };\n                        payloadStr = null;\n                        if (payload) {\n                            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                            payloadStr = Object.keys(payload).map(function (key) {\n                                return key + \"=\" + payload[key];\n                            }).join(\"&\");\n                        }\n                        return [4 /*yield*/, (0, web_1.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];\n                    case 1:\n                        result = _a.sent();\n                        this.emit(\"debug\", {\n                            action: \"response\",\n                            request: url,\n                            response: (0, properties_1.deepCopy)(result),\n                            provider: this\n                        });\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    EtherscanProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.network];\n            });\n        });\n    };\n    EtherscanProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _a = method;\n                        switch (_a) {\n                            case \"getBlockNumber\": return [3 /*break*/, 1];\n                            case \"getGasPrice\": return [3 /*break*/, 2];\n                            case \"getBalance\": return [3 /*break*/, 3];\n                            case \"getTransactionCount\": return [3 /*break*/, 4];\n                            case \"getCode\": return [3 /*break*/, 5];\n                            case \"getStorageAt\": return [3 /*break*/, 6];\n                            case \"sendTransaction\": return [3 /*break*/, 7];\n                            case \"getBlock\": return [3 /*break*/, 8];\n                            case \"getTransaction\": return [3 /*break*/, 9];\n                            case \"getTransactionReceipt\": return [3 /*break*/, 10];\n                            case \"call\": return [3 /*break*/, 11];\n                            case \"estimateGas\": return [3 /*break*/, 15];\n                            case \"getLogs\": return [3 /*break*/, 19];\n                            case \"getEtherPrice\": return [3 /*break*/, 26];\n                        }\n                        return [3 /*break*/, 28];\n                    case 1: return [2 /*return*/, this.fetch(\"proxy\", { action: \"eth_blockNumber\" })];\n                    case 2: return [2 /*return*/, this.fetch(\"proxy\", { action: \"eth_gasPrice\" })];\n                    case 3: \n                    // Returns base-10 result\n                    return [2 /*return*/, this.fetch(\"account\", {\n                            action: \"balance\",\n                            address: params.address,\n                            tag: params.blockTag\n                        })];\n                    case 4: return [2 /*return*/, this.fetch(\"proxy\", {\n                            action: \"eth_getTransactionCount\",\n                            address: params.address,\n                            tag: params.blockTag\n                        })];\n                    case 5: return [2 /*return*/, this.fetch(\"proxy\", {\n                            action: \"eth_getCode\",\n                            address: params.address,\n                            tag: params.blockTag\n                        })];\n                    case 6: return [2 /*return*/, this.fetch(\"proxy\", {\n                            action: \"eth_getStorageAt\",\n                            address: params.address,\n                            position: params.position,\n                            tag: params.blockTag\n                        })];\n                    case 7: return [2 /*return*/, this.fetch(\"proxy\", {\n                            action: \"eth_sendRawTransaction\",\n                            hex: params.signedTransaction\n                        }, true).catch(function (error) {\n                            return checkError(\"sendTransaction\", error, params.signedTransaction);\n                        })];\n                    case 8:\n                        if (params.blockTag) {\n                            return [2 /*return*/, this.fetch(\"proxy\", {\n                                    action: \"eth_getBlockByNumber\",\n                                    tag: params.blockTag,\n                                    boolean: (params.includeTransactions ? \"true\" : \"false\")\n                                })];\n                        }\n                        throw new Error(\"getBlock by blockHash not implemented\");\n                    case 9: return [2 /*return*/, this.fetch(\"proxy\", {\n                            action: \"eth_getTransactionByHash\",\n                            txhash: params.transactionHash\n                        })];\n                    case 10: return [2 /*return*/, this.fetch(\"proxy\", {\n                            action: \"eth_getTransactionReceipt\",\n                            txhash: params.transactionHash\n                        })];\n                    case 11:\n                        if (params.blockTag !== \"latest\") {\n                            throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                        }\n                        postData = getTransactionPostData(params.transaction);\n                        postData.module = \"proxy\";\n                        postData.action = \"eth_call\";\n                        _c.label = 12;\n                    case 12:\n                        _c.trys.push([12, 14, , 15]);\n                        return [4 /*yield*/, this.fetch(\"proxy\", postData, true)];\n                    case 13: return [2 /*return*/, _c.sent()];\n                    case 14:\n                        error_1 = _c.sent();\n                        return [2 /*return*/, checkError(\"call\", error_1, params.transaction)];\n                    case 15:\n                        postData = getTransactionPostData(params.transaction);\n                        postData.module = \"proxy\";\n                        postData.action = \"eth_estimateGas\";\n                        _c.label = 16;\n                    case 16:\n                        _c.trys.push([16, 18, , 19]);\n                        return [4 /*yield*/, this.fetch(\"proxy\", postData, true)];\n                    case 17: return [2 /*return*/, _c.sent()];\n                    case 18:\n                        error_2 = _c.sent();\n                        return [2 /*return*/, checkError(\"estimateGas\", error_2, params.transaction)];\n                    case 19:\n                        args = { action: \"getLogs\" };\n                        if (params.filter.fromBlock) {\n                            args.fromBlock = checkLogTag(params.filter.fromBlock);\n                        }\n                        if (params.filter.toBlock) {\n                            args.toBlock = checkLogTag(params.filter.toBlock);\n                        }\n                        if (params.filter.address) {\n                            args.address = params.filter.address;\n                        }\n                        // @TODO: We can handle slightly more complicated logs using the logs API\n                        if (params.filter.topics && params.filter.topics.length > 0) {\n                            if (params.filter.topics.length > 1) {\n                                logger.throwError(\"unsupported topic count\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                            }\n                            if (params.filter.topics.length === 1) {\n                                topic0 = params.filter.topics[0];\n                                if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                    logger.throwError(\"unsupported topic format\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                                }\n                                args.topic0 = topic0;\n                            }\n                        }\n                        return [4 /*yield*/, this.fetch(\"logs\", args)];\n                    case 20:\n                        logs = _c.sent();\n                        blocks = {};\n                        i = 0;\n                        _c.label = 21;\n                    case 21:\n                        if (!(i < logs.length)) return [3 /*break*/, 25];\n                        log = logs[i];\n                        if (log.blockHash != null) {\n                            return [3 /*break*/, 24];\n                        }\n                        if (!(blocks[log.blockNumber] == null)) return [3 /*break*/, 23];\n                        return [4 /*yield*/, this.getBlock(log.blockNumber)];\n                    case 22:\n                        block = _c.sent();\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                        _c.label = 23;\n                    case 23:\n                        log.blockHash = blocks[log.blockNumber];\n                        _c.label = 24;\n                    case 24:\n                        i++;\n                        return [3 /*break*/, 21];\n                    case 25: return [2 /*return*/, logs];\n                    case 26:\n                        if (this.network.name !== \"homestead\") {\n                            return [2 /*return*/, 0.0];\n                        }\n                        _b = parseFloat;\n                        return [4 /*yield*/, this.fetch(\"stats\", { action: \"ethprice\" })];\n                    case 27: return [2 /*return*/, _b.apply(void 0, [(_c.sent()).ethusd])];\n                    case 28: return [3 /*break*/, 29];\n                    case 29: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];\n                }\n            });\n        });\n    };\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, result;\n            var _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = {\n                            action: \"txlist\"\n                        };\n                        return [4 /*yield*/, this.resolveName(addressOrName)];\n                    case 1:\n                        params = (_a.address = (_b.sent()),\n                            _a.startblock = ((startBlock == null) ? 0 : startBlock),\n                            _a.endblock = ((endBlock == null) ? 99999999 : endBlock),\n                            _a.sort = \"asc\",\n                            _a);\n                        return [4 /*yield*/, this.fetch(\"account\", params)];\n                    case 2:\n                        result = _b.sent();\n                        return [2 /*return*/, result.map(function (tx) {\n                                [\"contractAddress\", \"to\"].forEach(function (key) {\n                                    if (tx[key] == \"\") {\n                                        delete tx[key];\n                                    }\n                                });\n                                if (tx.creates == null && tx.contractAddress != null) {\n                                    tx.creates = tx.contractAddress;\n                                }\n                                var item = _this.formatter.transactionResponse(tx);\n                                if (tx.timeStamp) {\n                                    item.timestamp = parseInt(tx.timeStamp);\n                                }\n                                return item;\n                            })];\n                }\n            });\n        });\n    };\n    EtherscanProvider.prototype.isCommunityResource = function () {\n        return (this.apiKey == null);\n    };\n    return EtherscanProvider;\n}(base_provider_1.BaseProvider));\nexports.EtherscanProvider = EtherscanProvider;\n//# sourceMappingURL=etherscan-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/etherscan-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/fallback-provider.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/fallback-provider.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FallbackProvider = void 0;\nvar abstract_provider_1 = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar random_1 = __webpack_require__(/*! @ethersproject/random */ \"(ssr)/./node_modules/@ethersproject/random/lib/index.js\");\nvar web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib/index.js\");\nvar base_provider_1 = __webpack_require__(/*! ./base-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js\");\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction now() { return (new Date()).getTime(); }\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n    var result = null;\n    for (var i = 0; i < networks.length; i++) {\n        var network = networks[i];\n        // Null! We do not know our network; bail.\n        if (network == null) {\n            return null;\n        }\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n            }\n        }\n        else {\n            result = network;\n        }\n    }\n    return result;\n}\nfunction median(values, maxDelta) {\n    values = values.slice().sort();\n    var middle = Math.floor(values.length / 2);\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n    // Even length; take the average of the two middle\n    var a = values[middle - 1], b = values[middle];\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n    return (a + b) / 2;\n}\nfunction serialize(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    else if (typeof (value) === \"number\" || typeof (value) === \"boolean\") {\n        return JSON.stringify(value);\n    }\n    else if (typeof (value) === \"string\") {\n        return value;\n    }\n    else if (bignumber_1.BigNumber.isBigNumber(value)) {\n        return value.toString();\n    }\n    else if (Array.isArray(value)) {\n        return JSON.stringify(value.map(function (i) { return serialize(i); }));\n    }\n    else if (typeof (value) === \"object\") {\n        var keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(function (key) {\n            var v = value[key];\n            if (typeof (v) === \"function\") {\n                v = \"[function]\";\n            }\n            else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof (value));\n}\n// Next request ID to use for emitting debug info\nvar nextRid = 1;\n;\nfunction stall(duration) {\n    var cancel = null;\n    var timer = null;\n    var promise = (new Promise(function (resolve) {\n        cancel = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        };\n        timer = setTimeout(cancel, duration);\n    }));\n    var wait = function (func) {\n        promise = promise.then(func);\n        return promise;\n    };\n    function getPromise() {\n        return promise;\n    }\n    return { cancel: cancel, getPromise: getPromise, wait: wait };\n}\nvar ForwardErrors = [\n    logger_1.Logger.errors.CALL_EXCEPTION,\n    logger_1.Logger.errors.INSUFFICIENT_FUNDS,\n    logger_1.Logger.errors.NONCE_EXPIRED,\n    logger_1.Logger.errors.REPLACEMENT_UNDERPRICED,\n    logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\nvar ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n;\nfunction exposeDebugConfig(config, now) {\n    var result = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: function () { return config.provider; } });\n    if (config.start) {\n        result.start = config.start;\n    }\n    if (now) {\n        result.duration = (now - config.start);\n    }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        }\n        else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\nfunction normalizedTally(normalize, quorum) {\n    return function (configs) {\n        // Count the votes for each result\n        var tally = {};\n        configs.forEach(function (c) {\n            var value = normalize(c.result);\n            if (!tally[value]) {\n                tally[value] = { count: 0, result: c.result };\n            }\n            tally[value].count++;\n        });\n        // Check for a quorum on any given result\n        var keys = Object.keys(tally);\n        for (var i = 0; i < keys.length; i++) {\n            var check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n        // No quroum\n        return undefined;\n    };\n}\nfunction getProcessFunc(provider, method, params) {\n    var normalize = serialize;\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function (configs) {\n                var values = configs.map(function (c) { return c.result; });\n                // Get the median block number\n                var blockNumber = median(configs.map(function (c) { return c.result; }), 2);\n                if (blockNumber == null) {\n                    return undefined;\n                }\n                blockNumber = Math.ceil(blockNumber);\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) {\n                    blockNumber++;\n                }\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n                return provider._highestBlockNumber;\n            };\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function (configs) {\n                var values = configs.map(function (c) { return c.result; });\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            };\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function (configs) {\n                return median(configs.map(function (c) { return c.result; }));\n            };\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function (tx) {\n                if (tx == null) {\n                    return null;\n                }\n                tx = (0, properties_1.shallowCopy)(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            };\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    block = (0, properties_1.shallowCopy)(block);\n                    block.transactions = block.transactions.map(function (tx) {\n                        tx = (0, properties_1.shallowCopy)(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            }\n            else {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    return serialize(block);\n                };\n            }\n            break;\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n        var provider;\n        return __generator(this, function (_a) {\n            provider = (config.provider);\n            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n                return [2 /*return*/, provider];\n            }\n            return [2 /*return*/, (0, web_1.poll)(function () {\n                    return new Promise(function (resolve, reject) {\n                        setTimeout(function () {\n                            // We are synced\n                            if (provider.blockNumber >= blockNumber) {\n                                return resolve(provider);\n                            }\n                            // We're done; just quit\n                            if (config.cancelled) {\n                                return resolve(null);\n                            }\n                            // Try again, next block\n                            return resolve(undefined);\n                        }, 0);\n                    });\n                }, { oncePoll: provider })];\n        });\n    });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n    return __awaiter(this, void 0, void 0, function () {\n        var provider, _a, filter;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    provider = config.provider;\n                    _a = method;\n                    switch (_a) {\n                        case \"getBlockNumber\": return [3 /*break*/, 1];\n                        case \"getGasPrice\": return [3 /*break*/, 1];\n                        case \"getEtherPrice\": return [3 /*break*/, 2];\n                        case \"getBalance\": return [3 /*break*/, 3];\n                        case \"getTransactionCount\": return [3 /*break*/, 3];\n                        case \"getCode\": return [3 /*break*/, 3];\n                        case \"getStorageAt\": return [3 /*break*/, 6];\n                        case \"getBlock\": return [3 /*break*/, 9];\n                        case \"call\": return [3 /*break*/, 12];\n                        case \"estimateGas\": return [3 /*break*/, 12];\n                        case \"getTransaction\": return [3 /*break*/, 15];\n                        case \"getTransactionReceipt\": return [3 /*break*/, 15];\n                        case \"getLogs\": return [3 /*break*/, 16];\n                    }\n                    return [3 /*break*/, 19];\n                case 1: return [2 /*return*/, provider[method]()];\n                case 2:\n                    if (provider.getEtherPrice) {\n                        return [2 /*return*/, provider.getEtherPrice()];\n                    }\n                    return [3 /*break*/, 19];\n                case 3:\n                    if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 5];\n                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n                case 4:\n                    provider = _b.sent();\n                    _b.label = 5;\n                case 5: return [2 /*return*/, provider[method](params.address, params.blockTag || \"latest\")];\n                case 6:\n                    if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 8];\n                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n                case 7:\n                    provider = _b.sent();\n                    _b.label = 8;\n                case 8: return [2 /*return*/, provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\")];\n                case 9:\n                    if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 11];\n                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n                case 10:\n                    provider = _b.sent();\n                    _b.label = 11;\n                case 11: return [2 /*return*/, provider[(params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\")](params.blockTag || params.blockHash)];\n                case 12:\n                    if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 14];\n                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n                case 13:\n                    provider = _b.sent();\n                    _b.label = 14;\n                case 14:\n                    if (method === \"call\" && params.blockTag) {\n                        return [2 /*return*/, provider[method](params.transaction, params.blockTag)];\n                    }\n                    return [2 /*return*/, provider[method](params.transaction)];\n                case 15: return [2 /*return*/, provider[method](params.transactionHash)];\n                case 16:\n                    filter = params.filter;\n                    if (!((filter.fromBlock && (0, bytes_1.isHexString)(filter.fromBlock)) || (filter.toBlock && (0, bytes_1.isHexString)(filter.toBlock)))) return [3 /*break*/, 18];\n                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n                case 17:\n                    provider = _b.sent();\n                    _b.label = 18;\n                case 18: return [2 /*return*/, provider.getLogs(filter)];\n                case 19: return [2 /*return*/, logger.throwError(\"unknown method error\", logger_1.Logger.errors.UNKNOWN_ERROR, {\n                        method: method,\n                        params: params\n                    })];\n            }\n        });\n    });\n}\nvar FallbackProvider = /** @class */ (function (_super) {\n    __extends(FallbackProvider, _super);\n    function FallbackProvider(providers, quorum) {\n        var _this = this;\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n        var providerConfigs = providers.map(function (configOrProvider, index) {\n            if (abstract_provider_1.Provider.isProvider(configOrProvider)) {\n                var stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2000 : 750;\n                var priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout: stallTimeout, priority: priority });\n            }\n            var config = (0, properties_1.shallowCopy)(configOrProvider);\n            if (config.priority == null) {\n                config.priority = 1;\n            }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2000 : 750;\n            }\n            if (config.weight == null) {\n                config.weight = 1;\n            }\n            var weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", \"providers[\" + index + \"].weight\", weight);\n            }\n            return Object.freeze(config);\n        });\n        var total = providerConfigs.reduce(function (accum, c) { return (accum + c.weight); }, 0);\n        if (quorum == null) {\n            quorum = total / 2;\n        }\n        else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n        // Are all providers' networks are known\n        var networkOrReady = checkNetworks(providerConfigs.map(function (c) { return (c.provider).network; }));\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise(function (resolve, reject) {\n                setTimeout(function () {\n                    _this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n        _this = _super.call(this, networkOrReady) || this;\n        // Preserve a copy, so we do not get mutated\n        (0, properties_1.defineReadOnly)(_this, \"providerConfigs\", Object.freeze(providerConfigs));\n        (0, properties_1.defineReadOnly)(_this, \"quorum\", quorum);\n        _this._highestBlockNumber = -1;\n        return _this;\n    }\n    FallbackProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var networks;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) { return c.provider.getNetwork(); }))];\n                    case 1:\n                        networks = _a.sent();\n                        return [2 /*return*/, checkNetworks(networks)];\n                }\n            });\n        });\n    };\n    FallbackProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(method === \"sendTransaction\")) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) {\n                                return c.provider.sendTransaction(params.signedTransaction).then(function (result) {\n                                    return result.hash;\n                                }, function (error) {\n                                    return error;\n                                });\n                            }))];\n                    case 1:\n                        results = _a.sent();\n                        // Any success is good enough (other errors are likely \"already seen\" errors\n                        for (i_1 = 0; i_1 < results.length; i_1++) {\n                            result = results[i_1];\n                            if (typeof (result) === \"string\") {\n                                return [2 /*return*/, result];\n                            }\n                        }\n                        // They were all an error; pick the first error\n                        throw results[0];\n                    case 2:\n                        if (!(this._highestBlockNumber === -1 && method !== \"getBlockNumber\")) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.getBlockNumber()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        processFunc = getProcessFunc(this, method, params);\n                        configs = (0, random_1.shuffled)(this.providerConfigs.map(properties_1.shallowCopy));\n                        configs.sort(function (a, b) { return (a.priority - b.priority); });\n                        currentBlockNumber = this._highestBlockNumber;\n                        i = 0;\n                        first = true;\n                        _loop_1 = function () {\n                            var t0, inflightWeight, _loop_2, waiting, results, result, errors;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        t0 = now();\n                                        inflightWeight = configs.filter(function (c) { return (c.runner && ((t0 - c.start) < c.stallTimeout)); })\n                                            .reduce(function (accum, c) { return (accum + c.weight); }, 0);\n                                        _loop_2 = function () {\n                                            var config = configs[i++];\n                                            var rid = nextRid++;\n                                            config.start = now();\n                                            config.staller = stall(config.stallTimeout);\n                                            config.staller.wait(function () { config.staller = null; });\n                                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {\n                                                config.done = true;\n                                                config.result = result;\n                                                if (_this.listenerCount(\"debug\")) {\n                                                    _this.emit(\"debug\", {\n                                                        action: \"request\",\n                                                        rid: rid,\n                                                        backend: exposeDebugConfig(config, now()),\n                                                        request: { method: method, params: (0, properties_1.deepCopy)(params) },\n                                                        provider: _this\n                                                    });\n                                                }\n                                            }, function (error) {\n                                                config.done = true;\n                                                config.error = error;\n                                                if (_this.listenerCount(\"debug\")) {\n                                                    _this.emit(\"debug\", {\n                                                        action: \"request\",\n                                                        rid: rid,\n                                                        backend: exposeDebugConfig(config, now()),\n                                                        request: { method: method, params: (0, properties_1.deepCopy)(params) },\n                                                        provider: _this\n                                                    });\n                                                }\n                                            });\n                                            if (this_1.listenerCount(\"debug\")) {\n                                                this_1.emit(\"debug\", {\n                                                    action: \"request\",\n                                                    rid: rid,\n                                                    backend: exposeDebugConfig(config, null),\n                                                    request: { method: method, params: (0, properties_1.deepCopy)(params) },\n                                                    provider: this_1\n                                                });\n                                            }\n                                            inflightWeight += config.weight;\n                                        };\n                                        // Start running enough to meet quorum\n                                        while (inflightWeight < this_1.quorum && i < configs.length) {\n                                            _loop_2();\n                                        }\n                                        waiting = [];\n                                        configs.forEach(function (c) {\n                                            if (c.done || !c.runner) {\n                                                return;\n                                            }\n                                            waiting.push(c.runner);\n                                            if (c.staller) {\n                                                waiting.push(c.staller.getPromise());\n                                            }\n                                        });\n                                        if (!waiting.length) return [3 /*break*/, 2];\n                                        return [4 /*yield*/, Promise.race(waiting)];\n                                    case 1:\n                                        _b.sent();\n                                        _b.label = 2;\n                                    case 2:\n                                        results = configs.filter(function (c) { return (c.done && c.error == null); });\n                                        if (!(results.length >= this_1.quorum)) return [3 /*break*/, 5];\n                                        result = processFunc(results);\n                                        if (result !== undefined) {\n                                            // Shut down any stallers\n                                            configs.forEach(function (c) {\n                                                if (c.staller) {\n                                                    c.staller.cancel();\n                                                }\n                                                c.cancelled = true;\n                                            });\n                                            return [2 /*return*/, { value: result }];\n                                        }\n                                        if (!!first) return [3 /*break*/, 4];\n                                        return [4 /*yield*/, stall(100).getPromise()];\n                                    case 3:\n                                        _b.sent();\n                                        _b.label = 4;\n                                    case 4:\n                                        first = false;\n                                        _b.label = 5;\n                                    case 5:\n                                        errors = configs.reduce(function (accum, c) {\n                                            if (!c.done || c.error == null) {\n                                                return accum;\n                                            }\n                                            var code = (c.error).code;\n                                            if (ForwardErrors.indexOf(code) >= 0) {\n                                                if (!accum[code]) {\n                                                    accum[code] = { error: c.error, weight: 0 };\n                                                }\n                                                accum[code].weight += c.weight;\n                                            }\n                                            return accum;\n                                        }, ({}));\n                                        Object.keys(errors).forEach(function (errorCode) {\n                                            var tally = errors[errorCode];\n                                            if (tally.weight < _this.quorum) {\n                                                return;\n                                            }\n                                            // Shut down any stallers\n                                            configs.forEach(function (c) {\n                                                if (c.staller) {\n                                                    c.staller.cancel();\n                                                }\n                                                c.cancelled = true;\n                                            });\n                                            var e = (tally.error);\n                                            var props = {};\n                                            ForwardProperties.forEach(function (name) {\n                                                if (e[name] == null) {\n                                                    return;\n                                                }\n                                                props[name] = e[name];\n                                            });\n                                            logger.throwError(e.reason || e.message, errorCode, props);\n                                        });\n                                        // All configs have run to completion; we will never get more data\n                                        if (configs.filter(function (c) { return !c.done; }).length === 0) {\n                                            return [2 /*return*/, \"break\"];\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _a.label = 5;\n                    case 5:\n                        if (false) {}\n                        return [5 /*yield**/, _loop_1()];\n                    case 6:\n                        state_1 = _a.sent();\n                        if (typeof state_1 === \"object\")\n                            return [2 /*return*/, state_1.value];\n                        if (state_1 === \"break\")\n                            return [3 /*break*/, 7];\n                        return [3 /*break*/, 5];\n                    case 7:\n                        // Shut down any stallers; shouldn't be any\n                        configs.forEach(function (c) {\n                            if (c.staller) {\n                                c.staller.cancel();\n                            }\n                            c.cancelled = true;\n                        });\n                        return [2 /*return*/, logger.throwError(\"failed to meet quorum\", logger_1.Logger.errors.SERVER_ERROR, {\n                                method: method,\n                                params: params,\n                                //results: configs.map((c) => c.result),\n                                //errors: configs.map((c) => c.error),\n                                results: configs.map(function (c) { return exposeDebugConfig(c); }),\n                                provider: this\n                            })];\n                }\n            });\n        });\n    };\n    return FallbackProvider;\n}(base_provider_1.BaseProvider));\nexports.FallbackProvider = FallbackProvider;\n//# sourceMappingURL=fallback-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/fallback-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.showThrottleMessage = exports.isCommunityResource = exports.isCommunityResourcable = exports.Formatter = void 0;\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar constants_1 = __webpack_require__(/*! @ethersproject/constants */ \"(ssr)/./node_modules/@ethersproject/constants/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar Formatter = /** @class */ (function () {\n    function Formatter() {\n        this.formats = this.getDefaultFormats();\n    }\n    Formatter.prototype.getDefaultFormats = function () {\n        var _this = this;\n        var formats = ({});\n        var address = this.address.bind(this);\n        var bigNumber = this.bigNumber.bind(this);\n        var blockTag = this.blockTag.bind(this);\n        var data = this.data.bind(this);\n        var hash = this.hash.bind(this);\n        var hex = this.hex.bind(this);\n        var number = this.number.bind(this);\n        var type = this.type.bind(this);\n        var strictData = function (v) { return _this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = (0, properties_1.shallowCopy)(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    };\n    Formatter.prototype.accessList = function (accessList) {\n        return (0, transactions_1.accessListify)(accessList || []);\n    };\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    Formatter.prototype.number = function (number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return bignumber_1.BigNumber.from(number).toNumber();\n    };\n    Formatter.prototype.type = function (number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return bignumber_1.BigNumber.from(number).toNumber();\n    };\n    // Strict! Used on input.\n    Formatter.prototype.bigNumber = function (value) {\n        return bignumber_1.BigNumber.from(value);\n    };\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    Formatter.prototype.boolean = function (value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    };\n    Formatter.prototype.hex = function (value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if ((0, bytes_1.isHexString)(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    };\n    Formatter.prototype.data = function (value, strict) {\n        var result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    };\n    // Requires an address\n    // Strict! Used on input.\n    Formatter.prototype.address = function (value) {\n        return (0, address_1.getAddress)(value);\n    };\n    Formatter.prototype.callAddress = function (value) {\n        if (!(0, bytes_1.isHexString)(value, 32)) {\n            return null;\n        }\n        var address = (0, address_1.getAddress)((0, bytes_1.hexDataSlice)(value, 12));\n        return (address === constants_1.AddressZero) ? null : address;\n    };\n    Formatter.prototype.contractAddress = function (value) {\n        return (0, address_1.getContractAddress)(value);\n    };\n    // Strict! Used on input.\n    Formatter.prototype.blockTag = function (blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || (0, bytes_1.isHexString)(blockTag)) {\n            return (0, bytes_1.hexValue)(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    };\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    Formatter.prototype.hash = function (value, strict) {\n        var result = this.hex(value, strict);\n        if ((0, bytes_1.hexDataLength)(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    };\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    Formatter.prototype.difficulty = function (value) {\n        if (value == null) {\n            return null;\n        }\n        var v = bignumber_1.BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    };\n    Formatter.prototype.uint256 = function (value) {\n        if (!(0, bytes_1.isHexString)(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return (0, bytes_1.hexZeroPad)(value, 32);\n    };\n    Formatter.prototype._block = function (value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        var difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        var result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : bignumber_1.BigNumber.from(difficulty));\n        return result;\n    };\n    Formatter.prototype.block = function (value) {\n        return this._block(value, this.formats.block);\n    };\n    Formatter.prototype.blockWithTransactions = function (value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    };\n    // Strict! Used on input.\n    Formatter.prototype.transactionRequest = function (value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    };\n    Formatter.prototype.transactionResponse = function (transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && bignumber_1.BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        var result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            var chainId = transaction.chainId;\n            if ((0, bytes_1.isHexString)(chainId)) {\n                chainId = bignumber_1.BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            var chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if ((0, bytes_1.isHexString)(chainId)) {\n                chainId = bignumber_1.BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    };\n    Formatter.prototype.transaction = function (value) {\n        return (0, transactions_1.parse)(value);\n    };\n    Formatter.prototype.receiptLog = function (value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    };\n    Formatter.prototype.receipt = function (value) {\n        var result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                var value_1 = bignumber_1.BigNumber.from(result.root).toNumber();\n                if (value_1 === 0 || value_1 === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value_1)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value_1;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    };\n    Formatter.prototype.topics = function (value) {\n        var _this = this;\n        if (Array.isArray(value)) {\n            return value.map(function (v) { return _this.topics(v); });\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    };\n    Formatter.prototype.filter = function (value) {\n        return Formatter.check(this.formats.filter, value);\n    };\n    Formatter.prototype.filterLog = function (value) {\n        return Formatter.check(this.formats.filterLog, value);\n    };\n    Formatter.check = function (format, object) {\n        var result = {};\n        for (var key in format) {\n            try {\n                var value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    };\n    // if value is null-ish, nullValue is returned\n    Formatter.allowNull = function (format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    };\n    // If value is false-ish, replaceValue is returned\n    Formatter.allowFalsish = function (format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    };\n    // Requires an Array satisfying check\n    Formatter.arrayOf = function (format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            var result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    };\n    return Formatter;\n}());\nexports.Formatter = Formatter;\nfunction isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexports.isCommunityResourcable = isCommunityResourcable;\nfunction isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\nexports.isCommunityResource = isCommunityResource;\n// Show the throttle message only once\nvar throttleMessage = false;\nfunction showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\nexports.showThrottleMessage = showThrottleMessage;\n//# sourceMappingURL=formatter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;\nvar abstract_provider_1 = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib/index.js\");\nObject.defineProperty(exports, \"Provider\", ({ enumerable: true, get: function () { return abstract_provider_1.Provider; } }));\nvar networks_1 = __webpack_require__(/*! @ethersproject/networks */ \"(ssr)/./node_modules/@ethersproject/networks/lib/index.js\");\nObject.defineProperty(exports, \"getNetwork\", ({ enumerable: true, get: function () { return networks_1.getNetwork; } }));\nvar base_provider_1 = __webpack_require__(/*! ./base-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js\");\nObject.defineProperty(exports, \"BaseProvider\", ({ enumerable: true, get: function () { return base_provider_1.BaseProvider; } }));\nObject.defineProperty(exports, \"Resolver\", ({ enumerable: true, get: function () { return base_provider_1.Resolver; } }));\nvar alchemy_provider_1 = __webpack_require__(/*! ./alchemy-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/alchemy-provider.js\");\nObject.defineProperty(exports, \"AlchemyProvider\", ({ enumerable: true, get: function () { return alchemy_provider_1.AlchemyProvider; } }));\nObject.defineProperty(exports, \"AlchemyWebSocketProvider\", ({ enumerable: true, get: function () { return alchemy_provider_1.AlchemyWebSocketProvider; } }));\nvar ankr_provider_1 = __webpack_require__(/*! ./ankr-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ankr-provider.js\");\nObject.defineProperty(exports, \"AnkrProvider\", ({ enumerable: true, get: function () { return ankr_provider_1.AnkrProvider; } }));\nvar cloudflare_provider_1 = __webpack_require__(/*! ./cloudflare-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/cloudflare-provider.js\");\nObject.defineProperty(exports, \"CloudflareProvider\", ({ enumerable: true, get: function () { return cloudflare_provider_1.CloudflareProvider; } }));\nvar etherscan_provider_1 = __webpack_require__(/*! ./etherscan-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/etherscan-provider.js\");\nObject.defineProperty(exports, \"EtherscanProvider\", ({ enumerable: true, get: function () { return etherscan_provider_1.EtherscanProvider; } }));\nvar fallback_provider_1 = __webpack_require__(/*! ./fallback-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/fallback-provider.js\");\nObject.defineProperty(exports, \"FallbackProvider\", ({ enumerable: true, get: function () { return fallback_provider_1.FallbackProvider; } }));\nvar ipc_provider_1 = __webpack_require__(/*! ./ipc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ipc-provider.js\");\nObject.defineProperty(exports, \"IpcProvider\", ({ enumerable: true, get: function () { return ipc_provider_1.IpcProvider; } }));\nvar infura_provider_1 = __webpack_require__(/*! ./infura-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/infura-provider.js\");\nObject.defineProperty(exports, \"InfuraProvider\", ({ enumerable: true, get: function () { return infura_provider_1.InfuraProvider; } }));\nObject.defineProperty(exports, \"InfuraWebSocketProvider\", ({ enumerable: true, get: function () { return infura_provider_1.InfuraWebSocketProvider; } }));\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\");\nObject.defineProperty(exports, \"JsonRpcProvider\", ({ enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } }));\nObject.defineProperty(exports, \"JsonRpcSigner\", ({ enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcSigner; } }));\nvar json_rpc_batch_provider_1 = __webpack_require__(/*! ./json-rpc-batch-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js\");\nObject.defineProperty(exports, \"JsonRpcBatchProvider\", ({ enumerable: true, get: function () { return json_rpc_batch_provider_1.JsonRpcBatchProvider; } }));\nvar nodesmith_provider_1 = __webpack_require__(/*! ./nodesmith-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/nodesmith-provider.js\");\nObject.defineProperty(exports, \"NodesmithProvider\", ({ enumerable: true, get: function () { return nodesmith_provider_1.NodesmithProvider; } }));\nvar pocket_provider_1 = __webpack_require__(/*! ./pocket-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/pocket-provider.js\");\nObject.defineProperty(exports, \"PocketProvider\", ({ enumerable: true, get: function () { return pocket_provider_1.PocketProvider; } }));\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\nObject.defineProperty(exports, \"StaticJsonRpcProvider\", ({ enumerable: true, get: function () { return url_json_rpc_provider_1.StaticJsonRpcProvider; } }));\nObject.defineProperty(exports, \"UrlJsonRpcProvider\", ({ enumerable: true, get: function () { return url_json_rpc_provider_1.UrlJsonRpcProvider; } }));\nvar web3_provider_1 = __webpack_require__(/*! ./web3-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/web3-provider.js\");\nObject.defineProperty(exports, \"Web3Provider\", ({ enumerable: true, get: function () { return web3_provider_1.Web3Provider; } }));\nvar websocket_provider_1 = __webpack_require__(/*! ./websocket-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/websocket-provider.js\");\nObject.defineProperty(exports, \"WebSocketProvider\", ({ enumerable: true, get: function () { return websocket_provider_1.WebSocketProvider; } }));\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nObject.defineProperty(exports, \"Formatter\", ({ enumerable: true, get: function () { return formatter_1.Formatter; } }));\nObject.defineProperty(exports, \"isCommunityResourcable\", ({ enumerable: true, get: function () { return formatter_1.isCommunityResourcable; } }));\nObject.defineProperty(exports, \"isCommunityResource\", ({ enumerable: true, get: function () { return formatter_1.isCommunityResource; } }));\nObject.defineProperty(exports, \"showThrottleMessage\", ({ enumerable: true, get: function () { return formatter_1.showThrottleMessage; } }));\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        var match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\":\n                case \"https\":\n                    return new json_rpc_provider_1.JsonRpcProvider(network);\n                case \"ws\":\n                case \"wss\":\n                    return new websocket_provider_1.WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    var n = (0, networks_1.getNetwork)(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", logger_1.Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider: fallback_provider_1.FallbackProvider,\n        AlchemyProvider: alchemy_provider_1.AlchemyProvider,\n        AnkrProvider: ankr_provider_1.AnkrProvider,\n        CloudflareProvider: cloudflare_provider_1.CloudflareProvider,\n        EtherscanProvider: etherscan_provider_1.EtherscanProvider,\n        InfuraProvider: infura_provider_1.InfuraProvider,\n        JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,\n        NodesmithProvider: nodesmith_provider_1.NodesmithProvider,\n        PocketProvider: pocket_provider_1.PocketProvider,\n        Web3Provider: web3_provider_1.Web3Provider,\n        IpcProvider: ipc_provider_1.IpcProvider,\n    }, options);\n}\nexports.getDefaultProvider = getDefaultProvider;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/infura-provider.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/infura-provider.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar websocket_provider_1 = __webpack_require__(/*! ./websocket-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/websocket-provider.js\");\nvar formatter_1 = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/formatter.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\nvar defaultProjectId = \"84842078b09946638c03157f83405213\";\nvar InfuraWebSocketProvider = /** @class */ (function (_super) {\n    __extends(InfuraWebSocketProvider, _super);\n    function InfuraWebSocketProvider(network, apiKey) {\n        var _this = this;\n        var provider = new InfuraProvider(network, apiKey);\n        var connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        _this = _super.call(this, url, network) || this;\n        (0, properties_1.defineReadOnly)(_this, \"apiKey\", provider.projectId);\n        (0, properties_1.defineReadOnly)(_this, \"projectId\", provider.projectId);\n        (0, properties_1.defineReadOnly)(_this, \"projectSecret\", provider.projectSecret);\n        return _this;\n    }\n    InfuraWebSocketProvider.prototype.isCommunityResource = function () {\n        return (this.projectId === defaultProjectId);\n    };\n    return InfuraWebSocketProvider;\n}(websocket_provider_1.WebSocketProvider));\nexports.InfuraWebSocketProvider = InfuraWebSocketProvider;\nvar InfuraProvider = /** @class */ (function (_super) {\n    __extends(InfuraProvider, _super);\n    function InfuraProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfuraProvider.getWebSocketProvider = function (network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    };\n    InfuraProvider.getApiKey = function (apiKey) {\n        var apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    };\n    InfuraProvider.getUrl = function (network, apiKey) {\n        var host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        var connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: function (attempt, url) {\n                if (apiKey.projectId === defaultProjectId) {\n                    (0, formatter_1.showThrottleMessage)();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    };\n    InfuraProvider.prototype.isCommunityResource = function () {\n        return (this.projectId === defaultProjectId);\n    };\n    return InfuraProvider;\n}(url_json_rpc_provider_1.UrlJsonRpcProvider));\nexports.InfuraProvider = InfuraProvider;\n//# sourceMappingURL=infura-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/infura-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ipc-provider.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ipc-provider.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IpcProvider = void 0;\nvar net_1 = __webpack_require__(/*! net */ \"net\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\");\nvar IpcProvider = /** @class */ (function (_super) {\n    __extends(IpcProvider, _super);\n    function IpcProvider(path, network) {\n        var _this = this;\n        if (path == null) {\n            logger.throwError(\"missing path\", logger_1.Logger.errors.MISSING_ARGUMENT, { arg: \"path\" });\n        }\n        _this = _super.call(this, \"ipc://\" + path, network) || this;\n        (0, properties_1.defineReadOnly)(_this, \"path\", path);\n        return _this;\n    }\n    // @TODO: Create a connection to the IPC path and use filters instead of polling for block\n    IpcProvider.prototype.send = function (method, params) {\n        // This method is very simple right now. We create a new socket\n        // connection each time, which may be slower, but the main\n        // advantage we are aiming for now is security. This simplifies\n        // multiplexing requests (since we do not need to multiplex).\n        var _this = this;\n        var payload = JSON.stringify({\n            method: method,\n            params: params,\n            id: 42,\n            jsonrpc: \"2.0\"\n        });\n        return new Promise(function (resolve, reject) {\n            var response = Buffer.alloc(0);\n            var stream = (0, net_1.connect)(_this.path);\n            stream.on(\"data\", function (data) {\n                response = Buffer.concat([response, data]);\n            });\n            stream.on(\"end\", function () {\n                try {\n                    resolve(JSON.parse(response.toString()).result);\n                    // @TODO: Better pull apart the error\n                    stream.destroy();\n                }\n                catch (error) {\n                    reject(error);\n                    stream.destroy();\n                }\n            });\n            stream.on(\"error\", function (error) {\n                reject(error);\n                stream.destroy();\n            });\n            stream.write(payload);\n            stream.end();\n        });\n    };\n    return IpcProvider;\n}(json_rpc_provider_1.JsonRpcProvider));\nexports.IpcProvider = IpcProvider;\n//# sourceMappingURL=ipc-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvaXBjLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsbUJBQW1CLG1CQUFPLENBQUMsOEZBQTJCO0FBQ3RELGVBQWUsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsNkdBQVk7QUFDckM7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQywrSEFBcUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixhQUFhO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvaXBjLXByb3ZpZGVyLmpzPzA4N2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JcGNQcm92aWRlciA9IHZvaWQgMDtcbnZhciBuZXRfMSA9IHJlcXVpcmUoXCJuZXRcIik7XG52YXIgcHJvcGVydGllc18xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIik7XG52YXIgbG9nZ2VyXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCIpO1xudmFyIF92ZXJzaW9uXzEgPSByZXF1aXJlKFwiLi9fdmVyc2lvblwiKTtcbnZhciBsb2dnZXIgPSBuZXcgbG9nZ2VyXzEuTG9nZ2VyKF92ZXJzaW9uXzEudmVyc2lvbik7XG52YXIganNvbl9ycGNfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2pzb24tcnBjLXByb3ZpZGVyXCIpO1xudmFyIElwY1Byb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJcGNQcm92aWRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJcGNQcm92aWRlcihwYXRoLCBuZXR3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChwYXRoID09IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibWlzc2luZyBwYXRoXCIsIGxvZ2dlcl8xLkxvZ2dlci5lcnJvcnMuTUlTU0lOR19BUkdVTUVOVCwgeyBhcmc6IFwicGF0aFwiIH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJpcGM6Ly9cIiArIHBhdGgsIG5ldHdvcmspIHx8IHRoaXM7XG4gICAgICAgICgwLCBwcm9wZXJ0aWVzXzEuZGVmaW5lUmVhZE9ubHkpKF90aGlzLCBcInBhdGhcIiwgcGF0aCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLy8gQFRPRE86IENyZWF0ZSBhIGNvbm5lY3Rpb24gdG8gdGhlIElQQyBwYXRoIGFuZCB1c2UgZmlsdGVycyBpbnN0ZWFkIG9mIHBvbGxpbmcgZm9yIGJsb2NrXG4gICAgSXBjUHJvdmlkZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobWV0aG9kLCBwYXJhbXMpIHtcbiAgICAgICAgLy8gVGhpcyBtZXRob2QgaXMgdmVyeSBzaW1wbGUgcmlnaHQgbm93LiBXZSBjcmVhdGUgYSBuZXcgc29ja2V0XG4gICAgICAgIC8vIGNvbm5lY3Rpb24gZWFjaCB0aW1lLCB3aGljaCBtYXkgYmUgc2xvd2VyLCBidXQgdGhlIG1haW5cbiAgICAgICAgLy8gYWR2YW50YWdlIHdlIGFyZSBhaW1pbmcgZm9yIG5vdyBpcyBzZWN1cml0eS4gVGhpcyBzaW1wbGlmaWVzXG4gICAgICAgIC8vIG11bHRpcGxleGluZyByZXF1ZXN0cyAoc2luY2Ugd2UgZG8gbm90IG5lZWQgdG8gbXVsdGlwbGV4KS5cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgaWQ6IDQyLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgICAgICAgICAgIHZhciBzdHJlYW0gPSAoMCwgbmV0XzEuY29ubmVjdCkoX3RoaXMucGF0aCk7XG4gICAgICAgICAgICBzdHJlYW0ub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBCdWZmZXIuY29uY2F0KFtyZXNwb25zZSwgZGF0YV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdHJlYW0ub24oXCJlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXNwb25zZS50b1N0cmluZygpKS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogQmV0dGVyIHB1bGwgYXBhcnQgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdHJlYW0ud3JpdGUocGF5bG9hZCk7XG4gICAgICAgICAgICBzdHJlYW0uZW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIElwY1Byb3ZpZGVyO1xufShqc29uX3JwY19wcm92aWRlcl8xLkpzb25ScGNQcm92aWRlcikpO1xuZXhwb3J0cy5JcGNQcm92aWRlciA9IElwY1Byb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXBjLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ipc-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonRpcBatchProvider = void 0;\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib/index.js\");\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\");\n// Experimental\nvar JsonRpcBatchProvider = /** @class */ (function (_super) {\n    __extends(JsonRpcBatchProvider, _super);\n    function JsonRpcBatchProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    JsonRpcBatchProvider.prototype.send = function (method, params) {\n        var _this = this;\n        var request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        var inflightRequest = { request: request, resolve: null, reject: null };\n        var promise = new Promise(function (resolve, reject) {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(function () {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                var batch = _this._pendingBatch;\n                _this._pendingBatch = null;\n                _this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                var request = batch.map(function (inflight) { return inflight.request; });\n                _this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: (0, properties_1.deepCopy)(request),\n                    provider: _this\n                });\n                return (0, web_1.fetchJson)(_this.connection, JSON.stringify(request)).then(function (result) {\n                    _this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: _this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach(function (inflightRequest, index) {\n                        var payload = result[index];\n                        if (payload.error) {\n                            var error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, function (error) {\n                    _this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: _this\n                    });\n                    batch.forEach(function (inflightRequest) {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    };\n    return JsonRpcBatchProvider;\n}(json_rpc_provider_1.JsonRpcProvider));\nexports.JsonRpcBatchProvider = JsonRpcBatchProvider;\n//# sourceMappingURL=json-rpc-batch-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvanNvbi1ycGMtYmF0Y2gtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLG1CQUFtQixtQkFBTyxDQUFDLDhGQUEyQjtBQUN0RCxZQUFZLG1CQUFPLENBQUMsZ0ZBQW9CO0FBQ3hDLDBCQUEwQixtQkFBTyxDQUFDLCtIQUFxQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwwQkFBMEI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliL2pzb24tcnBjLWJhdGNoLXByb3ZpZGVyLmpzP2M1NTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Kc29uUnBjQmF0Y2hQcm92aWRlciA9IHZvaWQgMDtcbnZhciBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiKTtcbnZhciB3ZWJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC93ZWJcIik7XG52YXIganNvbl9ycGNfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2pzb24tcnBjLXByb3ZpZGVyXCIpO1xuLy8gRXhwZXJpbWVudGFsXG52YXIgSnNvblJwY0JhdGNoUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEpzb25ScGNCYXRjaFByb3ZpZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEpzb25ScGNCYXRjaFByb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEpzb25ScGNCYXRjaFByb3ZpZGVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgIGlkOiAodGhpcy5fbmV4dElkKyspLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0JhdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdCYXRjaCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmZsaWdodFJlcXVlc3QgPSB7IHJlcXVlc3Q6IHJlcXVlc3QsIHJlc29sdmU6IG51bGwsIHJlamVjdDogbnVsbCB9O1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGluZmxpZ2h0UmVxdWVzdC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIGluZmxpZ2h0UmVxdWVzdC5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wZW5kaW5nQmF0Y2gucHVzaChpbmZsaWdodFJlcXVlc3QpO1xuICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdCYXRjaEFnZ3JlZ2F0b3IpIHtcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIGJhdGNoIGZvciBuZXh0IGV2ZW50IGxvb3AgKyBzaG9ydCBkdXJhdGlvblxuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0JhdGNoQWdncmVnYXRvciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0ZWggY3VycmVudCBiYXRjaCBhbmQgY2xlYXIgaXQsIHNvIG5ldyByZXF1ZXN0c1xuICAgICAgICAgICAgICAgIC8vIGdvIGludG8gdGhlIG5leHQgYmF0Y2hcbiAgICAgICAgICAgICAgICB2YXIgYmF0Y2ggPSBfdGhpcy5fcGVuZGluZ0JhdGNoO1xuICAgICAgICAgICAgICAgIF90aGlzLl9wZW5kaW5nQmF0Y2ggPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLl9wZW5kaW5nQmF0Y2hBZ2dyZWdhdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHJlcXVlc3QgYXMgYW4gYXJyYXkgb2YgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGJhdGNoLm1hcChmdW5jdGlvbiAoaW5mbGlnaHQpIHsgcmV0dXJuIGluZmxpZ2h0LnJlcXVlc3Q7IH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXF1ZXN0QmF0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogKDAsIHByb3BlcnRpZXNfMS5kZWVwQ29weSkocmVxdWVzdCksXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBfdGhpc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgd2ViXzEuZmV0Y2hKc29uKShfdGhpcy5jb25uZWN0aW9uLCBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IF90aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCByZXN1bHQsIGZlZWQgaXQgdG8gdGhlIGNvcnJlY3QgUHJvbWlzZSwgZGVwZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIHdoZXRoZXIgaXQgd2FzIGEgc3VjY2VzcyBvciBlcnJvclxuICAgICAgICAgICAgICAgICAgICBiYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChpbmZsaWdodFJlcXVlc3QsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHJlc3VsdFtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPSBwYXlsb2FkLmVycm9yLmNvZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuZGF0YSA9IHBheWxvYWQuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZsaWdodFJlcXVlc3QucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZmxpZ2h0UmVxdWVzdC5yZXNvbHZlKHBheWxvYWQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogX3RoaXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhdGNoLmZvckVhY2goZnVuY3Rpb24gKGluZmxpZ2h0UmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRSZXF1ZXN0LnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG4gICAgcmV0dXJuIEpzb25ScGNCYXRjaFByb3ZpZGVyO1xufShqc29uX3JwY19wcm92aWRlcl8xLkpzb25ScGNQcm92aWRlcikpO1xuZXhwb3J0cy5Kc29uUnBjQmF0Y2hQcm92aWRlciA9IEpzb25ScGNCYXRjaFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi1ycGMtYmF0Y2gtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonRpcProvider = exports.JsonRpcSigner = void 0;\nvar abstract_signer_1 = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(ssr)/./node_modules/@ethersproject/abstract-signer/lib/index.js\");\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar base_provider_1 = __webpack_require__(/*! ./base-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/base-provider.js\");\nvar errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\n        var data = (0, bytes_1.isHexString)(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return { message: value.message, data: data };\n        }\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (var key in value) {\n            var result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    var transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        var result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", logger_1.Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\",\n            transaction: transaction,\n            error: error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        var result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message,\n                method: method,\n                transaction: transaction,\n                error: error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    var message = error.message;\n    if (error.code === logger_1.Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", logger_1.Logger.errors.NONCE_EXPIRED, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            method: method,\n            transaction: transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        var error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nvar _constructorGuard = {};\nvar JsonRpcSigner = /** @class */ (function (_super) {\n    __extends(JsonRpcSigner, _super);\n    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n        var _this = _super.call(this) || this;\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        (0, properties_1.defineReadOnly)(_this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            (0, properties_1.defineReadOnly)(_this, \"_address\", _this.provider.formatter.address(addressOrIndex));\n            (0, properties_1.defineReadOnly)(_this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            (0, properties_1.defineReadOnly)(_this, \"_index\", addressOrIndex);\n            (0, properties_1.defineReadOnly)(_this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n        return _this;\n    }\n    JsonRpcSigner.prototype.connect = function (provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    };\n    JsonRpcSigner.prototype.connectUnchecked = function () {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    };\n    JsonRpcSigner.prototype.getAddress = function () {\n        var _this = this;\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n            if (accounts.length <= _this._index) {\n                logger.throwError(\"unknown account #\" + _this._index, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return _this.provider.formatter.address(accounts[_this._index]);\n        });\n    };\n    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {\n        var _this = this;\n        transaction = (0, properties_1.shallowCopy)(transaction);\n        var fromAddress = this.getAddress().then(function (address) {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            var estimate = (0, properties_1.shallowCopy)(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {\n                var address;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (to == null) {\n                                return [2 /*return*/, null];\n                            }\n                            return [4 /*yield*/, this.provider.resolveName(to)];\n                        case 1:\n                            address = _a.sent();\n                            if (address == null) {\n                                logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                            }\n                            return [2 /*return*/, address];\n                    }\n                });\n            }); });\n        }\n        return (0, properties_1.resolveProperties)({\n            tx: (0, properties_1.resolveProperties)(transaction),\n            sender: fromAddress\n        }).then(function (_a) {\n            var tx = _a.tx, sender = _a.sender;\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return _this.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n                return hash;\n            }, function (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", logger_1.Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    };\n    JsonRpcSigner.prototype.signTransaction = function (transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    };\n    JsonRpcSigner.prototype.sendTransaction = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockNumber, hash, error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];\n                    case 1:\n                        blockNumber = _a.sent();\n                        return [4 /*yield*/, this.sendUncheckedTransaction(transaction)];\n                    case 2:\n                        hash = _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n                                var tx;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.provider.getTransaction(hash)];\n                                        case 1:\n                                            tx = _a.sent();\n                                            if (tx === null) {\n                                                return [2 /*return*/, undefined];\n                                            }\n                                            return [2 /*return*/, this.provider._wrapTransaction(tx, hash, blockNumber)];\n                                    }\n                                });\n                            }); }, { oncePoll: this.provider })];\n                    case 4: \n                    // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                    // for a response, and we need the actual transaction, so we poll\n                    // for it; it should show up very quickly\n                    return [2 /*return*/, _a.sent()];\n                    case 5:\n                        error_1 = _a.sent();\n                        error_1.transactionHash = hash;\n                        throw error_1;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    JsonRpcSigner.prototype.signMessage = function (message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data, address, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        data = ((typeof (message) === \"string\") ? (0, strings_1.toUtf8Bytes)(message) : message);\n                        return [4 /*yield*/, this.getAddress()];\n                    case 1:\n                        address = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.provider.send(\"personal_sign\", [(0, bytes_1.hexlify)(data), address.toLowerCase()])];\n                    case 3: return [2 /*return*/, _a.sent()];\n                    case 4:\n                        error_2 = _a.sent();\n                        if (typeof (error_2.message) === \"string\" && error_2.message.match(/user denied/i)) {\n                            logger.throwError(\"user rejected signing\", logger_1.Logger.errors.ACTION_REJECTED, {\n                                action: \"signMessage\",\n                                from: address,\n                                messageData: message\n                            });\n                        }\n                        throw error_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    JsonRpcSigner.prototype._legacySignMessage = function (message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data, address, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        data = ((typeof (message) === \"string\") ? (0, strings_1.toUtf8Bytes)(message) : message);\n                        return [4 /*yield*/, this.getAddress()];\n                    case 1:\n                        address = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.provider.send(\"eth_sign\", [address.toLowerCase(), (0, bytes_1.hexlify)(data)])];\n                    case 3: \n                    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                    return [2 /*return*/, _a.sent()];\n                    case 4:\n                        error_3 = _a.sent();\n                        if (typeof (error_3.message) === \"string\" && error_3.message.match(/user denied/i)) {\n                            logger.throwError(\"user rejected signing\", logger_1.Logger.errors.ACTION_REJECTED, {\n                                action: \"_legacySignMessage\",\n                                from: address,\n                                messageData: message\n                            });\n                        }\n                        throw error_3;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var populated, address, error_4;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                            return _this.provider.resolveName(name);\n                        })];\n                    case 1:\n                        populated = _a.sent();\n                        return [4 /*yield*/, this.getAddress()];\n                    case 2:\n                        address = _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this.provider.send(\"eth_signTypedData_v4\", [\n                                address.toLowerCase(),\n                                JSON.stringify(hash_1._TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                            ])];\n                    case 4: return [2 /*return*/, _a.sent()];\n                    case 5:\n                        error_4 = _a.sent();\n                        if (typeof (error_4.message) === \"string\" && error_4.message.match(/user denied/i)) {\n                            logger.throwError(\"user rejected signing\", logger_1.Logger.errors.ACTION_REJECTED, {\n                                action: \"_signTypedData\",\n                                from: address,\n                                messageData: { domain: populated.domain, types: types, value: populated.value }\n                            });\n                        }\n                        throw error_4;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    JsonRpcSigner.prototype.unlock = function (password) {\n        return __awaiter(this, void 0, void 0, function () {\n            var provider, address;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        provider = this.provider;\n                        return [4 /*yield*/, this.getAddress()];\n                    case 1:\n                        address = _a.sent();\n                        return [2 /*return*/, provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null])];\n                }\n            });\n        });\n    };\n    return JsonRpcSigner;\n}(abstract_signer_1.Signer));\nexports.JsonRpcSigner = JsonRpcSigner;\nvar UncheckedJsonRpcSigner = /** @class */ (function (_super) {\n    __extends(UncheckedJsonRpcSigner, _super);\n    function UncheckedJsonRpcSigner() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {\n        var _this = this;\n        return this.sendUncheckedTransaction(transaction).then(function (hash) {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: function (confirmations) { return _this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    };\n    return UncheckedJsonRpcSigner;\n}(JsonRpcSigner));\nvar allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nvar JsonRpcProvider = /** @class */ (function (_super) {\n    __extends(JsonRpcProvider, _super);\n    function JsonRpcProvider(url, network) {\n        var _this = this;\n        var networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise(function (resolve, reject) {\n                setTimeout(function () {\n                    _this.detectNetwork().then(function (network) {\n                        resolve(network);\n                    }, function (error) {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        _this = _super.call(this, networkOrReady) || this;\n        // Default URL\n        if (!url) {\n            url = (0, properties_1.getStatic)(_this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            (0, properties_1.defineReadOnly)(_this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            (0, properties_1.defineReadOnly)(_this, \"connection\", Object.freeze((0, properties_1.shallowCopy)(url)));\n        }\n        _this._nextId = 42;\n        return _this;\n    }\n    Object.defineProperty(JsonRpcProvider.prototype, \"_cache\", {\n        get: function () {\n            if (this._eventLoopCache == null) {\n                this._eventLoopCache = {};\n            }\n            return this._eventLoopCache;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    JsonRpcProvider.defaultUrl = function () {\n        return \"http:/\\/localhost:8545\";\n    };\n    JsonRpcProvider.prototype.detectNetwork = function () {\n        var _this = this;\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(function () {\n                _this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    };\n    JsonRpcProvider.prototype._uncachedDetectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var chainId, error_5, error_6, getNetwork;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, timer(0)];\n                    case 1:\n                        _a.sent();\n                        chainId = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 9]);\n                        return [4 /*yield*/, this.send(\"eth_chainId\", [])];\n                    case 3:\n                        chainId = _a.sent();\n                        return [3 /*break*/, 9];\n                    case 4:\n                        error_5 = _a.sent();\n                        _a.label = 5;\n                    case 5:\n                        _a.trys.push([5, 7, , 8]);\n                        return [4 /*yield*/, this.send(\"net_version\", [])];\n                    case 6:\n                        chainId = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        error_6 = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 8: return [3 /*break*/, 9];\n                    case 9:\n                        if (chainId != null) {\n                            getNetwork = (0, properties_1.getStatic)(this.constructor, \"getNetwork\");\n                            try {\n                                return [2 /*return*/, getNetwork(bignumber_1.BigNumber.from(chainId).toNumber())];\n                            }\n                            catch (error) {\n                                return [2 /*return*/, logger.throwError(\"could not detect network\", logger_1.Logger.errors.NETWORK_ERROR, {\n                                        chainId: chainId,\n                                        event: \"invalidNetwork\",\n                                        serverError: error\n                                    })];\n                            }\n                        }\n                        return [2 /*return*/, logger.throwError(\"could not detect network\", logger_1.Logger.errors.NETWORK_ERROR, {\n                                event: \"noNetwork\"\n                            })];\n                }\n            });\n        });\n    };\n    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    };\n    JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    };\n    JsonRpcProvider.prototype.listAccounts = function () {\n        var _this = this;\n        return this.send(\"eth_accounts\", []).then(function (accounts) {\n            return accounts.map(function (a) { return _this.formatter.address(a); });\n        });\n    };\n    JsonRpcProvider.prototype.send = function (method, params) {\n        var _this = this;\n        var request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: (0, properties_1.deepCopy)(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        var cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        var result = (0, web_1.fetchJson)(this.connection, JSON.stringify(request), getResult).then(function (result) {\n            _this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: _this\n            });\n            return result;\n        }, function (error) {\n            _this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: _this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(function () {\n                _this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    };\n    JsonRpcProvider.prototype.prepareRequest = function (method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), (0, bytes_1.hexZeroPad)(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    };\n    JsonRpcProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, feeData, args, error_7;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(method === \"call\" || method === \"estimateGas\")) return [3 /*break*/, 2];\n                        tx = params.transaction;\n                        if (!(tx && tx.type != null && bignumber_1.BigNumber.from(tx.type).isZero())) return [3 /*break*/, 2];\n                        if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.getFeeData()];\n                    case 1:\n                        feeData = _a.sent();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = (0, properties_1.shallowCopy)(params);\n                            params.transaction = (0, properties_1.shallowCopy)(tx);\n                            delete params.transaction.type;\n                        }\n                        _a.label = 2;\n                    case 2:\n                        args = this.prepareRequest(method, params);\n                        if (args == null) {\n                            logger.throwError(method + \" not implemented\", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method });\n                        }\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this.send(args[0], args[1])];\n                    case 4: return [2 /*return*/, _a.sent()];\n                    case 5:\n                        error_7 = _a.sent();\n                        return [2 /*return*/, checkError(method, error_7, params)];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    JsonRpcProvider.prototype._startEvent = function (event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        _super.prototype._startEvent.call(this, event);\n    };\n    JsonRpcProvider.prototype._startPending = function () {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        var self = this;\n        var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    var seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch(function (error) { });\n            }\n            poll();\n            return filterId;\n        }).catch(function (error) { });\n    };\n    JsonRpcProvider.prototype._stopEvent = function (event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        _super.prototype._stopEvent.call(this, event);\n    };\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {\n        // Check only allowed properties are given\n        var allowed = (0, properties_1.shallowCopy)(allowedTransactionKeys);\n        if (allowExtra) {\n            for (var key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        (0, properties_1.checkProperties)(transaction, allowed);\n        var result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            var value = (0, bytes_1.hexValue)(bignumber_1.BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = (0, bytes_1.hexlify)(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = (0, transactions_1.accessListify)(transaction.accessList);\n        }\n        return result;\n    };\n    return JsonRpcProvider;\n}(base_provider_1.BaseProvider));\nexports.JsonRpcProvider = JsonRpcProvider;\n//# sourceMappingURL=json-rpc-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/nodesmith-provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/nodesmith-provider.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* istanbul ignore file */\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NodesmithProvider = void 0;\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\n// Special API key provided by Nodesmith for ethers.js\nvar defaultApiKey = \"ETHERS_JS_SHARED\";\nvar NodesmithProvider = /** @class */ (function (_super) {\n    __extends(NodesmithProvider, _super);\n    function NodesmithProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NodesmithProvider.getApiKey = function (apiKey) {\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    };\n    NodesmithProvider.getUrl = function (network, apiKey) {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n        var host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return (host + \"?apiKey=\" + apiKey);\n    };\n    return NodesmithProvider;\n}(url_json_rpc_provider_1.UrlJsonRpcProvider));\nexports.NodesmithProvider = NodesmithProvider;\n//# sourceMappingURL=nodesmith-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvbm9kZXNtaXRoLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ2E7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLDhCQUE4QixtQkFBTyxDQUFDLHVJQUF5QjtBQUMvRCxlQUFlLG1CQUFPLENBQUMsc0ZBQXVCO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLDZHQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvbm9kZXNtaXRoLXByb3ZpZGVyLmpzPzY3M2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTm9kZXNtaXRoUHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgdXJsX2pzb25fcnBjX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi91cmwtanNvbi1ycGMtcHJvdmlkZXJcIik7XG52YXIgbG9nZ2VyXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCIpO1xudmFyIF92ZXJzaW9uXzEgPSByZXF1aXJlKFwiLi9fdmVyc2lvblwiKTtcbnZhciBsb2dnZXIgPSBuZXcgbG9nZ2VyXzEuTG9nZ2VyKF92ZXJzaW9uXzEudmVyc2lvbik7XG4vLyBTcGVjaWFsIEFQSSBrZXkgcHJvdmlkZWQgYnkgTm9kZXNtaXRoIGZvciBldGhlcnMuanNcbnZhciBkZWZhdWx0QXBpS2V5ID0gXCJFVEhFUlNfSlNfU0hBUkVEXCI7XG52YXIgTm9kZXNtaXRoUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE5vZGVzbWl0aFByb3ZpZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE5vZGVzbWl0aFByb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE5vZGVzbWl0aFByb3ZpZGVyLmdldEFwaUtleSA9IGZ1bmN0aW9uIChhcGlLZXkpIHtcbiAgICAgICAgaWYgKGFwaUtleSAmJiB0eXBlb2YgKGFwaUtleSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFwaUtleVwiLCBcImFwaUtleVwiLCBhcGlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGlLZXkgfHwgZGVmYXVsdEFwaUtleTtcbiAgICB9O1xuICAgIE5vZGVzbWl0aFByb3ZpZGVyLmdldFVybCA9IGZ1bmN0aW9uIChuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJOb2RlU21pdGggd2lsbCBiZSBkaXNjb250aW51ZWQgb24gMjAxOS0xMi0yMDsgcGxlYXNlIG1pZ3JhdGUgdG8gYW5vdGhlciBwbGF0Zm9ybS5cIik7XG4gICAgICAgIHZhciBob3N0ID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChuZXR3b3JrLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJodHRwczovL2V0aGVyZXVtLmFwaS5ub2Rlc21pdGguaW8vdjEvbWFpbm5ldC9qc29ucnBjXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicm9wc3RlblwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9yb3BzdGVuL2pzb25ycGNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyaW5rZWJ5XCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL3JpbmtlYnkvanNvbnJwY1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9nb2VybGkvanNvbnJwY1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL2tvdmFuL2pzb25ycGNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChob3N0ICsgXCI/YXBpS2V5PVwiICsgYXBpS2V5KTtcbiAgICB9O1xuICAgIHJldHVybiBOb2Rlc21pdGhQcm92aWRlcjtcbn0odXJsX2pzb25fcnBjX3Byb3ZpZGVyXzEuVXJsSnNvblJwY1Byb3ZpZGVyKSk7XG5leHBvcnRzLk5vZGVzbWl0aFByb3ZpZGVyID0gTm9kZXNtaXRoUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2Rlc21pdGgtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/nodesmith-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/pocket-provider.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/pocket-provider.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PocketProvider = void 0;\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar url_json_rpc_provider_1 = __webpack_require__(/*! ./url-json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\");\nvar defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nvar PocketProvider = /** @class */ (function (_super) {\n    __extends(PocketProvider, _super);\n    function PocketProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PocketProvider.getApiKey = function (apiKey) {\n        var apiKeyObj = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n        }\n        else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        }\n        else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    };\n    PocketProvider.getUrl = function (network, apiKey) {\n        var host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        var url = \"https://\" + host + \"/v1/lb/\" + apiKey.applicationId;\n        var connection = { headers: {}, url: url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    };\n    PocketProvider.prototype.isCommunityResource = function () {\n        return (this.applicationId === defaultApplicationId);\n    };\n    return PocketProvider;\n}(url_json_rpc_provider_1.UrlJsonRpcProvider));\nexports.PocketProvider = PocketProvider;\n//# sourceMappingURL=pocket-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvcG9ja2V0LXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixlQUFlLG1CQUFPLENBQUMsc0ZBQXVCO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLDZHQUFZO0FBQ3JDO0FBQ0EsOEJBQThCLG1CQUFPLENBQUMsdUlBQXlCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvcG9ja2V0LXByb3ZpZGVyLmpzPzM1NWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2NrZXRQcm92aWRlciA9IHZvaWQgMDtcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIik7XG52YXIgX3ZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL192ZXJzaW9uXCIpO1xudmFyIGxvZ2dlciA9IG5ldyBsb2dnZXJfMS5Mb2dnZXIoX3ZlcnNpb25fMS52ZXJzaW9uKTtcbnZhciB1cmxfanNvbl9ycGNfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiKTtcbnZhciBkZWZhdWx0QXBwbGljYXRpb25JZCA9IFwiNjJlMWFkNTFiMzdiOGUwMDM5NGJkYTNiXCI7XG52YXIgUG9ja2V0UHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBvY2tldFByb3ZpZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBvY2tldFByb3ZpZGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFBvY2tldFByb3ZpZGVyLmdldEFwaUtleSA9IGZ1bmN0aW9uIChhcGlLZXkpIHtcbiAgICAgICAgdmFyIGFwaUtleU9iaiA9IHtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uSWQ6IG51bGwsXG4gICAgICAgICAgICBsb2FkQmFsYW5jZXI6IHRydWUsXG4gICAgICAgICAgICBhcHBsaWNhdGlvblNlY3JldEtleTogbnVsbFxuICAgICAgICB9O1xuICAgICAgICAvLyBQYXJzZSBhcHBsaWNhdGlvbklkIGFuZCBhcHBsaWNhdGlvblNlY3JldEtleVxuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvbklkID0gZGVmYXVsdEFwcGxpY2F0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIChhcGlLZXkpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBhcGlLZXlPYmouYXBwbGljYXRpb25JZCA9IGFwaUtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgYXBpS2V5T2JqLmFwcGxpY2F0aW9uSWQgPSBhcGlLZXkuYXBwbGljYXRpb25JZDtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvblNlY3JldEtleSA9IGFwaUtleS5hcHBsaWNhdGlvblNlY3JldEtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcGlLZXkuYXBwbGljYXRpb25JZCkge1xuICAgICAgICAgICAgYXBpS2V5T2JqLmFwcGxpY2F0aW9uSWQgPSBhcGlLZXkuYXBwbGljYXRpb25JZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBQb2NrZXRQcm92aWRlciBhcGlLZXlcIiwgXCJhcGlLZXlcIiwgYXBpS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpS2V5T2JqO1xuICAgIH07XG4gICAgUG9ja2V0UHJvdmlkZXIuZ2V0VXJsID0gZnVuY3Rpb24gKG5ldHdvcmssIGFwaUtleSkge1xuICAgICAgICB2YXIgaG9zdCA9IG51bGw7XG4gICAgICAgIHN3aXRjaCAobmV0d29yayA/IG5ldHdvcmsubmFtZSA6IFwidW5rbm93blwiKSB7XG4gICAgICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiZXRoLWdvZXJsaS5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImhvbWVzdGVhZFwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1tYWlubmV0LmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwia292YW5cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJwb2Eta292YW4uZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYXRpY1wiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcInBvbHktbWFpbm5ldC5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hdGljbXVtXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9seWdvbi1tdW1iYWktcnBjLmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmlua2VieVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1yaW5rZWJ5LmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicm9wc3RlblwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1yb3BzdGVuLmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBsb2dnZXJfMS5Mb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQ6IFwibmV0d29ya1wiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV0d29ya1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSBcImh0dHBzOi8vXCIgKyBob3N0ICsgXCIvdjEvbGIvXCIgKyBhcGlLZXkuYXBwbGljYXRpb25JZDtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB7IGhlYWRlcnM6IHt9LCB1cmw6IHVybCB9O1xuICAgICAgICBpZiAoYXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24udXNlciA9IFwiXCI7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnBhc3N3b3JkID0gYXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH07XG4gICAgUG9ja2V0UHJvdmlkZXIucHJvdG90eXBlLmlzQ29tbXVuaXR5UmVzb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcHBsaWNhdGlvbklkID09PSBkZWZhdWx0QXBwbGljYXRpb25JZCk7XG4gICAgfTtcbiAgICByZXR1cm4gUG9ja2V0UHJvdmlkZXI7XG59KHVybF9qc29uX3JwY19wcm92aWRlcl8xLlVybEpzb25ScGNQcm92aWRlcikpO1xuZXhwb3J0cy5Qb2NrZXRQcm92aWRlciA9IFBvY2tldFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9ja2V0LXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/pocket-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UrlJsonRpcProvider = exports.StaticJsonRpcProvider = void 0;\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\");\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nvar StaticJsonRpcProvider = /** @class */ (function (_super) {\n    __extends(StaticJsonRpcProvider, _super);\n    function StaticJsonRpcProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StaticJsonRpcProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var network;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        network = this.network;\n                        if (!(network == null)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, _super.prototype.detectNetwork.call(this)];\n                    case 1:\n                        network = _a.sent();\n                        if (!network) {\n                            logger.throwError(\"no network detected\", logger_1.Logger.errors.UNKNOWN_ERROR, {});\n                        }\n                        // If still not set, set it\n                        if (this._network == null) {\n                            // A static network does not support \"any\"\n                            (0, properties_1.defineReadOnly)(this, \"_network\", network);\n                            this.emit(\"network\", network, null);\n                        }\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, network];\n                }\n            });\n        });\n    };\n    return StaticJsonRpcProvider;\n}(json_rpc_provider_1.JsonRpcProvider));\nexports.StaticJsonRpcProvider = StaticJsonRpcProvider;\nvar UrlJsonRpcProvider = /** @class */ (function (_super) {\n    __extends(UrlJsonRpcProvider, _super);\n    function UrlJsonRpcProvider(network, apiKey) {\n        var _newTarget = this.constructor;\n        var _this = this;\n        logger.checkAbstract(_newTarget, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = (0, properties_1.getStatic)(_newTarget, \"getNetwork\")(network);\n        apiKey = (0, properties_1.getStatic)(_newTarget, \"getApiKey\")(apiKey);\n        var connection = (0, properties_1.getStatic)(_newTarget, \"getUrl\")(network, apiKey);\n        _this = _super.call(this, connection, network) || this;\n        if (typeof (apiKey) === \"string\") {\n            (0, properties_1.defineReadOnly)(_this, \"apiKey\", apiKey);\n        }\n        else if (apiKey != null) {\n            Object.keys(apiKey).forEach(function (key) {\n                (0, properties_1.defineReadOnly)(_this, key, apiKey[key]);\n            });\n        }\n        return _this;\n    }\n    UrlJsonRpcProvider.prototype._startPending = function () {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    };\n    UrlJsonRpcProvider.prototype.isCommunityResource = function () {\n        return false;\n    };\n    UrlJsonRpcProvider.prototype.getSigner = function (address) {\n        return logger.throwError(\"API provider does not support signing\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n    };\n    UrlJsonRpcProvider.prototype.listAccounts = function () {\n        return Promise.resolve([]);\n    };\n    // Return a defaultApiKey if null, otherwise validate the API key\n    UrlJsonRpcProvider.getApiKey = function (apiKey) {\n        return apiKey;\n    };\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    UrlJsonRpcProvider.getUrl = function (network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", logger_1.Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    };\n    return UrlJsonRpcProvider;\n}(StaticJsonRpcProvider));\nexports.UrlJsonRpcProvider = UrlJsonRpcProvider;\n//# sourceMappingURL=url-json-rpc-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/web3-provider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/web3-provider.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Web3Provider = void 0;\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\");\nvar _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n    var fetcher = \"Web3LegacyFetcher\";\n    return function (method, params) {\n        var _this = this;\n        var request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n        return new Promise(function (resolve, reject) {\n            _this.emit(\"debug\", {\n                action: \"request\",\n                fetcher: fetcher,\n                request: (0, properties_1.deepCopy)(request),\n                provider: _this\n            });\n            sendFunc(request, function (error, response) {\n                if (error) {\n                    _this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher: fetcher,\n                        error: error,\n                        request: request,\n                        provider: _this\n                    });\n                    return reject(error);\n                }\n                _this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher: fetcher,\n                    request: request,\n                    response: response,\n                    provider: _this\n                });\n                if (response.error) {\n                    var error_1 = new Error(response.error.message);\n                    error_1.code = response.error.code;\n                    error_1.data = response.error.data;\n                    return reject(error_1);\n                }\n                resolve(response.result);\n            });\n        });\n    };\n}\nfunction buildEip1193Fetcher(provider) {\n    return function (method, params) {\n        var _this = this;\n        if (params == null) {\n            params = [];\n        }\n        var request = { method: method, params: params };\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: (0, properties_1.deepCopy)(request),\n            provider: this\n        });\n        return provider.request(request).then(function (response) {\n            _this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request: request,\n                response: response,\n                provider: _this\n            });\n            return response;\n        }, function (error) {\n            _this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request: request,\n                error: error,\n                provider: _this\n            });\n            throw error;\n        });\n    };\n}\nvar Web3Provider = /** @class */ (function (_super) {\n    __extends(Web3Provider, _super);\n    function Web3Provider(provider, network) {\n        var _this = this;\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n        var path = null;\n        var jsonRpcFetchFunc = null;\n        var subprovider = null;\n        if (typeof (provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n        }\n        else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n                if (path === \"\") {\n                    path = \"eip-1193:\";\n                }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            }\n            else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            }\n            else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            }\n            else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n                path = \"unknown:\";\n            }\n        }\n        _this = _super.call(this, path, network) || this;\n        (0, properties_1.defineReadOnly)(_this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        (0, properties_1.defineReadOnly)(_this, \"provider\", subprovider);\n        return _this;\n    }\n    Web3Provider.prototype.send = function (method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n    };\n    return Web3Provider;\n}(json_rpc_provider_1.JsonRpcProvider));\nexports.Web3Provider = Web3Provider;\n//# sourceMappingURL=web3-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/web3-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/websocket-provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/websocket-provider.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebSocketProvider = void 0;\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/json-rpc-provider.js\");\nvar ws_1 = __webpack_require__(/*! ./ws */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ws.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nvar NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nvar WebSocketProvider = /** @class */ (function (_super) {\n    __extends(WebSocketProvider, _super);\n    function WebSocketProvider(url, network) {\n        var _this = this;\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        if (typeof (url) === \"string\") {\n            _this = _super.call(this, url, network) || this;\n        }\n        else {\n            _this = _super.call(this, \"_websocket\", network) || this;\n        }\n        _this._pollingInterval = -1;\n        _this._wsReady = false;\n        if (typeof (url) === \"string\") {\n            (0, properties_1.defineReadOnly)(_this, \"_websocket\", new ws_1.WebSocket(_this.connection.url));\n        }\n        else {\n            (0, properties_1.defineReadOnly)(_this, \"_websocket\", url);\n        }\n        (0, properties_1.defineReadOnly)(_this, \"_requests\", {});\n        (0, properties_1.defineReadOnly)(_this, \"_subs\", {});\n        (0, properties_1.defineReadOnly)(_this, \"_subIds\", {});\n        (0, properties_1.defineReadOnly)(_this, \"_detectNetwork\", _super.prototype.detectNetwork.call(_this));\n        // Stall sending requests until the socket is open...\n        _this.websocket.onopen = function () {\n            _this._wsReady = true;\n            Object.keys(_this._requests).forEach(function (id) {\n                _this.websocket.send(_this._requests[id].payload);\n            });\n        };\n        _this.websocket.onmessage = function (messageEvent) {\n            var data = messageEvent.data;\n            var result = JSON.parse(data);\n            if (result.id != null) {\n                var id = String(result.id);\n                var request = _this._requests[id];\n                delete _this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    _this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: _this\n                    });\n                }\n                else {\n                    var error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        (0, properties_1.defineReadOnly)(error, \"code\", result.error.code || null);\n                        (0, properties_1.defineReadOnly)(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    _this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: _this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                var sub = _this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        var fauxPoll = setInterval(function () {\n            _this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n        return _this;\n    }\n    Object.defineProperty(WebSocketProvider.prototype, \"websocket\", {\n        // Cannot narrow the type of _websocket, as that is not backwards compatible\n        // so we add a getter and let the WebSocket be a public API.\n        get: function () { return this._websocket; },\n        enumerable: false,\n        configurable: true\n    });\n    WebSocketProvider.prototype.detectNetwork = function () {\n        return this._detectNetwork;\n    };\n    Object.defineProperty(WebSocketProvider.prototype, \"pollingInterval\", {\n        get: function () {\n            return 0;\n        },\n        set: function (value) {\n            logger.throwError(\"cannot set polling interval on WebSocketProvider\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setPollingInterval\"\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    };\n    WebSocketProvider.prototype.poll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, null];\n            });\n        });\n    };\n    Object.defineProperty(WebSocketProvider.prototype, \"polling\", {\n        set: function (value) {\n            if (!value) {\n                return;\n            }\n            logger.throwError(\"cannot set polling on WebSocketProvider\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setPolling\"\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WebSocketProvider.prototype.send = function (method, params) {\n        var _this = this;\n        var rid = NextId++;\n        return new Promise(function (resolve, reject) {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            var payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            _this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: _this\n            });\n            _this._requests[String(rid)] = { callback: callback, payload: payload };\n            if (_this._wsReady) {\n                _this.websocket.send(payload);\n            }\n        });\n    };\n    WebSocketProvider.defaultUrl = function () {\n        return \"ws:/\\/localhost:8546\";\n    };\n    WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subIdPromise, subId;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        subIdPromise = this._subIds[tag];\n                        if (subIdPromise == null) {\n                            subIdPromise = Promise.all(param).then(function (param) {\n                                return _this.send(\"eth_subscribe\", param);\n                            });\n                            this._subIds[tag] = subIdPromise;\n                        }\n                        return [4 /*yield*/, subIdPromise];\n                    case 1:\n                        subId = _a.sent();\n                        this._subs[subId] = { tag: tag, processFunc: processFunc };\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WebSocketProvider.prototype._startEvent = function (event) {\n        var _this = this;\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], function (result) {\n                    var blockNumber = bignumber_1.BigNumber.from(result.number).toNumber();\n                    _this._emitted.block = blockNumber;\n                    _this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], function (result) {\n                    _this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], function (result) {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    _this.emit(event.filter, _this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                var emitReceipt_1 = function (event) {\n                    var hash = event.hash;\n                    _this.getTransactionReceipt(hash).then(function (receipt) {\n                        if (!receipt) {\n                            return;\n                        }\n                        _this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt_1(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], function (result) {\n                    _this._events.filter(function (e) { return (e.type === \"tx\"); }).forEach(emitReceipt_1);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    };\n    WebSocketProvider.prototype._stopEvent = function (event) {\n        var _this = this;\n        var tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter(function (e) { return (e.type === \"tx\"); }).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        var subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then(function (subId) {\n            if (!_this._subs[subId]) {\n                return;\n            }\n            delete _this._subs[subId];\n            _this.send(\"eth_unsubscribe\", [subId]);\n        });\n    };\n    WebSocketProvider.prototype.destroy = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.websocket.readyState === ws_1.WebSocket.CONNECTING)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, (new Promise(function (resolve) {\n                                _this.websocket.onopen = function () {\n                                    resolve(true);\n                                };\n                                _this.websocket.onerror = function () {\n                                    resolve(false);\n                                };\n                            }))];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // Hangup\n                        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n                        this.websocket.close(1000);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return WebSocketProvider;\n}(json_rpc_provider_1.JsonRpcProvider));\nexports.WebSocketProvider = WebSocketProvider;\n//# sourceMappingURL=websocket-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/websocket-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ws.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ws.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebSocket = void 0;\nvar ws_1 = __importDefault(__webpack_require__(/*! ws */ \"(ssr)/./node_modules/ws/index.js\"));\nexports.WebSocket = ws_1.default;\n//# sourceMappingURL=ws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIvd3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsMkJBQTJCLG1CQUFPLENBQUMsNENBQUk7QUFDdkMsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL2xpYi93cy5qcz9hOTM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XZWJTb2NrZXQgPSB2b2lkIDA7XG52YXIgd3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwid3NcIikpO1xuZXhwb3J0cy5XZWJTb2NrZXQgPSB3c18xLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/ws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/_version.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/_version.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"solidity/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NvbGlkaXR5L2xpYi9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc29saWRpdHkvbGliL192ZXJzaW9uLmpzPzJmOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcnNpb24gPSB2b2lkIDA7XG5leHBvcnRzLnZlcnNpb24gPSBcInNvbGlkaXR5LzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sha256 = exports.keccak256 = exports.pack = void 0;\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib/index.js\");\nvar sha2_1 = __webpack_require__(/*! @ethersproject/sha2 */ \"(ssr)/./node_modules/@ethersproject/sha2/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n        case \"string\":\n            return (0, strings_1.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0, bytes_1.arrayify)(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n    }\n    var match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        var size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = bignumber_1.BigNumber.from(value).toTwos(size);\n        return (0, bytes_1.zeroPad)(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        var size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if ((0, bytes_1.arrayify)(value).byteLength !== size) {\n            logger.throwArgumentError(\"invalid value for \" + type, \"value\", value);\n        }\n        if (isArray) {\n            return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        var baseType_1 = match[1];\n        var count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(\"invalid array length for \" + type, \"value\", value);\n        }\n        var result_1 = [];\n        value.forEach(function (value) {\n            result_1.push(_pack(baseType_1, value, true));\n        });\n        return (0, bytes_1.concat)(result_1);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    var tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));\n}\nexports.pack = pack;\nfunction keccak256(types, values) {\n    return (0, keccak256_1.keccak256)(pack(types, values));\n}\nexports.keccak256 = keccak256;\nfunction sha256(types, values) {\n    return (0, sha2_1.sha256)(pack(types, values));\n}\nexports.sha256 = sha256;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NvbGlkaXR5L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsWUFBWTtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDcEQsY0FBYyxtQkFBTyxDQUFDLG9GQUFzQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLGtGQUFxQjtBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsc0ZBQXVCO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLDRHQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsWUFBWSxjQUFjO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NvbGlkaXR5L2xpYi9pbmRleC5qcz9hNGVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaGEyNTYgPSBleHBvcnRzLmtlY2NhazI1NiA9IGV4cG9ydHMucGFjayA9IHZvaWQgMDtcbnZhciBiaWdudW1iZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIik7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiKTtcbnZhciBrZWNjYWsyNTZfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIik7XG52YXIgc2hhMl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L3NoYTJcIik7XG52YXIgc3RyaW5nc18xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIik7XG52YXIgcmVnZXhCeXRlcyA9IG5ldyBSZWdFeHAoXCJeYnl0ZXMoWzAtOV0rKSRcIik7XG52YXIgcmVnZXhOdW1iZXIgPSBuZXcgUmVnRXhwKFwiXih1P2ludCkoWzAtOV0qKSRcIik7XG52YXIgcmVnZXhBcnJheSA9IG5ldyBSZWdFeHAoXCJeKC4qKVxcXFxbKFswLTldKilcXFxcXSRcIik7XG52YXIgWmVyb3MgPSBcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIik7XG52YXIgX3ZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL192ZXJzaW9uXCIpO1xudmFyIGxvZ2dlciA9IG5ldyBsb2dnZXJfMS5Mb2dnZXIoX3ZlcnNpb25fMS52ZXJzaW9uKTtcbmZ1bmN0aW9uIF9wYWNrKHR5cGUsIHZhbHVlLCBpc0FycmF5KSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgYnl0ZXNfMS56ZXJvUGFkKSh2YWx1ZSwgMzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLmFycmF5aWZ5KSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiAoMCwgc3RyaW5nc18xLnRvVXRmOEJ5dGVzKSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOlxuICAgICAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLmFycmF5aWZ5KSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA/IFwiMHgwMVwiIDogXCIweDAwXCIpO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGJ5dGVzXzEuemVyb1BhZCkodmFsdWUsIDMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoMCwgYnl0ZXNfMS5hcnJheWlmeSkodmFsdWUpO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSB0eXBlLm1hdGNoKHJlZ2V4TnVtYmVyKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgLy9sZXQgc2lnbmVkID0gKG1hdGNoWzFdID09PSBcImludFwiKVxuICAgICAgICB2YXIgc2l6ZSA9IHBhcnNlSW50KG1hdGNoWzJdIHx8IFwiMjU2XCIpO1xuICAgICAgICBpZiAoKG1hdGNoWzJdICYmIFN0cmluZyhzaXplKSAhPT0gbWF0Y2hbMl0pIHx8IChzaXplICUgOCAhPT0gMCkgfHwgc2l6ZSA9PT0gMCB8fCBzaXplID4gMjU2KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBudW1iZXIgdHlwZVwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHNpemUgPSAyNTY7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBiaWdudW1iZXJfMS5CaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9Ud29zKHNpemUpO1xuICAgICAgICByZXR1cm4gKDAsIGJ5dGVzXzEuemVyb1BhZCkodmFsdWUsIHNpemUgLyA4KTtcbiAgICB9XG4gICAgbWF0Y2ggPSB0eXBlLm1hdGNoKHJlZ2V4Qnl0ZXMpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICB2YXIgc2l6ZSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgaWYgKFN0cmluZyhzaXplKSAhPT0gbWF0Y2hbMV0gfHwgc2l6ZSA9PT0gMCB8fCBzaXplID4gMzIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGVzIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgYnl0ZXNfMS5hcnJheWlmeSkodmFsdWUpLmJ5dGVMZW5ndGggIT09IHNpemUpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHZhbHVlIGZvciBcIiArIHR5cGUsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGJ5dGVzXzEuYXJyYXlpZnkpKCh2YWx1ZSArIFplcm9zKS5zdWJzdHJpbmcoMCwgNjYpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIG1hdGNoID0gdHlwZS5tYXRjaChyZWdleEFycmF5KTtcbiAgICBpZiAobWF0Y2ggJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGJhc2VUeXBlXzEgPSBtYXRjaFsxXTtcbiAgICAgICAgdmFyIGNvdW50ID0gcGFyc2VJbnQobWF0Y2hbMl0gfHwgU3RyaW5nKHZhbHVlLmxlbmd0aCkpO1xuICAgICAgICBpZiAoY291bnQgIT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhcnJheSBsZW5ndGggZm9yIFwiICsgdHlwZSwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdF8xID0gW107XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXN1bHRfMS5wdXNoKF9wYWNrKGJhc2VUeXBlXzEsIHZhbHVlLCB0cnVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKDAsIGJ5dGVzXzEuY29uY2F0KShyZXN1bHRfMSk7XG4gICAgfVxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0eXBlXCIsIFwidHlwZVwiLCB0eXBlKTtcbn1cbi8vIEBUT0RPOiBBcnJheSBFbnVtXG5mdW5jdGlvbiBwYWNrKHR5cGVzLCB2YWx1ZXMpIHtcbiAgICBpZiAodHlwZXMubGVuZ3RoICE9IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIndyb25nIG51bWJlciBvZiB2YWx1ZXM7IGV4cGVjdGVkICR7IHR5cGVzLmxlbmd0aCB9XCIsIFwidmFsdWVzXCIsIHZhbHVlcyk7XG4gICAgfVxuICAgIHZhciB0aWdodCA9IFtdO1xuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUsIGluZGV4KSB7XG4gICAgICAgIHRpZ2h0LnB1c2goX3BhY2sodHlwZSwgdmFsdWVzW2luZGV4XSkpO1xuICAgIH0pO1xuICAgIHJldHVybiAoMCwgYnl0ZXNfMS5oZXhsaWZ5KSgoMCwgYnl0ZXNfMS5jb25jYXQpKHRpZ2h0KSk7XG59XG5leHBvcnRzLnBhY2sgPSBwYWNrO1xuZnVuY3Rpb24ga2VjY2FrMjU2KHR5cGVzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gKDAsIGtlY2NhazI1Nl8xLmtlY2NhazI1NikocGFjayh0eXBlcywgdmFsdWVzKSk7XG59XG5leHBvcnRzLmtlY2NhazI1NiA9IGtlY2NhazI1NjtcbmZ1bmN0aW9uIHNoYTI1Nih0eXBlcywgdmFsdWVzKSB7XG4gICAgcmV0dXJuICgwLCBzaGEyXzEuc2hhMjU2KShwYWNrKHR5cGVzLCB2YWx1ZXMpKTtcbn1cbmV4cG9ydHMuc2hhMjU2ID0gc2hhMjU2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/_version.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/_version.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"units/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3VuaXRzL2xpYi9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvdW5pdHMvbGliL192ZXJzaW9uLmpzP2IyNmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcnNpb24gPSB2b2lkIDA7XG5leHBvcnRzLnZlcnNpb24gPSBcInVuaXRzLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = exports.commify = void 0;\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nfunction commify(value) {\n    var comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    var whole = comps[0];\n    var negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    var suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    var formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            var index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexports.commify = commify;\nfunction formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        var index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return (0, bignumber_1.formatFixed)(value, (unitName != null) ? unitName : 18);\n}\nexports.formatUnits = formatUnits;\nfunction parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        var index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return (0, bignumber_1.parseFixed)(value, (unitName != null) ? unitName : 18);\n}\nexports.parseUnits = parseUnits;\nfunction formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexports.formatEther = formatEther;\nfunction parseEther(ether) {\n    return parseUnits(ether, 18);\n}\nexports.parseEther = parseEther;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3VuaXRzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxlQUFlO0FBQ3JHLGtCQUFrQixtQkFBTyxDQUFDLDRGQUEwQjtBQUNwRCxlQUFlLG1CQUFPLENBQUMsc0ZBQXVCO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLHlHQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3VuaXRzL2xpYi9pbmRleC5qcz8wODdkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUV0aGVyID0gZXhwb3J0cy5mb3JtYXRFdGhlciA9IGV4cG9ydHMucGFyc2VVbml0cyA9IGV4cG9ydHMuZm9ybWF0VW5pdHMgPSBleHBvcnRzLmNvbW1pZnkgPSB2b2lkIDA7XG52YXIgYmlnbnVtYmVyXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCIpO1xudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiKTtcbnZhciBfdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vX3ZlcnNpb25cIik7XG52YXIgbG9nZ2VyID0gbmV3IGxvZ2dlcl8xLkxvZ2dlcihfdmVyc2lvbl8xLnZlcnNpb24pO1xudmFyIG5hbWVzID0gW1xuICAgIFwid2VpXCIsXG4gICAgXCJrd2VpXCIsXG4gICAgXCJtd2VpXCIsXG4gICAgXCJnd2VpXCIsXG4gICAgXCJzemFib1wiLFxuICAgIFwiZmlubmV5XCIsXG4gICAgXCJldGhlclwiLFxuXTtcbi8vIFNvbWUgZW52aXJvbm1lbnRzIGhhdmUgaXNzdWVzIHdpdGggUmVnRXggdGhhdCBjb250YWluIGJhY2stdHJhY2tpbmcsIHNvIHdlIGNhbm5vdFxuLy8gdXNlIHRoZW0uXG5mdW5jdGlvbiBjb21taWZ5KHZhbHVlKSB7XG4gICAgdmFyIGNvbXBzID0gU3RyaW5nKHZhbHVlKS5zcGxpdChcIi5cIik7XG4gICAgaWYgKGNvbXBzLmxlbmd0aCA+IDIgfHwgIWNvbXBzWzBdLm1hdGNoKC9eLT9bMC05XSokLykgfHwgKGNvbXBzWzFdICYmICFjb21wc1sxXS5tYXRjaCgvXlswLTldKiQvKSkgfHwgdmFsdWUgPT09IFwiLlwiIHx8IHZhbHVlID09PSBcIi0uXCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdmFsdWVcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGF0IGxlYXN0IG9uZSB3aG9sZSBkaWdpdCAoMCBpZiBub25lKVxuICAgIHZhciB3aG9sZSA9IGNvbXBzWzBdO1xuICAgIHZhciBuZWdhdGl2ZSA9IFwiXCI7XG4gICAgaWYgKHdob2xlLnN1YnN0cmluZygwLCAxKSA9PT0gXCItXCIpIHtcbiAgICAgICAgbmVnYXRpdmUgPSBcIi1cIjtcbiAgICAgICAgd2hvbGUgPSB3aG9sZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGF0IGxlYXN0IDEgd2hvbGUgZGlnaXQgd2l0aCBubyBsZWFkaW5nIHplcm9zXG4gICAgd2hpbGUgKHdob2xlLnN1YnN0cmluZygwLCAxKSA9PT0gXCIwXCIpIHtcbiAgICAgICAgd2hvbGUgPSB3aG9sZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGlmICh3aG9sZSA9PT0gXCJcIikge1xuICAgICAgICB3aG9sZSA9IFwiMFwiO1xuICAgIH1cbiAgICB2YXIgc3VmZml4ID0gXCJcIjtcbiAgICBpZiAoY29tcHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHN1ZmZpeCA9IFwiLlwiICsgKGNvbXBzWzFdIHx8IFwiMFwiKTtcbiAgICB9XG4gICAgd2hpbGUgKHN1ZmZpeC5sZW5ndGggPiAyICYmIHN1ZmZpeFtzdWZmaXgubGVuZ3RoIC0gMV0gPT09IFwiMFwiKSB7XG4gICAgICAgIHN1ZmZpeCA9IHN1ZmZpeC5zdWJzdHJpbmcoMCwgc3VmZml4Lmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVkID0gW107XG4gICAgd2hpbGUgKHdob2xlLmxlbmd0aCkge1xuICAgICAgICBpZiAod2hvbGUubGVuZ3RoIDw9IDMpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZC51bnNoaWZ0KHdob2xlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gd2hvbGUubGVuZ3RoIC0gMztcbiAgICAgICAgICAgIGZvcm1hdHRlZC51bnNoaWZ0KHdob2xlLnN1YnN0cmluZyhpbmRleCkpO1xuICAgICAgICAgICAgd2hvbGUgPSB3aG9sZS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZWdhdGl2ZSArIGZvcm1hdHRlZC5qb2luKFwiLFwiKSArIHN1ZmZpeDtcbn1cbmV4cG9ydHMuY29tbWlmeSA9IGNvbW1pZnk7XG5mdW5jdGlvbiBmb3JtYXRVbml0cyh2YWx1ZSwgdW5pdE5hbWUpIHtcbiAgICBpZiAodHlwZW9mICh1bml0TmFtZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbmFtZXMuaW5kZXhPZih1bml0TmFtZSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHVuaXROYW1lID0gMyAqIGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoMCwgYmlnbnVtYmVyXzEuZm9ybWF0Rml4ZWQpKHZhbHVlLCAodW5pdE5hbWUgIT0gbnVsbCkgPyB1bml0TmFtZSA6IDE4KTtcbn1cbmV4cG9ydHMuZm9ybWF0VW5pdHMgPSBmb3JtYXRVbml0cztcbmZ1bmN0aW9uIHBhcnNlVW5pdHModmFsdWUsIHVuaXROYW1lKSB7XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh1bml0TmFtZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbmFtZXMuaW5kZXhPZih1bml0TmFtZSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHVuaXROYW1lID0gMyAqIGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoMCwgYmlnbnVtYmVyXzEucGFyc2VGaXhlZCkodmFsdWUsICh1bml0TmFtZSAhPSBudWxsKSA/IHVuaXROYW1lIDogMTgpO1xufVxuZXhwb3J0cy5wYXJzZVVuaXRzID0gcGFyc2VVbml0cztcbmZ1bmN0aW9uIGZvcm1hdEV0aGVyKHdlaSkge1xuICAgIHJldHVybiBmb3JtYXRVbml0cyh3ZWksIDE4KTtcbn1cbmV4cG9ydHMuZm9ybWF0RXRoZXIgPSBmb3JtYXRFdGhlcjtcbmZ1bmN0aW9uIHBhcnNlRXRoZXIoZXRoZXIpIHtcbiAgICByZXR1cm4gcGFyc2VVbml0cyhldGhlciwgMTgpO1xufVxuZXhwb3J0cy5wYXJzZUV0aGVyID0gcGFyc2VFdGhlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/_version.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/_version.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"wallet/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dhbGxldC9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dhbGxldC9saWIvX3ZlcnNpb24uanM/Y2UzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwid2FsbGV0LzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/index.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verifyTypedData = exports.verifyMessage = exports.Wallet = void 0;\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nvar abstract_provider_1 = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib/index.js\");\nvar abstract_signer_1 = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(ssr)/./node_modules/@ethersproject/abstract-signer/lib/index.js\");\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib/index.js\");\nvar hdnode_1 = __webpack_require__(/*! @ethersproject/hdnode */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/index.js\");\nvar keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar random_1 = __webpack_require__(/*! @ethersproject/random */ \"(ssr)/./node_modules/@ethersproject/random/lib/index.js\");\nvar signing_key_1 = __webpack_require__(/*! @ethersproject/signing-key */ \"(ssr)/./node_modules/@ethersproject/signing-key/lib/index.js\");\nvar json_wallets_1 = __webpack_require__(/*! @ethersproject/json-wallets */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/index.js\");\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/_version.js\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction isAccount(value) {\n    return (value != null && (0, bytes_1.isHexString)(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    var mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nvar Wallet = /** @class */ (function (_super) {\n    __extends(Wallet, _super);\n    function Wallet(privateKey, provider) {\n        var _this = _super.call(this) || this;\n        if (isAccount(privateKey)) {\n            var signingKey_1 = new signing_key_1.SigningKey(privateKey.privateKey);\n            (0, properties_1.defineReadOnly)(_this, \"_signingKey\", function () { return signingKey_1; });\n            (0, properties_1.defineReadOnly)(_this, \"address\", (0, transactions_1.computeAddress)(_this.publicKey));\n            if (_this.address !== (0, address_1.getAddress)(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                var srcMnemonic_1 = privateKey.mnemonic;\n                (0, properties_1.defineReadOnly)(_this, \"_mnemonic\", function () { return ({\n                    phrase: srcMnemonic_1.phrase,\n                    path: srcMnemonic_1.path || hdnode_1.defaultPath,\n                    locale: srcMnemonic_1.locale || \"en\"\n                }); });\n                var mnemonic = _this.mnemonic;\n                var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if ((0, transactions_1.computeAddress)(node.privateKey) !== _this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                (0, properties_1.defineReadOnly)(_this, \"_mnemonic\", function () { return null; });\n            }\n        }\n        else {\n            if (signing_key_1.SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                (0, properties_1.defineReadOnly)(_this, \"_signingKey\", function () { return privateKey; });\n            }\n            else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof (privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                var signingKey_2 = new signing_key_1.SigningKey(privateKey);\n                (0, properties_1.defineReadOnly)(_this, \"_signingKey\", function () { return signingKey_2; });\n            }\n            (0, properties_1.defineReadOnly)(_this, \"_mnemonic\", function () { return null; });\n            (0, properties_1.defineReadOnly)(_this, \"address\", (0, transactions_1.computeAddress)(_this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !abstract_provider_1.Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        (0, properties_1.defineReadOnly)(_this, \"provider\", provider || null);\n        return _this;\n    }\n    Object.defineProperty(Wallet.prototype, \"mnemonic\", {\n        get: function () { return this._mnemonic(); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Wallet.prototype, \"privateKey\", {\n        get: function () { return this._signingKey().privateKey; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Wallet.prototype, \"publicKey\", {\n        get: function () { return this._signingKey().publicKey; },\n        enumerable: false,\n        configurable: true\n    });\n    Wallet.prototype.getAddress = function () {\n        return Promise.resolve(this.address);\n    };\n    Wallet.prototype.connect = function (provider) {\n        return new Wallet(this, provider);\n    };\n    Wallet.prototype.signTransaction = function (transaction) {\n        var _this = this;\n        return (0, properties_1.resolveProperties)(transaction).then(function (tx) {\n            if (tx.from != null) {\n                if ((0, address_1.getAddress)(tx.from) !== _this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            var signature = _this._signingKey().signDigest((0, keccak256_1.keccak256)((0, transactions_1.serialize)(tx)));\n            return (0, transactions_1.serialize)(tx, signature);\n        });\n    };\n    Wallet.prototype.signMessage = function (message) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, (0, bytes_1.joinSignature)(this._signingKey().signDigest((0, hash_1.hashMessage)(message)))];\n            });\n        });\n    };\n    Wallet.prototype._signTypedData = function (domain, types, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var populated;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                            if (_this.provider == null) {\n                                logger.throwError(\"cannot resolve ENS names without a provider\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                                    operation: \"resolveName\",\n                                    value: name\n                                });\n                            }\n                            return _this.provider.resolveName(name);\n                        })];\n                    case 1:\n                        populated = _a.sent();\n                        return [2 /*return*/, (0, bytes_1.joinSignature)(this._signingKey().signDigest(hash_1._TypedDataEncoder.hash(populated.domain, types, populated.value)))];\n                }\n            });\n        });\n    };\n    Wallet.prototype.encrypt = function (password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return (0, json_wallets_1.encryptKeystore)(this, password, options, progressCallback);\n    };\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    Wallet.createRandom = function (options) {\n        var entropy = (0, random_1.randomBytes)(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = (0, bytes_1.arrayify)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)([entropy, options.extraEntropy])), 0, 16));\n        }\n        var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    };\n    Wallet.fromEncryptedJson = function (json, password, progressCallback) {\n        return (0, json_wallets_1.decryptJsonWallet)(json, password, progressCallback).then(function (account) {\n            return new Wallet(account);\n        });\n    };\n    Wallet.fromEncryptedJsonSync = function (json, password) {\n        return new Wallet((0, json_wallets_1.decryptJsonWalletSync)(json, password));\n    };\n    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {\n        if (!path) {\n            path = hdnode_1.defaultPath;\n        }\n        return new Wallet(hdnode_1.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    };\n    return Wallet;\n}(abstract_signer_1.Signer));\nexports.Wallet = Wallet;\nfunction verifyMessage(message, signature) {\n    return (0, transactions_1.recoverAddress)((0, hash_1.hashMessage)(message), signature);\n}\nexports.verifyMessage = verifyMessage;\nfunction verifyTypedData(domain, types, value, signature) {\n    return (0, transactions_1.recoverAddress)(hash_1._TypedDataEncoder.hash(domain, types, value), signature);\n}\nexports.verifyTypedData = verifyTypedData;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/_version.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/_version.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"wordlists/5.7.0\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dvcmRsaXN0cy9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dvcmRsaXN0cy9saWIvX3ZlcnNpb24uanM/OTFlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwid29yZGxpc3RzLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wordlists = exports.Wordlist = exports.logger = void 0;\n// Wordlists\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nObject.defineProperty(exports, \"logger\", ({ enumerable: true, get: function () { return wordlist_1.logger; } }));\nObject.defineProperty(exports, \"Wordlist\", ({ enumerable: true, get: function () { return wordlist_1.Wordlist; } }));\nvar wordlists_1 = __webpack_require__(/*! ./wordlists */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlists.js\");\nObject.defineProperty(exports, \"wordlists\", ({ enumerable: true, get: function () { return wordlists_1.wordlists; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dvcmRsaXN0cy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsY0FBYztBQUNyRDtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsNkdBQVk7QUFDckMsMENBQXlDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQzlHLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBYTtBQUN2Qyw2Q0FBNEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDckgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvbGliL2luZGV4LmpzP2U0ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndvcmRsaXN0cyA9IGV4cG9ydHMuV29yZGxpc3QgPSBleHBvcnRzLmxvZ2dlciA9IHZvaWQgMDtcbi8vIFdvcmRsaXN0c1xuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDM5L2JpcC0wMDM5LXdvcmRsaXN0cy5tZFxudmFyIHdvcmRsaXN0XzEgPSByZXF1aXJlKFwiLi93b3JkbGlzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxvZ2dlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd29yZGxpc3RfMS5sb2dnZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXb3JkbGlzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd29yZGxpc3RfMS5Xb3JkbGlzdDsgfSB9KTtcbnZhciB3b3JkbGlzdHNfMSA9IHJlcXVpcmUoXCIuL3dvcmRsaXN0c1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndvcmRsaXN0c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd29yZGxpc3RzXzEud29yZGxpc3RzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-cz.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-cz.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langCz = void 0;\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar words = \"AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk\";\nvar wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\nvar LangCz = /** @class */ (function (_super) {\n    __extends(LangCz, _super);\n    function LangCz() {\n        return _super.call(this, \"cz\") || this;\n    }\n    LangCz.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangCz.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    };\n    return LangCz;\n}(wordlist_1.Wordlist));\nvar langCz = new LangCz();\nexports.langCz = langCz;\nwordlist_1.Wordlist.register(langCz);\n//# sourceMappingURL=lang-cz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-cz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-en.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-en.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langEn = void 0;\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\nvar wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\nvar LangEn = /** @class */ (function (_super) {\n    __extends(LangEn, _super);\n    function LangEn() {\n        return _super.call(this, \"en\") || this;\n    }\n    LangEn.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangEn.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    };\n    return LangEn;\n}(wordlist_1.Wordlist));\nvar langEn = new LangEn();\nexports.langEn = langEn;\nwordlist_1.Wordlist.register(langEn);\n//# sourceMappingURL=lang-en.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-en.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-es.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-es.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langEs = void 0;\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar words = \"A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo\";\nvar lookup = {};\nvar wordlist = null;\nfunction dropDiacritic(word) {\n    wordlist_1.logger.checkNormalize();\n    return (0, strings_1.toUtf8String)(Array.prototype.filter.call((0, strings_1.toUtf8Bytes)(word.normalize(\"NFD\").toLowerCase()), function (c) {\n        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));\n    }));\n}\nfunction expand(word) {\n    var output = [];\n    Array.prototype.forEach.call((0, strings_1.toUtf8Bytes)(word), function (c) {\n        // Acute accent\n        if (c === 47) {\n            output.push(204);\n            output.push(129);\n            // n-tilde\n        }\n        else if (c === 126) {\n            output.push(110);\n            output.push(204);\n            output.push(131);\n        }\n        else {\n            output.push(c);\n        }\n    });\n    return (0, strings_1.toUtf8String)(output);\n}\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \").map(function (w) { return expand(w); });\n    wordlist.forEach(function (word, index) {\n        lookup[dropDiacritic(word)] = index;\n    });\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for es (Spanish) FAILED\");\n    }\n}\nvar LangEs = /** @class */ (function (_super) {\n    __extends(LangEs, _super);\n    function LangEs() {\n        return _super.call(this, \"es\") || this;\n    }\n    LangEs.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangEs.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return lookup[dropDiacritic(word)];\n    };\n    return LangEs;\n}(wordlist_1.Wordlist));\nvar langEs = new LangEs();\nexports.langEs = langEs;\nwordlist_1.Wordlist.register(langEs);\n//# sourceMappingURL=lang-es.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-fr.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-fr.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langFr = void 0;\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar words = \"\";\nvar wordlist = null;\nvar lookup = {};\nfunction dropDiacritic(word) {\n    wordlist_1.logger.checkNormalize();\n    return (0, strings_1.toUtf8String)(Array.prototype.filter.call((0, strings_1.toUtf8Bytes)(word.normalize(\"NFD\").toLowerCase()), function (c) {\n        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));\n    }));\n}\nfunction expand(word) {\n    var output = [];\n    Array.prototype.forEach.call((0, strings_1.toUtf8Bytes)(word), function (c) {\n        // Acute accent\n        if (c === 47) {\n            output.push(204);\n            output.push(129);\n            // Grave accent\n        }\n        else if (c === 45) {\n            output.push(204);\n            output.push(128);\n        }\n        else {\n            output.push(c);\n        }\n    });\n    return (0, strings_1.toUtf8String)(output);\n}\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \").map(function (w) { return expand(w); });\n    wordlist.forEach(function (word, index) {\n        lookup[dropDiacritic(word)] = index;\n    });\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for fr (French) FAILED\");\n    }\n}\nvar LangFr = /** @class */ (function (_super) {\n    __extends(LangFr, _super);\n    function LangFr() {\n        return _super.call(this, \"fr\") || this;\n    }\n    LangFr.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangFr.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return lookup[dropDiacritic(word)];\n    };\n    return LangFr;\n}(wordlist_1.Wordlist));\nvar langFr = new LangFr();\nexports.langFr = langFr;\nwordlist_1.Wordlist.register(langFr);\n//# sourceMappingURL=lang-fr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-fr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-it.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-it.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langIt = void 0;\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar words = \"AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa\";\nvar wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for it (Italian) FAILED\");\n    }\n}\nvar LangIt = /** @class */ (function (_super) {\n    __extends(LangIt, _super);\n    function LangIt() {\n        return _super.call(this, \"it\") || this;\n    }\n    LangIt.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangIt.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    };\n    return LangIt;\n}(wordlist_1.Wordlist));\nvar langIt = new LangIt();\nexports.langIt = langIt;\nwordlist_1.Wordlist.register(langIt);\n//# sourceMappingURL=lang-it.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-it.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ja.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ja.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langJa = void 0;\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar data = [\n    // 4-kana words\n    \"AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR\",\n    // 5-kana words\n    \"ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR\",\n    // 6-kana words\n    \"AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm\",\n    // 7-kana words\n    \"ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC\",\n    // 8-kana words\n    \"BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD\",\n    // 9-kana words\n    \"QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD\",\n    // 10-kana words\n    \"IJBEJqXZJ\"\n];\n// Maps each character into its kana value (the index)\nvar mapping = \"~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt\";\nvar wordlist = null;\nfunction hex(word) {\n    return (0, bytes_1.hexlify)((0, strings_1.toUtf8Bytes)(word));\n}\nvar KiYoKu = \"0xe3818de38284e3818f\";\nvar KyoKu = \"0xe3818de38283e3818f\";\nfunction loadWords(lang) {\n    if (wordlist !== null) {\n        return;\n    }\n    wordlist = [];\n    // Transforms for normalizing (sort is a not quite UTF-8)\n    var transform = {};\n    // Delete the diacritic marks\n    transform[(0, strings_1.toUtf8String)([227, 130, 154])] = false;\n    transform[(0, strings_1.toUtf8String)([227, 130, 153])] = false;\n    // Some simple transforms that sort out most of the order\n    transform[(0, strings_1.toUtf8String)([227, 130, 133])] = (0, strings_1.toUtf8String)([227, 130, 134]);\n    transform[(0, strings_1.toUtf8String)([227, 129, 163])] = (0, strings_1.toUtf8String)([227, 129, 164]);\n    transform[(0, strings_1.toUtf8String)([227, 130, 131])] = (0, strings_1.toUtf8String)([227, 130, 132]);\n    transform[(0, strings_1.toUtf8String)([227, 130, 135])] = (0, strings_1.toUtf8String)([227, 130, 136]);\n    // Normalize words using the transform\n    function normalize(word) {\n        var result = \"\";\n        for (var i = 0; i < word.length; i++) {\n            var kana = word[i];\n            var target = transform[kana];\n            if (target === false) {\n                continue;\n            }\n            if (target) {\n                kana = target;\n            }\n            result += kana;\n        }\n        return result;\n    }\n    // Sort how the Japanese list is sorted\n    function sortJapanese(a, b) {\n        a = normalize(a);\n        b = normalize(b);\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    // Load all the words\n    for (var length_1 = 3; length_1 <= 9; length_1++) {\n        var d = data[length_1 - 3];\n        for (var offset = 0; offset < d.length; offset += length_1) {\n            var word = [];\n            for (var i = 0; i < length_1; i++) {\n                var k = mapping.indexOf(d[offset + i]);\n                word.push(227);\n                word.push((k & 0x40) ? 130 : 129);\n                word.push((k & 0x3f) + 128);\n            }\n            wordlist.push((0, strings_1.toUtf8String)(word));\n        }\n    }\n    wordlist.sort(sortJapanese);\n    // For some reason kyoku and kiyoku are flipped in node (!!).\n    // The order SHOULD be:\n    //   - kyoku\n    //   - kiyoku\n    // This should ignore \"if\", but that doesn't work here??\n    /* istanbul ignore next */\n    if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {\n        var tmp = wordlist[442];\n        wordlist[442] = wordlist[443];\n        wordlist[443] = tmp;\n    }\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for ja (Japanese) FAILED\");\n    }\n}\nvar LangJa = /** @class */ (function (_super) {\n    __extends(LangJa, _super);\n    function LangJa() {\n        return _super.call(this, \"ja\") || this;\n    }\n    LangJa.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangJa.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    };\n    LangJa.prototype.split = function (mnemonic) {\n        wordlist_1.logger.checkNormalize();\n        return mnemonic.split(/(?:\\u3000| )+/g);\n    };\n    LangJa.prototype.join = function (words) {\n        return words.join(\"\\u3000\");\n    };\n    return LangJa;\n}(wordlist_1.Wordlist));\nvar langJa = new LangJa();\nexports.langJa = langJa;\nwordlist_1.Wordlist.register(langJa);\n//# sourceMappingURL=lang-ja.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ja.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ko.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ko.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langKo = void 0;\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar data = [\n    \"OYAa\",\n    \"ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8\",\n    \"ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6\",\n    \"ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv\",\n    \"AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo\",\n    \"AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg\",\n    \"HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb\",\n    \"AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl\"\n];\nvar codes = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\";\nfunction getHangul(code) {\n    if (code >= 40) {\n        code = code + 168 - 40;\n    }\n    else if (code >= 19) {\n        code = code + 97 - 19;\n    }\n    return (0, strings_1.toUtf8String)([225, (code >> 6) + 132, (code & 0x3f) + 128]);\n}\nvar wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = [];\n    data.forEach(function (data, length) {\n        length += 4;\n        for (var i = 0; i < data.length; i += length) {\n            var word = \"\";\n            for (var j = 0; j < length; j++) {\n                word += getHangul(codes.indexOf(data[i + j]));\n            }\n            wordlist.push(word);\n        }\n    });\n    wordlist.sort();\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== \"0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for ko (Korean) FAILED\");\n    }\n}\nvar LangKo = /** @class */ (function (_super) {\n    __extends(LangKo, _super);\n    function LangKo() {\n        return _super.call(this, \"ko\") || this;\n    }\n    LangKo.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[index];\n    };\n    LangKo.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    };\n    return LangKo;\n}(wordlist_1.Wordlist));\nvar langKo = new LangKo();\nexports.langKo = langKo;\nwordlist_1.Wordlist.register(langKo);\n//# sourceMappingURL=lang-ko.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ko.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-zh.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-zh.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.langZhTw = exports.langZhCn = void 0;\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nvar wordlist_1 = __webpack_require__(/*! ./wordlist */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\");\nvar data = \"}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH\";\nvar deltaData = \"FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL\";\n// @TODO: Load lazily\nvar wordlist = {\n    zh_cn: null,\n    zh_tw: null\n};\nvar Checks = {\n    zh_cn: \"0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1\",\n    zh_tw: \"0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d\"\n};\nvar codes = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar style = \"~!@#$%^&*_-=[]{}|;:,.()<>?\";\nfunction loadWords(lang) {\n    if (wordlist[lang.locale] !== null) {\n        return;\n    }\n    wordlist[lang.locale] = [];\n    var deltaOffset = 0;\n    for (var i = 0; i < 2048; i++) {\n        var s = style.indexOf(data[i * 3]);\n        var bytes = [\n            228 + (s >> 2),\n            128 + codes.indexOf(data[i * 3 + 1]),\n            128 + codes.indexOf(data[i * 3 + 2]),\n        ];\n        if (lang.locale === \"zh_tw\") {\n            var common = s % 4;\n            for (var i_1 = common; i_1 < 3; i_1++) {\n                bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + ((i_1 == 0) ? 228 : 128);\n            }\n        }\n        wordlist[lang.locale].push((0, strings_1.toUtf8String)(bytes));\n    }\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (wordlist_1.Wordlist.check(lang) !== Checks[lang.locale]) {\n        wordlist[lang.locale] = null;\n        throw new Error(\"BIP39 Wordlist for \" + lang.locale + \" (Chinese) FAILED\");\n    }\n}\nvar LangZh = /** @class */ (function (_super) {\n    __extends(LangZh, _super);\n    function LangZh(country) {\n        return _super.call(this, \"zh_\" + country) || this;\n    }\n    LangZh.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist[this.locale][index];\n    };\n    LangZh.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist[this.locale].indexOf(word);\n    };\n    LangZh.prototype.split = function (mnemonic) {\n        mnemonic = mnemonic.replace(/(?:\\u3000| )+/g, \"\");\n        return mnemonic.split(\"\");\n    };\n    return LangZh;\n}(wordlist_1.Wordlist));\nvar langZhCn = new LangZh(\"cn\");\nexports.langZhCn = langZhCn;\nwordlist_1.Wordlist.register(langZhCn);\nwordlist_1.Wordlist.register(langZhCn, \"zh\");\nvar langZhTw = new LangZh(\"tw\");\nexports.langZhTw = langZhTw;\nwordlist_1.Wordlist.register(langZhTw);\n//# sourceMappingURL=lang-zh.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-zh.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wordlist = exports.logger = void 0;\n// This gets overridden by rollup\nvar exportWordlist = false;\nvar hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib/index.js\");\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/_version.js\");\nexports.logger = new logger_1.Logger(_version_1.version);\nvar Wordlist = /** @class */ (function () {\n    function Wordlist(locale) {\n        var _newTarget = this.constructor;\n        exports.logger.checkAbstract(_newTarget, Wordlist);\n        (0, properties_1.defineReadOnly)(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    Wordlist.prototype.split = function (mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    };\n    // Subclasses may override this\n    Wordlist.prototype.join = function (words) {\n        return words.join(\" \");\n    };\n    Wordlist.check = function (wordlist) {\n        var words = [];\n        for (var i = 0; i < 2048; i++) {\n            var word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return (0, hash_1.id)(words.join(\"\\n\") + \"\\n\");\n    };\n    Wordlist.register = function (lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                var anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        (0, properties_1.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    };\n    return Wordlist;\n}());\nexports.Wordlist = Wordlist;\n//# sourceMappingURL=wordlist.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dvcmRsaXN0cy9saWIvd29yZGxpc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsY0FBYztBQUNqQztBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLGtGQUFxQjtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQyw4RkFBMkI7QUFDdEQsZUFBZSxtQkFBTyxDQUFDLHNGQUF1QjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQyw2R0FBWTtBQUNyQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzL2xpYi93b3JkbGlzdC5qcz83MDA0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xb3JkbGlzdCA9IGV4cG9ydHMubG9nZ2VyID0gdm9pZCAwO1xuLy8gVGhpcyBnZXRzIG92ZXJyaWRkZW4gYnkgcm9sbHVwXG52YXIgZXhwb3J0V29yZGxpc3QgPSBmYWxzZTtcbnZhciBoYXNoXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvaGFzaFwiKTtcbnZhciBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiKTtcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIik7XG52YXIgX3ZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL192ZXJzaW9uXCIpO1xuZXhwb3J0cy5sb2dnZXIgPSBuZXcgbG9nZ2VyXzEuTG9nZ2VyKF92ZXJzaW9uXzEudmVyc2lvbik7XG52YXIgV29yZGxpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV29yZGxpc3QobG9jYWxlKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgZXhwb3J0cy5sb2dnZXIuY2hlY2tBYnN0cmFjdChfbmV3VGFyZ2V0LCBXb3JkbGlzdCk7XG4gICAgICAgICgwLCBwcm9wZXJ0aWVzXzEuZGVmaW5lUmVhZE9ubHkpKHRoaXMsIFwibG9jYWxlXCIsIGxvY2FsZSk7XG4gICAgfVxuICAgIC8vIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXNcbiAgICBXb3JkbGlzdC5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAobW5lbW9uaWMpIHtcbiAgICAgICAgcmV0dXJuIG1uZW1vbmljLnRvTG93ZXJDYXNlKCkuc3BsaXQoLyArL2cpO1xuICAgIH07XG4gICAgLy8gU3ViY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpc1xuICAgIFdvcmRsaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKHdvcmRzKSB7XG4gICAgICAgIHJldHVybiB3b3Jkcy5qb2luKFwiIFwiKTtcbiAgICB9O1xuICAgIFdvcmRsaXN0LmNoZWNrID0gZnVuY3Rpb24gKHdvcmRsaXN0KSB7XG4gICAgICAgIHZhciB3b3JkcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDIwNDg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHdvcmQgPSB3b3JkbGlzdC5nZXRXb3JkKGkpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoaSAhPT0gd29yZGxpc3QuZ2V0V29yZEluZGV4KHdvcmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiMHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmRzLnB1c2god29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBoYXNoXzEuaWQpKHdvcmRzLmpvaW4oXCJcXG5cIikgKyBcIlxcblwiKTtcbiAgICB9O1xuICAgIFdvcmRsaXN0LnJlZ2lzdGVyID0gZnVuY3Rpb24gKGxhbmcsIG5hbWUpIHtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gbGFuZy5sb2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChleHBvcnRXb3JkbGlzdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgYW55R2xvYmFsID0gd2luZG93O1xuICAgICAgICAgICAgICAgIGlmIChhbnlHbG9iYWwuX2V0aGVycyAmJiBhbnlHbG9iYWwuX2V0aGVycy53b3JkbGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbnlHbG9iYWwuX2V0aGVycy53b3JkbGlzdHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBwcm9wZXJ0aWVzXzEuZGVmaW5lUmVhZE9ubHkpKGFueUdsb2JhbC5fZXRoZXJzLndvcmRsaXN0cywgbmFtZSwgbGFuZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gV29yZGxpc3Q7XG59KCkpO1xuZXhwb3J0cy5Xb3JkbGlzdCA9IFdvcmRsaXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlist.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlists.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlists.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wordlists = void 0;\nvar lang_cz_1 = __webpack_require__(/*! ./lang-cz */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-cz.js\");\nvar lang_en_1 = __webpack_require__(/*! ./lang-en */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-en.js\");\nvar lang_es_1 = __webpack_require__(/*! ./lang-es */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-es.js\");\nvar lang_fr_1 = __webpack_require__(/*! ./lang-fr */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-fr.js\");\nvar lang_ja_1 = __webpack_require__(/*! ./lang-ja */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ja.js\");\nvar lang_ko_1 = __webpack_require__(/*! ./lang-ko */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-ko.js\");\nvar lang_it_1 = __webpack_require__(/*! ./lang-it */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-it.js\");\nvar lang_zh_1 = __webpack_require__(/*! ./lang-zh */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/lang-zh.js\");\nexports.wordlists = {\n    cz: lang_cz_1.langCz,\n    en: lang_en_1.langEn,\n    es: lang_es_1.langEs,\n    fr: lang_fr_1.langFr,\n    it: lang_it_1.langIt,\n    ja: lang_ja_1.langJa,\n    ko: lang_ko_1.langKo,\n    zh: lang_zh_1.langZhCn,\n    zh_cn: lang_zh_1.langZhCn,\n    zh_tw: lang_zh_1.langZhTw\n};\n//# sourceMappingURL=wordlists.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dvcmRsaXN0cy9saWIvd29yZGxpc3RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyR0FBVztBQUNuQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzL2xpYi93b3JkbGlzdHMuanM/ZDY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud29yZGxpc3RzID0gdm9pZCAwO1xudmFyIGxhbmdfY3pfMSA9IHJlcXVpcmUoXCIuL2xhbmctY3pcIik7XG52YXIgbGFuZ19lbl8xID0gcmVxdWlyZShcIi4vbGFuZy1lblwiKTtcbnZhciBsYW5nX2VzXzEgPSByZXF1aXJlKFwiLi9sYW5nLWVzXCIpO1xudmFyIGxhbmdfZnJfMSA9IHJlcXVpcmUoXCIuL2xhbmctZnJcIik7XG52YXIgbGFuZ19qYV8xID0gcmVxdWlyZShcIi4vbGFuZy1qYVwiKTtcbnZhciBsYW5nX2tvXzEgPSByZXF1aXJlKFwiLi9sYW5nLWtvXCIpO1xudmFyIGxhbmdfaXRfMSA9IHJlcXVpcmUoXCIuL2xhbmctaXRcIik7XG52YXIgbGFuZ196aF8xID0gcmVxdWlyZShcIi4vbGFuZy16aFwiKTtcbmV4cG9ydHMud29yZGxpc3RzID0ge1xuICAgIGN6OiBsYW5nX2N6XzEubGFuZ0N6LFxuICAgIGVuOiBsYW5nX2VuXzEubGFuZ0VuLFxuICAgIGVzOiBsYW5nX2VzXzEubGFuZ0VzLFxuICAgIGZyOiBsYW5nX2ZyXzEubGFuZ0ZyLFxuICAgIGl0OiBsYW5nX2l0XzEubGFuZ0l0LFxuICAgIGphOiBsYW5nX2phXzEubGFuZ0phLFxuICAgIGtvOiBsYW5nX2tvXzEubGFuZ0tvLFxuICAgIHpoOiBsYW5nX3poXzEubGFuZ1poQ24sXG4gICAgemhfY246IGxhbmdfemhfMS5sYW5nWmhDbixcbiAgICB6aF90dzogbGFuZ196aF8xLmxhbmdaaFR3XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3RzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/wordlists.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/aes-js/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/aes-js/index.js ***!
  \******************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n(function(root) {\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (true) {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n\n\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/aes-js/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/_version.js":
/*!*************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/ethers/lib/_version.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"ethers/5.7.2\";\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIvX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIvX3ZlcnNpb24uanM/ZWE0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9IFwiZXRoZXJzLzUuNy4yXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/ethers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/ethers/lib/ethers.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;\nvar contracts_1 = __webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/contracts/lib/index.js\");\nObject.defineProperty(exports, \"BaseContract\", ({ enumerable: true, get: function () { return contracts_1.BaseContract; } }));\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return contracts_1.Contract; } }));\nObject.defineProperty(exports, \"ContractFactory\", ({ enumerable: true, get: function () { return contracts_1.ContractFactory; } }));\nvar bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib/index.js\");\nObject.defineProperty(exports, \"BigNumber\", ({ enumerable: true, get: function () { return bignumber_1.BigNumber; } }));\nObject.defineProperty(exports, \"FixedNumber\", ({ enumerable: true, get: function () { return bignumber_1.FixedNumber; } }));\nvar abstract_signer_1 = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(ssr)/./node_modules/@ethersproject/abstract-signer/lib/index.js\");\nObject.defineProperty(exports, \"Signer\", ({ enumerable: true, get: function () { return abstract_signer_1.Signer; } }));\nObject.defineProperty(exports, \"VoidSigner\", ({ enumerable: true, get: function () { return abstract_signer_1.VoidSigner; } }));\nvar wallet_1 = __webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/index.js\");\nObject.defineProperty(exports, \"Wallet\", ({ enumerable: true, get: function () { return wallet_1.Wallet; } }));\nvar constants = __importStar(__webpack_require__(/*! @ethersproject/constants */ \"(ssr)/./node_modules/@ethersproject/constants/lib/index.js\"));\nexports.constants = constants;\nvar providers = __importStar(__webpack_require__(/*! @ethersproject/providers */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/index.js\"));\nexports.providers = providers;\nvar providers_1 = __webpack_require__(/*! @ethersproject/providers */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/providers/lib/index.js\");\nObject.defineProperty(exports, \"getDefaultProvider\", ({ enumerable: true, get: function () { return providers_1.getDefaultProvider; } }));\nvar wordlists_1 = __webpack_require__(/*! @ethersproject/wordlists */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wordlists/lib/index.js\");\nObject.defineProperty(exports, \"Wordlist\", ({ enumerable: true, get: function () { return wordlists_1.Wordlist; } }));\nObject.defineProperty(exports, \"wordlists\", ({ enumerable: true, get: function () { return wordlists_1.wordlists; } }));\nvar utils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/utils.js\"));\nexports.utils = utils;\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nObject.defineProperty(exports, \"errors\", ({ enumerable: true, get: function () { return logger_1.ErrorCode; } }));\n////////////////////////\n// Compile-Time Constants\n// This is generated by \"npm run dist\"\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/_version.js\");\nObject.defineProperty(exports, \"version\", ({ enumerable: true, get: function () { return _version_1.version; } }));\nvar logger = new logger_1.Logger(_version_1.version);\nexports.logger = logger;\n//# sourceMappingURL=ethers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIvZXRoZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLGlCQUFpQixHQUFHLGFBQWEsR0FBRyxjQUFjLEdBQUcsY0FBYyxHQUFHLGlCQUFpQixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLHVCQUF1QixHQUFHLGdCQUFnQixHQUFHLG9CQUFvQixHQUFHLGlCQUFpQixHQUFHLDBCQUEwQixHQUFHLGtCQUFrQixHQUFHLGNBQWMsR0FBRyxjQUFjO0FBQ2xWLGtCQUFrQixtQkFBTyxDQUFDLHdIQUEwQjtBQUNwRCxnREFBK0MsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDM0gsNENBQTJDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ25ILG1EQUFrRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNqSSxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDcEQsNkNBQTRDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3JILCtDQUE4QyxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUN6SCx3QkFBd0IsbUJBQU8sQ0FBQyx3R0FBZ0M7QUFDaEUsMENBQXlDLEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQ3JILDhDQUE2QyxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUM3SCxlQUFlLG1CQUFPLENBQUMsa0hBQXVCO0FBQzlDLDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1Ryw2QkFBNkIsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDL0QsaUJBQWlCO0FBQ2pCLDZCQUE2QixtQkFBTyxDQUFDLHdIQUEwQjtBQUMvRCxpQkFBaUI7QUFDakIsa0JBQWtCLG1CQUFPLENBQUMsd0hBQTBCO0FBQ3BELHNEQUFxRCxFQUFFLHFDQUFxQywwQ0FBMEMsRUFBQztBQUN2SSxrQkFBa0IsbUJBQU8sQ0FBQyx3SEFBMEI7QUFDcEQsNENBQTJDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ25ILDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNySCx5QkFBeUIsbUJBQU8sQ0FBQyxxRkFBUztBQUMxQyxhQUFhO0FBQ2IsZUFBZSxtQkFBTyxDQUFDLHNGQUF1QjtBQUM5QywwQ0FBeUMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDL0c7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsMkZBQVk7QUFDckMsMkNBQTBDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ2hIO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi9ldGhlcnMuanM/N2Q4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xb3JkbGlzdCA9IGV4cG9ydHMudmVyc2lvbiA9IGV4cG9ydHMud29yZGxpc3RzID0gZXhwb3J0cy51dGlscyA9IGV4cG9ydHMubG9nZ2VyID0gZXhwb3J0cy5lcnJvcnMgPSBleHBvcnRzLmNvbnN0YW50cyA9IGV4cG9ydHMuRml4ZWROdW1iZXIgPSBleHBvcnRzLkJpZ051bWJlciA9IGV4cG9ydHMuQ29udHJhY3RGYWN0b3J5ID0gZXhwb3J0cy5Db250cmFjdCA9IGV4cG9ydHMuQmFzZUNvbnRyYWN0ID0gZXhwb3J0cy5wcm92aWRlcnMgPSBleHBvcnRzLmdldERlZmF1bHRQcm92aWRlciA9IGV4cG9ydHMuVm9pZFNpZ25lciA9IGV4cG9ydHMuV2FsbGV0ID0gZXhwb3J0cy5TaWduZXIgPSB2b2lkIDA7XG52YXIgY29udHJhY3RzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvY29udHJhY3RzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmFzZUNvbnRyYWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cmFjdHNfMS5CYXNlQ29udHJhY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250cmFjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29udHJhY3RzXzEuQ29udHJhY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250cmFjdEZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyYWN0c18xLkNvbnRyYWN0RmFjdG9yeTsgfSB9KTtcbnZhciBiaWdudW1iZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdOdW1iZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ251bWJlcl8xLkJpZ051bWJlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZpeGVkTnVtYmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaWdudW1iZXJfMS5GaXhlZE51bWJlcjsgfSB9KTtcbnZhciBhYnN0cmFjdF9zaWduZXJfMSA9IHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFic3RyYWN0X3NpZ25lcl8xLlNpZ25lcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZvaWRTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFic3RyYWN0X3NpZ25lcl8xLlZvaWRTaWduZXI7IH0gfSk7XG52YXIgd2FsbGV0XzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qvd2FsbGV0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2FsbGV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3YWxsZXRfMS5XYWxsZXQ7IH0gfSk7XG52YXIgY29uc3RhbnRzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIikpO1xuZXhwb3J0cy5jb25zdGFudHMgPSBjb25zdGFudHM7XG52YXIgcHJvdmlkZXJzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIikpO1xuZXhwb3J0cy5wcm92aWRlcnMgPSBwcm92aWRlcnM7XG52YXIgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RGVmYXVsdFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcnNfMS5nZXREZWZhdWx0UHJvdmlkZXI7IH0gfSk7XG52YXIgd29yZGxpc3RzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29yZGxpc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdvcmRsaXN0c18xLldvcmRsaXN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid29yZGxpc3RzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3b3JkbGlzdHNfMS53b3JkbGlzdHM7IH0gfSk7XG52YXIgdXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIikpO1xuZXhwb3J0cy51dGlscyA9IHV0aWxzO1xudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVycm9yc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9nZ2VyXzEuRXJyb3JDb2RlOyB9IH0pO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb21waWxlLVRpbWUgQ29uc3RhbnRzXG4vLyBUaGlzIGlzIGdlbmVyYXRlZCBieSBcIm5wbSBydW4gZGlzdFwiXG52YXIgX3ZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL192ZXJzaW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmVyc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3ZlcnNpb25fMS52ZXJzaW9uOyB9IH0pO1xudmFyIGxvZ2dlciA9IG5ldyBsb2dnZXJfMS5Mb2dnZXIoX3ZlcnNpb25fMS52ZXJzaW9uKTtcbmV4cG9ydHMubG9nZ2VyID0gbG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRoZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/ethers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/ethers/lib/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\nvar ethers = __importStar(__webpack_require__(/*! ./ethers */ \"(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/ethers.js\"));\nexports.ethers = ethers;\ntry {\n    var anyGlobal = window;\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n}\ncatch (error) { }\nvar ethers_1 = __webpack_require__(/*! ./ethers */ \"(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/ethers.js\");\nObject.defineProperty(exports, \"Signer\", ({ enumerable: true, get: function () { return ethers_1.Signer; } }));\nObject.defineProperty(exports, \"Wallet\", ({ enumerable: true, get: function () { return ethers_1.Wallet; } }));\nObject.defineProperty(exports, \"VoidSigner\", ({ enumerable: true, get: function () { return ethers_1.VoidSigner; } }));\nObject.defineProperty(exports, \"getDefaultProvider\", ({ enumerable: true, get: function () { return ethers_1.getDefaultProvider; } }));\nObject.defineProperty(exports, \"providers\", ({ enumerable: true, get: function () { return ethers_1.providers; } }));\nObject.defineProperty(exports, \"BaseContract\", ({ enumerable: true, get: function () { return ethers_1.BaseContract; } }));\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return ethers_1.Contract; } }));\nObject.defineProperty(exports, \"ContractFactory\", ({ enumerable: true, get: function () { return ethers_1.ContractFactory; } }));\nObject.defineProperty(exports, \"BigNumber\", ({ enumerable: true, get: function () { return ethers_1.BigNumber; } }));\nObject.defineProperty(exports, \"FixedNumber\", ({ enumerable: true, get: function () { return ethers_1.FixedNumber; } }));\nObject.defineProperty(exports, \"constants\", ({ enumerable: true, get: function () { return ethers_1.constants; } }));\nObject.defineProperty(exports, \"errors\", ({ enumerable: true, get: function () { return ethers_1.errors; } }));\nObject.defineProperty(exports, \"logger\", ({ enumerable: true, get: function () { return ethers_1.logger; } }));\nObject.defineProperty(exports, \"utils\", ({ enumerable: true, get: function () { return ethers_1.utils; } }));\nObject.defineProperty(exports, \"wordlists\", ({ enumerable: true, get: function () { return ethers_1.wordlists; } }));\n////////////////////////\n// Compile-Time Constants\nObject.defineProperty(exports, \"version\", ({ enumerable: true, get: function () { return ethers_1.version; } }));\nObject.defineProperty(exports, \"Wordlist\", ({ enumerable: true, get: function () { return ethers_1.Wordlist; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxlQUFlLEdBQUcsaUJBQWlCLEdBQUcsYUFBYSxHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQUcsaUJBQWlCLEdBQUcsdUJBQXVCLEdBQUcsZ0JBQWdCLEdBQUcsb0JBQW9CLEdBQUcsaUJBQWlCLEdBQUcsMEJBQTBCLEdBQUcsa0JBQWtCLEdBQUcsY0FBYyxHQUFHLGNBQWMsR0FBRyxjQUFjO0FBQ25XO0FBQ0EsMEJBQTBCLG1CQUFPLENBQUMsdUZBQVU7QUFDNUMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHVGQUFVO0FBQ2pDLDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1RywwQ0FBeUMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUM7QUFDNUcsOENBQTZDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ3BILHNEQUFxRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNwSSw2Q0FBNEMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDbEgsZ0RBQStDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3hILDRDQUEyQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUNoSCxtREFBa0QsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDOUgsNkNBQTRDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ2xILCtDQUE4QyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN0SCw2Q0FBNEMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDbEgsMENBQXlDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzVHLDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1Ryx5Q0FBd0MsRUFBRSxxQ0FBcUMsMEJBQTBCLEVBQUM7QUFDMUcsNkNBQTRDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ2xIO0FBQ0E7QUFDQSwyQ0FBMEMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDOUcsNENBQTJDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2hIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi9pbmRleC5qcz8xMWZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldvcmRsaXN0ID0gZXhwb3J0cy52ZXJzaW9uID0gZXhwb3J0cy53b3JkbGlzdHMgPSBleHBvcnRzLnV0aWxzID0gZXhwb3J0cy5sb2dnZXIgPSBleHBvcnRzLmVycm9ycyA9IGV4cG9ydHMuY29uc3RhbnRzID0gZXhwb3J0cy5GaXhlZE51bWJlciA9IGV4cG9ydHMuQmlnTnVtYmVyID0gZXhwb3J0cy5Db250cmFjdEZhY3RvcnkgPSBleHBvcnRzLkNvbnRyYWN0ID0gZXhwb3J0cy5CYXNlQ29udHJhY3QgPSBleHBvcnRzLnByb3ZpZGVycyA9IGV4cG9ydHMuZ2V0RGVmYXVsdFByb3ZpZGVyID0gZXhwb3J0cy5Wb2lkU2lnbmVyID0gZXhwb3J0cy5XYWxsZXQgPSBleHBvcnRzLlNpZ25lciA9IGV4cG9ydHMuZXRoZXJzID0gdm9pZCAwO1xuLy8gVG8gbW9kaWZ5IHRoaXMgZmlsZSwgeW91IG11c3QgdXBkYXRlIC4vbWlzYy9hZG1pbi9saWIvY21kcy91cGRhdGUtZXhwb3J0cy5qc1xudmFyIGV0aGVycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9ldGhlcnNcIikpO1xuZXhwb3J0cy5ldGhlcnMgPSBldGhlcnM7XG50cnkge1xuICAgIHZhciBhbnlHbG9iYWwgPSB3aW5kb3c7XG4gICAgaWYgKGFueUdsb2JhbC5fZXRoZXJzID09IG51bGwpIHtcbiAgICAgICAgYW55R2xvYmFsLl9ldGhlcnMgPSBldGhlcnM7XG4gICAgfVxufVxuY2F0Y2ggKGVycm9yKSB7IH1cbnZhciBldGhlcnNfMSA9IHJlcXVpcmUoXCIuL2V0aGVyc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXRoZXJzXzEuU2lnbmVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2FsbGV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS5XYWxsZXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWb2lkU2lnbmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS5Wb2lkU2lnbmVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RGVmYXVsdFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS5nZXREZWZhdWx0UHJvdmlkZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwcm92aWRlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV0aGVyc18xLnByb3ZpZGVyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJhc2VDb250cmFjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXRoZXJzXzEuQmFzZUNvbnRyYWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV0aGVyc18xLkNvbnRyYWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3RGYWN0b3J5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS5Db250cmFjdEZhY3Rvcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdOdW1iZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV0aGVyc18xLkJpZ051bWJlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZpeGVkTnVtYmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS5GaXhlZE51bWJlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbnN0YW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXRoZXJzXzEuY29uc3RhbnRzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXJyb3JzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS5lcnJvcnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2dnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV0aGVyc18xLmxvZ2dlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInV0aWxzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS51dGlsczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndvcmRsaXN0c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXRoZXJzXzEud29yZGxpc3RzOyB9IH0pO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb21waWxlLVRpbWUgQ29uc3RhbnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2ZXJzaW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldGhlcnNfMS52ZXJzaW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29yZGxpc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV0aGVyc18xLldvcmRsaXN0OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/ethers/lib/utils.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;\nexports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;\nvar abi_1 = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/abi/lib/index.js\");\nObject.defineProperty(exports, \"AbiCoder\", ({ enumerable: true, get: function () { return abi_1.AbiCoder; } }));\nObject.defineProperty(exports, \"checkResultErrors\", ({ enumerable: true, get: function () { return abi_1.checkResultErrors; } }));\nObject.defineProperty(exports, \"ConstructorFragment\", ({ enumerable: true, get: function () { return abi_1.ConstructorFragment; } }));\nObject.defineProperty(exports, \"defaultAbiCoder\", ({ enumerable: true, get: function () { return abi_1.defaultAbiCoder; } }));\nObject.defineProperty(exports, \"ErrorFragment\", ({ enumerable: true, get: function () { return abi_1.ErrorFragment; } }));\nObject.defineProperty(exports, \"EventFragment\", ({ enumerable: true, get: function () { return abi_1.EventFragment; } }));\nObject.defineProperty(exports, \"FormatTypes\", ({ enumerable: true, get: function () { return abi_1.FormatTypes; } }));\nObject.defineProperty(exports, \"Fragment\", ({ enumerable: true, get: function () { return abi_1.Fragment; } }));\nObject.defineProperty(exports, \"FunctionFragment\", ({ enumerable: true, get: function () { return abi_1.FunctionFragment; } }));\nObject.defineProperty(exports, \"Indexed\", ({ enumerable: true, get: function () { return abi_1.Indexed; } }));\nObject.defineProperty(exports, \"Interface\", ({ enumerable: true, get: function () { return abi_1.Interface; } }));\nObject.defineProperty(exports, \"LogDescription\", ({ enumerable: true, get: function () { return abi_1.LogDescription; } }));\nObject.defineProperty(exports, \"ParamType\", ({ enumerable: true, get: function () { return abi_1.ParamType; } }));\nObject.defineProperty(exports, \"TransactionDescription\", ({ enumerable: true, get: function () { return abi_1.TransactionDescription; } }));\nvar address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib/index.js\");\nObject.defineProperty(exports, \"getAddress\", ({ enumerable: true, get: function () { return address_1.getAddress; } }));\nObject.defineProperty(exports, \"getCreate2Address\", ({ enumerable: true, get: function () { return address_1.getCreate2Address; } }));\nObject.defineProperty(exports, \"getContractAddress\", ({ enumerable: true, get: function () { return address_1.getContractAddress; } }));\nObject.defineProperty(exports, \"getIcapAddress\", ({ enumerable: true, get: function () { return address_1.getIcapAddress; } }));\nObject.defineProperty(exports, \"isAddress\", ({ enumerable: true, get: function () { return address_1.isAddress; } }));\nvar base64 = __importStar(__webpack_require__(/*! @ethersproject/base64 */ \"(ssr)/./node_modules/@ethersproject/base64/lib/index.js\"));\nexports.base64 = base64;\nvar basex_1 = __webpack_require__(/*! @ethersproject/basex */ \"(ssr)/./node_modules/@ethersproject/basex/lib/index.js\");\nObject.defineProperty(exports, \"base58\", ({ enumerable: true, get: function () { return basex_1.Base58; } }));\nvar bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib/index.js\");\nObject.defineProperty(exports, \"arrayify\", ({ enumerable: true, get: function () { return bytes_1.arrayify; } }));\nObject.defineProperty(exports, \"concat\", ({ enumerable: true, get: function () { return bytes_1.concat; } }));\nObject.defineProperty(exports, \"hexConcat\", ({ enumerable: true, get: function () { return bytes_1.hexConcat; } }));\nObject.defineProperty(exports, \"hexDataSlice\", ({ enumerable: true, get: function () { return bytes_1.hexDataSlice; } }));\nObject.defineProperty(exports, \"hexDataLength\", ({ enumerable: true, get: function () { return bytes_1.hexDataLength; } }));\nObject.defineProperty(exports, \"hexlify\", ({ enumerable: true, get: function () { return bytes_1.hexlify; } }));\nObject.defineProperty(exports, \"hexStripZeros\", ({ enumerable: true, get: function () { return bytes_1.hexStripZeros; } }));\nObject.defineProperty(exports, \"hexValue\", ({ enumerable: true, get: function () { return bytes_1.hexValue; } }));\nObject.defineProperty(exports, \"hexZeroPad\", ({ enumerable: true, get: function () { return bytes_1.hexZeroPad; } }));\nObject.defineProperty(exports, \"isBytes\", ({ enumerable: true, get: function () { return bytes_1.isBytes; } }));\nObject.defineProperty(exports, \"isBytesLike\", ({ enumerable: true, get: function () { return bytes_1.isBytesLike; } }));\nObject.defineProperty(exports, \"isHexString\", ({ enumerable: true, get: function () { return bytes_1.isHexString; } }));\nObject.defineProperty(exports, \"joinSignature\", ({ enumerable: true, get: function () { return bytes_1.joinSignature; } }));\nObject.defineProperty(exports, \"zeroPad\", ({ enumerable: true, get: function () { return bytes_1.zeroPad; } }));\nObject.defineProperty(exports, \"splitSignature\", ({ enumerable: true, get: function () { return bytes_1.splitSignature; } }));\nObject.defineProperty(exports, \"stripZeros\", ({ enumerable: true, get: function () { return bytes_1.stripZeros; } }));\nvar hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib/index.js\");\nObject.defineProperty(exports, \"_TypedDataEncoder\", ({ enumerable: true, get: function () { return hash_1._TypedDataEncoder; } }));\nObject.defineProperty(exports, \"dnsEncode\", ({ enumerable: true, get: function () { return hash_1.dnsEncode; } }));\nObject.defineProperty(exports, \"hashMessage\", ({ enumerable: true, get: function () { return hash_1.hashMessage; } }));\nObject.defineProperty(exports, \"id\", ({ enumerable: true, get: function () { return hash_1.id; } }));\nObject.defineProperty(exports, \"isValidName\", ({ enumerable: true, get: function () { return hash_1.isValidName; } }));\nObject.defineProperty(exports, \"namehash\", ({ enumerable: true, get: function () { return hash_1.namehash; } }));\nvar hdnode_1 = __webpack_require__(/*! @ethersproject/hdnode */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/hdnode/lib/index.js\");\nObject.defineProperty(exports, \"defaultPath\", ({ enumerable: true, get: function () { return hdnode_1.defaultPath; } }));\nObject.defineProperty(exports, \"entropyToMnemonic\", ({ enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } }));\nObject.defineProperty(exports, \"getAccountPath\", ({ enumerable: true, get: function () { return hdnode_1.getAccountPath; } }));\nObject.defineProperty(exports, \"HDNode\", ({ enumerable: true, get: function () { return hdnode_1.HDNode; } }));\nObject.defineProperty(exports, \"isValidMnemonic\", ({ enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } }));\nObject.defineProperty(exports, \"mnemonicToEntropy\", ({ enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } }));\nObject.defineProperty(exports, \"mnemonicToSeed\", ({ enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } }));\nvar json_wallets_1 = __webpack_require__(/*! @ethersproject/json-wallets */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/json-wallets/lib/index.js\");\nObject.defineProperty(exports, \"getJsonWalletAddress\", ({ enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } }));\nvar keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib/index.js\");\nObject.defineProperty(exports, \"keccak256\", ({ enumerable: true, get: function () { return keccak256_1.keccak256; } }));\nvar logger_1 = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/@ethersproject/logger/lib/index.js\");\nObject.defineProperty(exports, \"Logger\", ({ enumerable: true, get: function () { return logger_1.Logger; } }));\nvar sha2_1 = __webpack_require__(/*! @ethersproject/sha2 */ \"(ssr)/./node_modules/@ethersproject/sha2/lib/index.js\");\nObject.defineProperty(exports, \"computeHmac\", ({ enumerable: true, get: function () { return sha2_1.computeHmac; } }));\nObject.defineProperty(exports, \"ripemd160\", ({ enumerable: true, get: function () { return sha2_1.ripemd160; } }));\nObject.defineProperty(exports, \"sha256\", ({ enumerable: true, get: function () { return sha2_1.sha256; } }));\nObject.defineProperty(exports, \"sha512\", ({ enumerable: true, get: function () { return sha2_1.sha512; } }));\nvar solidity_1 = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/solidity/lib/index.js\");\nObject.defineProperty(exports, \"solidityKeccak256\", ({ enumerable: true, get: function () { return solidity_1.keccak256; } }));\nObject.defineProperty(exports, \"solidityPack\", ({ enumerable: true, get: function () { return solidity_1.pack; } }));\nObject.defineProperty(exports, \"soliditySha256\", ({ enumerable: true, get: function () { return solidity_1.sha256; } }));\nvar random_1 = __webpack_require__(/*! @ethersproject/random */ \"(ssr)/./node_modules/@ethersproject/random/lib/index.js\");\nObject.defineProperty(exports, \"randomBytes\", ({ enumerable: true, get: function () { return random_1.randomBytes; } }));\nObject.defineProperty(exports, \"shuffled\", ({ enumerable: true, get: function () { return random_1.shuffled; } }));\nvar properties_1 = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/@ethersproject/properties/lib/index.js\");\nObject.defineProperty(exports, \"checkProperties\", ({ enumerable: true, get: function () { return properties_1.checkProperties; } }));\nObject.defineProperty(exports, \"deepCopy\", ({ enumerable: true, get: function () { return properties_1.deepCopy; } }));\nObject.defineProperty(exports, \"defineReadOnly\", ({ enumerable: true, get: function () { return properties_1.defineReadOnly; } }));\nObject.defineProperty(exports, \"getStatic\", ({ enumerable: true, get: function () { return properties_1.getStatic; } }));\nObject.defineProperty(exports, \"resolveProperties\", ({ enumerable: true, get: function () { return properties_1.resolveProperties; } }));\nObject.defineProperty(exports, \"shallowCopy\", ({ enumerable: true, get: function () { return properties_1.shallowCopy; } }));\nvar RLP = __importStar(__webpack_require__(/*! @ethersproject/rlp */ \"(ssr)/./node_modules/@ethersproject/rlp/lib/index.js\"));\nexports.RLP = RLP;\nvar signing_key_1 = __webpack_require__(/*! @ethersproject/signing-key */ \"(ssr)/./node_modules/@ethersproject/signing-key/lib/index.js\");\nObject.defineProperty(exports, \"computePublicKey\", ({ enumerable: true, get: function () { return signing_key_1.computePublicKey; } }));\nObject.defineProperty(exports, \"recoverPublicKey\", ({ enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } }));\nObject.defineProperty(exports, \"SigningKey\", ({ enumerable: true, get: function () { return signing_key_1.SigningKey; } }));\nvar strings_1 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nObject.defineProperty(exports, \"formatBytes32String\", ({ enumerable: true, get: function () { return strings_1.formatBytes32String; } }));\nObject.defineProperty(exports, \"nameprep\", ({ enumerable: true, get: function () { return strings_1.nameprep; } }));\nObject.defineProperty(exports, \"parseBytes32String\", ({ enumerable: true, get: function () { return strings_1.parseBytes32String; } }));\nObject.defineProperty(exports, \"_toEscapedUtf8String\", ({ enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } }));\nObject.defineProperty(exports, \"toUtf8Bytes\", ({ enumerable: true, get: function () { return strings_1.toUtf8Bytes; } }));\nObject.defineProperty(exports, \"toUtf8CodePoints\", ({ enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } }));\nObject.defineProperty(exports, \"toUtf8String\", ({ enumerable: true, get: function () { return strings_1.toUtf8String; } }));\nObject.defineProperty(exports, \"Utf8ErrorFuncs\", ({ enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } }));\nvar transactions_1 = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/@ethersproject/transactions/lib/index.js\");\nObject.defineProperty(exports, \"accessListify\", ({ enumerable: true, get: function () { return transactions_1.accessListify; } }));\nObject.defineProperty(exports, \"computeAddress\", ({ enumerable: true, get: function () { return transactions_1.computeAddress; } }));\nObject.defineProperty(exports, \"parseTransaction\", ({ enumerable: true, get: function () { return transactions_1.parse; } }));\nObject.defineProperty(exports, \"recoverAddress\", ({ enumerable: true, get: function () { return transactions_1.recoverAddress; } }));\nObject.defineProperty(exports, \"serializeTransaction\", ({ enumerable: true, get: function () { return transactions_1.serialize; } }));\nObject.defineProperty(exports, \"TransactionTypes\", ({ enumerable: true, get: function () { return transactions_1.TransactionTypes; } }));\nvar units_1 = __webpack_require__(/*! @ethersproject/units */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/units/lib/index.js\");\nObject.defineProperty(exports, \"commify\", ({ enumerable: true, get: function () { return units_1.commify; } }));\nObject.defineProperty(exports, \"formatEther\", ({ enumerable: true, get: function () { return units_1.formatEther; } }));\nObject.defineProperty(exports, \"parseEther\", ({ enumerable: true, get: function () { return units_1.parseEther; } }));\nObject.defineProperty(exports, \"formatUnits\", ({ enumerable: true, get: function () { return units_1.formatUnits; } }));\nObject.defineProperty(exports, \"parseUnits\", ({ enumerable: true, get: function () { return units_1.parseUnits; } }));\nvar wallet_1 = __webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/near-social-vm/node_modules/@ethersproject/wallet/lib/index.js\");\nObject.defineProperty(exports, \"verifyMessage\", ({ enumerable: true, get: function () { return wallet_1.verifyMessage; } }));\nObject.defineProperty(exports, \"verifyTypedData\", ({ enumerable: true, get: function () { return wallet_1.verifyTypedData; } }));\nvar web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib/index.js\");\nObject.defineProperty(exports, \"_fetchData\", ({ enumerable: true, get: function () { return web_1._fetchData; } }));\nObject.defineProperty(exports, \"fetchJson\", ({ enumerable: true, get: function () { return web_1.fetchJson; } }));\nObject.defineProperty(exports, \"poll\", ({ enumerable: true, get: function () { return web_1.poll; } }));\n////////////////////////\n// Enums\nvar sha2_2 = __webpack_require__(/*! @ethersproject/sha2 */ \"(ssr)/./node_modules/@ethersproject/sha2/lib/index.js\");\nObject.defineProperty(exports, \"SupportedAlgorithm\", ({ enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } }));\nvar strings_2 = __webpack_require__(/*! @ethersproject/strings */ \"(ssr)/./node_modules/@ethersproject/strings/lib/index.js\");\nObject.defineProperty(exports, \"UnicodeNormalizationForm\", ({ enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } }));\nObject.defineProperty(exports, \"Utf8ErrorReason\", ({ enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } }));\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/ethers/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingleItemContainer.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingleItemContainer.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.SingleItemContainer = void 0;\n\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar SingleItemContainer = function SingleItemContainer(_ref) {\n  var initValue = _ref.initValue,\n      useHookBody = _ref.useHookBody,\n      applyStateChange = _ref.applyStateChange;\n  var lastState = (0, _react.useRef)(initValue);\n\n  if (typeof useHookBody !== 'function') {\n    throw new Error(\"function expected as hook body parameter. got \" + typeof useHookBody);\n  }\n\n  var val = useHookBody(); //useLayoutEffect is safe from SSR perspective because SingleItemContainer should never be rendered on server\n\n  (0, _react.useLayoutEffect)(function () {\n    if (lastState.current !== val) {\n      lastState.current = val;\n      applyStateChange(val);\n    }\n  }, [applyStateChange, val]);\n  return null;\n};\n\nexports.SingleItemContainer = SingleItemContainer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi9jb21wb25lbnRzL1NpbmdsZUl0ZW1Db250YWluZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLDJCQUEyQjs7QUFFM0IsYUFBYSxtQkFBTyxDQUFDLHdHQUFPOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSwyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9yZWFjdC1zaW5nbGV0b24taG9vay9saWIvY29tcG9uZW50cy9TaW5nbGVJdGVtQ29udGFpbmVyLmpzPzEzODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlNpbmdsZUl0ZW1Db250YWluZXIgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBTaW5nbGVJdGVtQ29udGFpbmVyID0gZnVuY3Rpb24gU2luZ2xlSXRlbUNvbnRhaW5lcihfcmVmKSB7XG4gIHZhciBpbml0VmFsdWUgPSBfcmVmLmluaXRWYWx1ZSxcbiAgICAgIHVzZUhvb2tCb2R5ID0gX3JlZi51c2VIb29rQm9keSxcbiAgICAgIGFwcGx5U3RhdGVDaGFuZ2UgPSBfcmVmLmFwcGx5U3RhdGVDaGFuZ2U7XG4gIHZhciBsYXN0U3RhdGUgPSAoMCwgX3JlYWN0LnVzZVJlZikoaW5pdFZhbHVlKTtcblxuICBpZiAodHlwZW9mIHVzZUhvb2tCb2R5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZnVuY3Rpb24gZXhwZWN0ZWQgYXMgaG9vayBib2R5IHBhcmFtZXRlci4gZ290IFwiICsgdHlwZW9mIHVzZUhvb2tCb2R5KTtcbiAgfVxuXG4gIHZhciB2YWwgPSB1c2VIb29rQm9keSgpOyAvL3VzZUxheW91dEVmZmVjdCBpcyBzYWZlIGZyb20gU1NSIHBlcnNwZWN0aXZlIGJlY2F1c2UgU2luZ2xlSXRlbUNvbnRhaW5lciBzaG91bGQgbmV2ZXIgYmUgcmVuZGVyZWQgb24gc2VydmVyXG5cbiAgKDAsIF9yZWFjdC51c2VMYXlvdXRFZmZlY3QpKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobGFzdFN0YXRlLmN1cnJlbnQgIT09IHZhbCkge1xuICAgICAgbGFzdFN0YXRlLmN1cnJlbnQgPSB2YWw7XG4gICAgICBhcHBseVN0YXRlQ2hhbmdlKHZhbCk7XG4gICAgfVxuICB9LCBbYXBwbHlTdGF0ZUNoYW5nZSwgdmFsXSk7XG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0cy5TaW5nbGVJdGVtQ29udGFpbmVyID0gU2luZ2xlSXRlbUNvbnRhaW5lcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingleItemContainer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingletonHooksContainer.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingletonHooksContainer.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.resetLocalStateForTests = exports.addHook = exports.SingletonHooksContainer = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n\nvar _SingleItemContainer = __webpack_require__(/*! ./SingleItemContainer */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingleItemContainer.js\");\n\nvar _env = __webpack_require__(/*! ../utils/env */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/env.js\");\n\nvar _warning = __webpack_require__(/*! ../utils/warning */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/warning.js\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SingletonHooksContainerMounted = false;\nvar SingletonHooksContainerRendered = false;\nvar SingletonHooksContainerMountedAutomatically = false;\nvar mountQueue = [];\n\nvar mountIntoContainerDefault = function mountIntoContainerDefault(item) {\n  mountQueue.push(item);\n  return function () {\n    throw new Error('Can not unmount container! It is like a bug in react-singleton-hook library, because of unmountIfNoConsumers: true'); // mountQueue = mountQueue.filter(i => i !== item);\n  };\n};\n\nvar mountIntoContainer = mountIntoContainerDefault;\n\nvar SingletonHooksContainer = function SingletonHooksContainer() {\n  SingletonHooksContainerRendered = true;\n  (0, _react.useEffect)(function () {\n    if (SingletonHooksContainerMounted) {\n      (0, _warning.warning)('SingletonHooksContainer is mounted second time. ' + 'You should mount SingletonHooksContainer before any other component and never unmount it.' + 'Alternatively, dont use SingletonHooksContainer it at all, we will handle that for you.');\n    }\n\n    SingletonHooksContainerMounted = true;\n  }, []);\n\n  var _useState = (0, _react.useState)([]),\n      hooks = _useState[0],\n      setHooks = _useState[1];\n\n  (0, _react.useEffect)(function () {\n    mountIntoContainer = function mountIntoContainer(item) {\n      setHooks(function (hooks) {\n        return [].concat(hooks, [item]);\n      });\n      return function () {\n        setHooks(function (hooks) {\n          return hooks.filter(function (i) {\n            return i !== item;\n          });\n        });\n      };\n    };\n\n    setHooks(mountQueue);\n  }, []);\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, hooks.map(function (h, i) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_SingleItemContainer.SingleItemContainer, _extends({}, h, {\n      key: i\n    }));\n  }));\n};\n\nexports.SingletonHooksContainer = SingletonHooksContainer;\n\nvar addHook = function addHook(hook) {\n  if (!SingletonHooksContainerRendered && !SingletonHooksContainerMountedAutomatically) {\n    SingletonHooksContainerMountedAutomatically = true;\n    (0, _env.mount)(SingletonHooksContainer);\n  }\n\n  return mountIntoContainer(hook);\n};\n\nexports.addHook = addHook;\n\nvar resetLocalStateForTests = function resetLocalStateForTests() {\n  SingletonHooksContainerMounted = false;\n  SingletonHooksContainerRendered = false;\n  SingletonHooksContainerMountedAutomatically = false;\n  mountQueue = [];\n  mountIntoContainer = mountIntoContainerDefault;\n};\n\nexports.resetLocalStateForTests = resetLocalStateForTests;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi9jb21wb25lbnRzL1NpbmdsZXRvbkhvb2tzQ29udGFpbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjtBQUNsQiwrQkFBK0IsR0FBRyxlQUFlLEdBQUcsK0JBQStCOztBQUVuRixxQ0FBcUMsbUJBQU8sQ0FBQyx3R0FBTzs7QUFFcEQsMkJBQTJCLG1CQUFPLENBQUMsMElBQXVCOztBQUUxRCxXQUFXLG1CQUFPLENBQUMsNEdBQWM7O0FBRWpDLGVBQWUsbUJBQU8sQ0FBQyxvSEFBa0I7O0FBRXpDLGlEQUFpRCxnREFBZ0QsdUNBQXVDLHNDQUFzQyxvRkFBb0YsNERBQTREOztBQUU5VCxxREFBcUQsNkNBQTZDLGNBQWMsNEVBQTRFLFNBQVMsb0JBQW9CLG1EQUFtRCwrQkFBK0IseUJBQXlCLGlCQUFpQixzRkFBc0YsdUJBQXVCLDJFQUEyRSxxRkFBcUYsc0NBQXNDLDRDQUE0QyxPQUFPLDhCQUE4Qix5QkFBeUIsYUFBYSwwQkFBMEI7O0FBRXp4QixzQkFBc0IsZ0RBQWdELGdCQUFnQixzQkFBc0IsT0FBTywyQkFBMkIsMEJBQTBCLHlEQUF5RCxpQ0FBaUMsa0JBQWtCOztBQUVwUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwySUFBMkk7QUFDM0k7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDZHQUE2RztBQUM3RztBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL25lYXItc29jaWFsLXZtL25vZGVfbW9kdWxlcy9yZWFjdC1zaW5nbGV0b24taG9vay9saWIvY29tcG9uZW50cy9TaW5nbGV0b25Ib29rc0NvbnRhaW5lci5qcz9kYTU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5yZXNldExvY2FsU3RhdGVGb3JUZXN0cyA9IGV4cG9ydHMuYWRkSG9vayA9IGV4cG9ydHMuU2luZ2xldG9uSG9va3NDb250YWluZXIgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1NpbmdsZUl0ZW1Db250YWluZXIgPSByZXF1aXJlKFwiLi9TaW5nbGVJdGVtQ29udGFpbmVyXCIpO1xuXG52YXIgX2VudiA9IHJlcXVpcmUoXCIuLi91dGlscy9lbnZcIik7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoXCIuLi91dGlscy93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgU2luZ2xldG9uSG9va3NDb250YWluZXJNb3VudGVkID0gZmFsc2U7XG52YXIgU2luZ2xldG9uSG9va3NDb250YWluZXJSZW5kZXJlZCA9IGZhbHNlO1xudmFyIFNpbmdsZXRvbkhvb2tzQ29udGFpbmVyTW91bnRlZEF1dG9tYXRpY2FsbHkgPSBmYWxzZTtcbnZhciBtb3VudFF1ZXVlID0gW107XG5cbnZhciBtb3VudEludG9Db250YWluZXJEZWZhdWx0ID0gZnVuY3Rpb24gbW91bnRJbnRvQ29udGFpbmVyRGVmYXVsdChpdGVtKSB7XG4gIG1vdW50UXVldWUucHVzaChpdGVtKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgdW5tb3VudCBjb250YWluZXIhIEl0IGlzIGxpa2UgYSBidWcgaW4gcmVhY3Qtc2luZ2xldG9uLWhvb2sgbGlicmFyeSwgYmVjYXVzZSBvZiB1bm1vdW50SWZOb0NvbnN1bWVyczogdHJ1ZScpOyAvLyBtb3VudFF1ZXVlID0gbW91bnRRdWV1ZS5maWx0ZXIoaSA9PiBpICE9PSBpdGVtKTtcbiAgfTtcbn07XG5cbnZhciBtb3VudEludG9Db250YWluZXIgPSBtb3VudEludG9Db250YWluZXJEZWZhdWx0O1xuXG52YXIgU2luZ2xldG9uSG9va3NDb250YWluZXIgPSBmdW5jdGlvbiBTaW5nbGV0b25Ib29rc0NvbnRhaW5lcigpIHtcbiAgU2luZ2xldG9uSG9va3NDb250YWluZXJSZW5kZXJlZCA9IHRydWU7XG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFNpbmdsZXRvbkhvb2tzQ29udGFpbmVyTW91bnRlZCkge1xuICAgICAgKDAsIF93YXJuaW5nLndhcm5pbmcpKCdTaW5nbGV0b25Ib29rc0NvbnRhaW5lciBpcyBtb3VudGVkIHNlY29uZCB0aW1lLiAnICsgJ1lvdSBzaG91bGQgbW91bnQgU2luZ2xldG9uSG9va3NDb250YWluZXIgYmVmb3JlIGFueSBvdGhlciBjb21wb25lbnQgYW5kIG5ldmVyIHVubW91bnQgaXQuJyArICdBbHRlcm5hdGl2ZWx5LCBkb250IHVzZSBTaW5nbGV0b25Ib29rc0NvbnRhaW5lciBpdCBhdCBhbGwsIHdlIHdpbGwgaGFuZGxlIHRoYXQgZm9yIHlvdS4nKTtcbiAgICB9XG5cbiAgICBTaW5nbGV0b25Ib29rc0NvbnRhaW5lck1vdW50ZWQgPSB0cnVlO1xuICB9LCBbXSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKFtdKSxcbiAgICAgIGhvb2tzID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0SG9va3MgPSBfdXNlU3RhdGVbMV07XG5cbiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHtcbiAgICBtb3VudEludG9Db250YWluZXIgPSBmdW5jdGlvbiBtb3VudEludG9Db250YWluZXIoaXRlbSkge1xuICAgICAgc2V0SG9va3MoZnVuY3Rpb24gKGhvb2tzKSB7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQoaG9va3MsIFtpdGVtXSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldEhvb2tzKGZ1bmN0aW9uIChob29rcykge1xuICAgICAgICAgIHJldHVybiBob29rcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpICE9PSBpdGVtO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHNldEhvb2tzKG1vdW50UXVldWUpO1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdFtcImRlZmF1bHRcIl0uRnJhZ21lbnQsIG51bGwsIGhvb2tzLm1hcChmdW5jdGlvbiAoaCwgaSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9TaW5nbGVJdGVtQ29udGFpbmVyLlNpbmdsZUl0ZW1Db250YWluZXIsIF9leHRlbmRzKHt9LCBoLCB7XG4gICAgICBrZXk6IGlcbiAgICB9KSk7XG4gIH0pKTtcbn07XG5cbmV4cG9ydHMuU2luZ2xldG9uSG9va3NDb250YWluZXIgPSBTaW5nbGV0b25Ib29rc0NvbnRhaW5lcjtcblxudmFyIGFkZEhvb2sgPSBmdW5jdGlvbiBhZGRIb29rKGhvb2spIHtcbiAgaWYgKCFTaW5nbGV0b25Ib29rc0NvbnRhaW5lclJlbmRlcmVkICYmICFTaW5nbGV0b25Ib29rc0NvbnRhaW5lck1vdW50ZWRBdXRvbWF0aWNhbGx5KSB7XG4gICAgU2luZ2xldG9uSG9va3NDb250YWluZXJNb3VudGVkQXV0b21hdGljYWxseSA9IHRydWU7XG4gICAgKDAsIF9lbnYubW91bnQpKFNpbmdsZXRvbkhvb2tzQ29udGFpbmVyKTtcbiAgfVxuXG4gIHJldHVybiBtb3VudEludG9Db250YWluZXIoaG9vayk7XG59O1xuXG5leHBvcnRzLmFkZEhvb2sgPSBhZGRIb29rO1xuXG52YXIgcmVzZXRMb2NhbFN0YXRlRm9yVGVzdHMgPSBmdW5jdGlvbiByZXNldExvY2FsU3RhdGVGb3JUZXN0cygpIHtcbiAgU2luZ2xldG9uSG9va3NDb250YWluZXJNb3VudGVkID0gZmFsc2U7XG4gIFNpbmdsZXRvbkhvb2tzQ29udGFpbmVyUmVuZGVyZWQgPSBmYWxzZTtcbiAgU2luZ2xldG9uSG9va3NDb250YWluZXJNb3VudGVkQXV0b21hdGljYWxseSA9IGZhbHNlO1xuICBtb3VudFF1ZXVlID0gW107XG4gIG1vdW50SW50b0NvbnRhaW5lciA9IG1vdW50SW50b0NvbnRhaW5lckRlZmF1bHQ7XG59O1xuXG5leHBvcnRzLnJlc2V0TG9jYWxTdGF0ZUZvclRlc3RzID0gcmVzZXRMb2NhbFN0YXRlRm9yVGVzdHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingletonHooksContainer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _singletonHook = __webpack_require__(/*! ./singletonHook */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/singletonHook.js\");\n\nexports.singletonHook = _singletonHook.singletonHook;\n\nvar _SingletonHooksContainer = __webpack_require__(/*! ./components/SingletonHooksContainer */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingletonHooksContainer.js\");\n\nexports.SingletonHooksContainer = _SingletonHooksContainer.SingletonHooksContainer;\nvar ReactSingletonHook = {\n  singletonHook: _singletonHook.singletonHook,\n  SingletonHooksContainer: _SingletonHooksContainer.SingletonHooksContainer\n};\nvar _default = ReactSingletonHook;\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsa0JBQWtCOztBQUVsQixxQkFBcUIsbUJBQU8sQ0FBQyxtSEFBaUI7O0FBRTlDLHFCQUFxQjs7QUFFckIsK0JBQStCLG1CQUFPLENBQUMsNkpBQXNDOztBQUU3RSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi9pbmRleC5qcz8zOGIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfc2luZ2xldG9uSG9vayA9IHJlcXVpcmUoXCIuL3NpbmdsZXRvbkhvb2tcIik7XG5cbmV4cG9ydHMuc2luZ2xldG9uSG9vayA9IF9zaW5nbGV0b25Ib29rLnNpbmdsZXRvbkhvb2s7XG5cbnZhciBfU2luZ2xldG9uSG9va3NDb250YWluZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL1NpbmdsZXRvbkhvb2tzQ29udGFpbmVyXCIpO1xuXG5leHBvcnRzLlNpbmdsZXRvbkhvb2tzQ29udGFpbmVyID0gX1NpbmdsZXRvbkhvb2tzQ29udGFpbmVyLlNpbmdsZXRvbkhvb2tzQ29udGFpbmVyO1xudmFyIFJlYWN0U2luZ2xldG9uSG9vayA9IHtcbiAgc2luZ2xldG9uSG9vazogX3NpbmdsZXRvbkhvb2suc2luZ2xldG9uSG9vayxcbiAgU2luZ2xldG9uSG9va3NDb250YWluZXI6IF9TaW5nbGV0b25Ib29rc0NvbnRhaW5lci5TaW5nbGV0b25Ib29rc0NvbnRhaW5lclxufTtcbnZhciBfZGVmYXVsdCA9IFJlYWN0U2luZ2xldG9uSG9vaztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/singletonHook.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/singletonHook.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.singletonHook = void 0;\n\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar _SingletonHooksContainer = __webpack_require__(/*! ./components/SingletonHooksContainer */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/components/SingletonHooksContainer.js\");\n\nvar _env = __webpack_require__(/*! ./utils/env */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/env.js\");\n\nvar singletonHook = function singletonHook(initValue, useHookBody, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var mounted = false;\n  var removeHook = undefined;\n  var initStateCalculated = false;\n  var lastKnownState = undefined;\n  var consumers = [];\n  var _options = options,\n      _options$unmountIfNoC = _options.unmountIfNoConsumers,\n      unmountIfNoConsumers = _options$unmountIfNoC === void 0 ? false : _options$unmountIfNoC;\n\n  var applyStateChange = function applyStateChange(newState) {\n    lastKnownState = newState;\n    (0, _env.batch)(function () {\n      return consumers.forEach(function (c) {\n        return c(newState);\n      });\n    });\n  };\n\n  var stateInitializer = function stateInitializer() {\n    if (!initStateCalculated) {\n      lastKnownState = typeof initValue === 'function' ? initValue() : initValue;\n      initStateCalculated = true;\n    }\n\n    return lastKnownState;\n  };\n\n  return function () {\n    var _useState = (0, _react.useState)(stateInitializer),\n        state = _useState[0],\n        setState = _useState[1];\n\n    (0, _react.useEffect)(function () {\n      if (!mounted) {\n        mounted = true;\n        removeHook = (0, _SingletonHooksContainer.addHook)({\n          initValue: initValue,\n          useHookBody: useHookBody,\n          applyStateChange: applyStateChange\n        });\n      }\n\n      consumers.push(setState);\n\n      if (lastKnownState !== state) {\n        setState(lastKnownState);\n      }\n\n      return function () {\n        consumers.splice(consumers.indexOf(setState), 1);\n\n        if (consumers.length === 0 && unmountIfNoConsumers) {\n          removeHook();\n          mounted = false;\n        }\n      }; // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return state;\n  };\n};\n\nexports.singletonHook = singletonHook;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi9zaW5nbGV0b25Ib29rLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjtBQUNsQixxQkFBcUI7O0FBRXJCLGFBQWEsbUJBQU8sQ0FBQyx3R0FBTzs7QUFFNUIsK0JBQStCLG1CQUFPLENBQUMsNkpBQXNDOztBQUU3RSxXQUFXLG1CQUFPLENBQUMsMkdBQWE7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvcmVhY3Qtc2luZ2xldG9uLWhvb2svbGliL3NpbmdsZXRvbkhvb2suanM/YTZiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuc2luZ2xldG9uSG9vayA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9TaW5nbGV0b25Ib29rc0NvbnRhaW5lciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvU2luZ2xldG9uSG9va3NDb250YWluZXJcIik7XG5cbnZhciBfZW52ID0gcmVxdWlyZShcIi4vdXRpbHMvZW52XCIpO1xuXG52YXIgc2luZ2xldG9uSG9vayA9IGZ1bmN0aW9uIHNpbmdsZXRvbkhvb2soaW5pdFZhbHVlLCB1c2VIb29rQm9keSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIG1vdW50ZWQgPSBmYWxzZTtcbiAgdmFyIHJlbW92ZUhvb2sgPSB1bmRlZmluZWQ7XG4gIHZhciBpbml0U3RhdGVDYWxjdWxhdGVkID0gZmFsc2U7XG4gIHZhciBsYXN0S25vd25TdGF0ZSA9IHVuZGVmaW5lZDtcbiAgdmFyIGNvbnN1bWVycyA9IFtdO1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkdW5tb3VudElmTm9DID0gX29wdGlvbnMudW5tb3VudElmTm9Db25zdW1lcnMsXG4gICAgICB1bm1vdW50SWZOb0NvbnN1bWVycyA9IF9vcHRpb25zJHVubW91bnRJZk5vQyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR1bm1vdW50SWZOb0M7XG5cbiAgdmFyIGFwcGx5U3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiBhcHBseVN0YXRlQ2hhbmdlKG5ld1N0YXRlKSB7XG4gICAgbGFzdEtub3duU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAoMCwgX2Vudi5iYXRjaCkoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNvbnN1bWVycy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBjKG5ld1N0YXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzdGF0ZUluaXRpYWxpemVyID0gZnVuY3Rpb24gc3RhdGVJbml0aWFsaXplcigpIHtcbiAgICBpZiAoIWluaXRTdGF0ZUNhbGN1bGF0ZWQpIHtcbiAgICAgIGxhc3RLbm93blN0YXRlID0gdHlwZW9mIGluaXRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGluaXRWYWx1ZSgpIDogaW5pdFZhbHVlO1xuICAgICAgaW5pdFN0YXRlQ2FsY3VsYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RLbm93blN0YXRlO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHN0YXRlSW5pdGlhbGl6ZXIpLFxuICAgICAgICBzdGF0ZSA9IF91c2VTdGF0ZVswXSxcbiAgICAgICAgc2V0U3RhdGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgICByZW1vdmVIb29rID0gKDAsIF9TaW5nbGV0b25Ib29rc0NvbnRhaW5lci5hZGRIb29rKSh7XG4gICAgICAgICAgaW5pdFZhbHVlOiBpbml0VmFsdWUsXG4gICAgICAgICAgdXNlSG9va0JvZHk6IHVzZUhvb2tCb2R5LFxuICAgICAgICAgIGFwcGx5U3RhdGVDaGFuZ2U6IGFwcGx5U3RhdGVDaGFuZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN1bWVycy5wdXNoKHNldFN0YXRlKTtcblxuICAgICAgaWYgKGxhc3RLbm93blN0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgICBzZXRTdGF0ZShsYXN0S25vd25TdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN1bWVycy5zcGxpY2UoY29uc3VtZXJzLmluZGV4T2Yoc2V0U3RhdGUpLCAxKTtcblxuICAgICAgICBpZiAoY29uc3VtZXJzLmxlbmd0aCA9PT0gMCAmJiB1bm1vdW50SWZOb0NvbnN1bWVycykge1xuICAgICAgICAgIHJlbW92ZUhvb2soKTtcbiAgICAgICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuZXhwb3J0cy5zaW5nbGV0b25Ib29rID0gc2luZ2xldG9uSG9vazsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/singletonHook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/env.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/env.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.mount = exports.batch = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n\nvar _reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\nvar _warning = __webpack_require__(/*! ./warning */ \"(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/warning.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* eslint-disable import/no-unresolved */\n// from https://github.com/purposeindustries/window-or-global/blob/master/lib/index.js\n// avoid direct usage of 'window' because `window is not defined` error might happen in babel-node\nvar globalObject = typeof self === 'object' && self.self === self && self || typeof global === 'object' && global.global === global && global || void 0;\n\nvar batch = function batch(cb) {\n  return (0, _reactDom.unstable_batchedUpdates)(cb);\n};\n\nexports.batch = batch;\n\nvar mount = function mount(C) {\n  if (globalObject.document && globalObject.document.createElement) {\n    (0, _reactDom.render)( /*#__PURE__*/_react[\"default\"].createElement(C, null), globalObject.document.createElement('div'));\n  } else {\n    (0, _warning.warning)('Can not mount SingletonHooksContainer on server side. ' + 'Did you manage to run useEffect on server? ' + 'Please mount SingletonHooksContainer into your components tree manually.');\n  }\n};\n\nexports.mount = mount;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi91dGlscy9lbnYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGFBQWEsR0FBRyxhQUFhOztBQUU3QixvQ0FBb0MsbUJBQU8sQ0FBQyx3R0FBTzs7QUFFbkQsZ0JBQWdCLG1CQUFPLENBQUMsZ0hBQVc7O0FBRW5DLGVBQWUsbUJBQU8sQ0FBQyw2R0FBVzs7QUFFbEMsdUNBQXVDLHVDQUF1Qzs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9uZWFyLXNvY2lhbC12bS9ub2RlX21vZHVsZXMvcmVhY3Qtc2luZ2xldG9uLWhvb2svbGliL3V0aWxzL2Vudi5qcz8yOWVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5tb3VudCA9IGV4cG9ydHMuYmF0Y2ggPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3B1cnBvc2VpbmR1c3RyaWVzL3dpbmRvdy1vci1nbG9iYWwvYmxvYi9tYXN0ZXIvbGliL2luZGV4LmpzXG4vLyBhdm9pZCBkaXJlY3QgdXNhZ2Ugb2YgJ3dpbmRvdycgYmVjYXVzZSBgd2luZG93IGlzIG5vdCBkZWZpbmVkYCBlcnJvciBtaWdodCBoYXBwZW4gaW4gYmFiZWwtbm9kZVxudmFyIGdsb2JhbE9iamVjdCA9IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGYgJiYgc2VsZiB8fCB0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0JyAmJiBnbG9iYWwuZ2xvYmFsID09PSBnbG9iYWwgJiYgZ2xvYmFsIHx8IHZvaWQgMDtcblxudmFyIGJhdGNoID0gZnVuY3Rpb24gYmF0Y2goY2IpIHtcbiAgcmV0dXJuICgwLCBfcmVhY3REb20udW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMpKGNiKTtcbn07XG5cbmV4cG9ydHMuYmF0Y2ggPSBiYXRjaDtcblxudmFyIG1vdW50ID0gZnVuY3Rpb24gbW91bnQoQykge1xuICBpZiAoZ2xvYmFsT2JqZWN0LmRvY3VtZW50ICYmIGdsb2JhbE9iamVjdC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSB7XG4gICAgKDAsIF9yZWFjdERvbS5yZW5kZXIpKCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KEMsIG51bGwpLCBnbG9iYWxPYmplY3QuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICB9IGVsc2Uge1xuICAgICgwLCBfd2FybmluZy53YXJuaW5nKSgnQ2FuIG5vdCBtb3VudCBTaW5nbGV0b25Ib29rc0NvbnRhaW5lciBvbiBzZXJ2ZXIgc2lkZS4gJyArICdEaWQgeW91IG1hbmFnZSB0byBydW4gdXNlRWZmZWN0IG9uIHNlcnZlcj8gJyArICdQbGVhc2UgbW91bnQgU2luZ2xldG9uSG9va3NDb250YWluZXIgaW50byB5b3VyIGNvbXBvbmVudHMgdHJlZSBtYW51YWxseS4nKTtcbiAgfVxufTtcblxuZXhwb3J0cy5tb3VudCA9IG1vdW50OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/warning.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/warning.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.warning = void 0;\n\nvar warning = function warning(message) {\n  if (console && console.warn) {\n    console.warn(message);\n  }\n};\n\nexports.warning = warning;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi91dGlscy93YXJuaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjtBQUNsQixlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvbmVhci1zb2NpYWwtdm0vbm9kZV9tb2R1bGVzL3JlYWN0LXNpbmdsZXRvbi1ob29rL2xpYi91dGlscy93YXJuaW5nLmpzPzk5ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndhcm5pbmcgPSB2b2lkIDA7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgfVxufTtcblxuZXhwb3J0cy53YXJuaW5nID0gd2FybmluZzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/near-social-vm/node_modules/react-singleton-hook/lib/utils/warning.js\n");

/***/ })

};
;