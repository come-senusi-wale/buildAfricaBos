/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/acorn-jsx";
exports.ids = ["vendor-chunks/acorn-jsx"];
exports.modules = {

/***/ "(ssr)/./node_modules/acorn-jsx/index.js":
/*!*****************************************!*\
  !*** ./node_modules/acorn-jsx/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst XHTMLEntities = __webpack_require__(/*! ./xhtml */ \"(ssr)/./node_modules/acorn-jsx/xhtml.js\");\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", ({\n  get: function get_tokTypes() {\n    return getJsxTokens(__webpack_require__(/*! acorn */ \"(ssr)/./node_modules/acorn/dist/acorn.js\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n}));\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || __webpack_require__(/*! acorn */ \"(ssr)/./node_modules/acorn/dist/acorn.js\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWNvcm4tanN4L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQixtQkFBTyxDQUFDLHdEQUFTOztBQUV2QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGlCQUFpQjtBQUMxRCxpREFBaUQsaUJBQWlCO0FBQ2xFO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1EQUFrRDtBQUNsRDtBQUNBLHdCQUF3QixtQkFBTyxDQUFDLHVEQUFPO0FBQ3ZDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQyxFQUFDOztBQUVGO0FBQ0EsZ0NBQWdDLG1CQUFPLENBQUMsdURBQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGFBQWEsa0JBQWtCLGlDQUFpQztBQUNoRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMkNBQTJDO0FBQ25EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isa0NBQWtDO0FBQ2xDLG9DQUFvQztBQUNwQztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9hY29ybi1qc3gvaW5kZXguanM/ZDEwYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFhIVE1MRW50aXRpZXMgPSByZXF1aXJlKCcuL3hodG1sJyk7XG5cbmNvbnN0IGhleE51bWJlciA9IC9eW1xcZGEtZkEtRl0rJC87XG5jb25zdCBkZWNpbWFsTnVtYmVyID0gL15cXGQrJC87XG5cbi8vIFRoZSBtYXAgdG8gYGFjb3JuLWpzeGAgdG9rZW5zIGZyb20gYGFjb3JuYCBuYW1lc3BhY2Ugb2JqZWN0cy5cbmNvbnN0IGFjb3JuSnN4TWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLy8gR2V0IHRoZSBvcmlnaW5hbCB0b2tlbnMgZm9yIHRoZSBnaXZlbiBgYWNvcm5gIG5hbWVzcGFjZSBvYmplY3QuXG5mdW5jdGlvbiBnZXRKc3hUb2tlbnMoYWNvcm4pIHtcbiAgYWNvcm4gPSBhY29ybi5QYXJzZXIuYWNvcm4gfHwgYWNvcm47XG4gIGxldCBhY29ybkpzeCA9IGFjb3JuSnN4TWFwLmdldChhY29ybik7XG4gIGlmICghYWNvcm5Kc3gpIHtcbiAgICBjb25zdCB0dCA9IGFjb3JuLnRva1R5cGVzO1xuICAgIGNvbnN0IFRva0NvbnRleHQgPSBhY29ybi5Ub2tDb250ZXh0O1xuICAgIGNvbnN0IFRva2VuVHlwZSA9IGFjb3JuLlRva2VuVHlwZTtcbiAgICBjb25zdCB0Y19vVGFnID0gbmV3IFRva0NvbnRleHQoJzx0YWcnLCBmYWxzZSk7XG4gICAgY29uc3QgdGNfY1RhZyA9IG5ldyBUb2tDb250ZXh0KCc8L3RhZycsIGZhbHNlKTtcbiAgICBjb25zdCB0Y19leHByID0gbmV3IFRva0NvbnRleHQoJzx0YWc+Li4uPC90YWc+JywgdHJ1ZSwgdHJ1ZSk7XG4gICAgY29uc3QgdG9rQ29udGV4dHMgPSB7XG4gICAgICB0Y19vVGFnOiB0Y19vVGFnLFxuICAgICAgdGNfY1RhZzogdGNfY1RhZyxcbiAgICAgIHRjX2V4cHI6IHRjX2V4cHJcbiAgICB9O1xuICAgIGNvbnN0IHRva1R5cGVzID0ge1xuICAgICAganN4TmFtZTogbmV3IFRva2VuVHlwZSgnanN4TmFtZScpLFxuICAgICAganN4VGV4dDogbmV3IFRva2VuVHlwZSgnanN4VGV4dCcsIHtiZWZvcmVFeHByOiB0cnVlfSksXG4gICAgICBqc3hUYWdTdGFydDogbmV3IFRva2VuVHlwZSgnanN4VGFnU3RhcnQnLCB7c3RhcnRzRXhwcjogdHJ1ZX0pLFxuICAgICAganN4VGFnRW5kOiBuZXcgVG9rZW5UeXBlKCdqc3hUYWdFbmQnKVxuICAgIH07XG5cbiAgICB0b2tUeXBlcy5qc3hUYWdTdGFydC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNvbnRleHQucHVzaCh0Y19leHByKTsgLy8gdHJlYXQgYXMgYmVnaW5uaW5nIG9mIEpTWCBleHByZXNzaW9uXG4gICAgICB0aGlzLmNvbnRleHQucHVzaCh0Y19vVGFnKTsgLy8gc3RhcnQgb3BlbmluZyB0YWcgY29udGV4dFxuICAgICAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgdG9rVHlwZXMuanN4VGFnRW5kLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICAgICAgbGV0IG91dCA9IHRoaXMuY29udGV4dC5wb3AoKTtcbiAgICAgIGlmIChvdXQgPT09IHRjX29UYWcgJiYgcHJldlR5cGUgPT09IHR0LnNsYXNoIHx8IG91dCA9PT0gdGNfY1RhZykge1xuICAgICAgICB0aGlzLmNvbnRleHQucG9wKCk7XG4gICAgICAgIHRoaXMuZXhwckFsbG93ZWQgPSB0aGlzLmN1ckNvbnRleHQoKSA9PT0gdGNfZXhwcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBhY29ybkpzeCA9IHsgdG9rQ29udGV4dHM6IHRva0NvbnRleHRzLCB0b2tUeXBlczogdG9rVHlwZXMgfTtcbiAgICBhY29ybkpzeE1hcC5zZXQoYWNvcm4sIGFjb3JuSnN4KTtcbiAgfVxuXG4gIHJldHVybiBhY29ybkpzeDtcbn1cblxuLy8gVHJhbnNmb3JtcyBKU1ggZWxlbWVudCBuYW1lIHRvIHN0cmluZy5cblxuZnVuY3Rpb24gZ2V0UXVhbGlmaWVkSlNYTmFtZShvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpXG4gICAgcmV0dXJuIG9iamVjdDtcblxuICBpZiAob2JqZWN0LnR5cGUgPT09ICdKU1hJZGVudGlmaWVyJylcbiAgICByZXR1cm4gb2JqZWN0Lm5hbWU7XG5cbiAgaWYgKG9iamVjdC50eXBlID09PSAnSlNYTmFtZXNwYWNlZE5hbWUnKVxuICAgIHJldHVybiBvYmplY3QubmFtZXNwYWNlLm5hbWUgKyAnOicgKyBvYmplY3QubmFtZS5uYW1lO1xuXG4gIGlmIChvYmplY3QudHlwZSA9PT0gJ0pTWE1lbWJlckV4cHJlc3Npb24nKVxuICAgIHJldHVybiBnZXRRdWFsaWZpZWRKU1hOYW1lKG9iamVjdC5vYmplY3QpICsgJy4nICtcbiAgICBnZXRRdWFsaWZpZWRKU1hOYW1lKG9iamVjdC5wcm9wZXJ0eSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uKFBhcnNlcikge1xuICAgIHJldHVybiBwbHVnaW4oe1xuICAgICAgYWxsb3dOYW1lc3BhY2VzOiBvcHRpb25zLmFsbG93TmFtZXNwYWNlcyAhPT0gZmFsc2UsXG4gICAgICBhbGxvd05hbWVzcGFjZWRPYmplY3RzOiAhIW9wdGlvbnMuYWxsb3dOYW1lc3BhY2VkT2JqZWN0c1xuICAgIH0sIFBhcnNlcik7XG4gIH07XG59O1xuXG4vLyBUaGlzIGlzIGB0b2tUeXBlc2Agb2YgdGhlIHBlZXIgZGVwLlxuLy8gVGhpcyBjYW4gYmUgZGlmZmVyZW50IGluc3RhbmNlcyBmcm9tIHRoZSBhY3R1YWwgYHRva1R5cGVzYCB0aGlzIHBsdWdpbiB1c2VzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCBcInRva1R5cGVzXCIsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXRfdG9rVHlwZXMoKSB7XG4gICAgcmV0dXJuIGdldEpzeFRva2VucyhyZXF1aXJlKFwiYWNvcm5cIikpLnRva1R5cGVzO1xuICB9LFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBwbHVnaW4ob3B0aW9ucywgUGFyc2VyKSB7XG4gIGNvbnN0IGFjb3JuID0gUGFyc2VyLmFjb3JuIHx8IHJlcXVpcmUoXCJhY29yblwiKTtcbiAgY29uc3QgYWNvcm5Kc3ggPSBnZXRKc3hUb2tlbnMoYWNvcm4pO1xuICBjb25zdCB0dCA9IGFjb3JuLnRva1R5cGVzO1xuICBjb25zdCB0b2sgPSBhY29ybkpzeC50b2tUeXBlcztcbiAgY29uc3QgdG9rQ29udGV4dHMgPSBhY29ybi50b2tDb250ZXh0cztcbiAgY29uc3QgdGNfb1RhZyA9IGFjb3JuSnN4LnRva0NvbnRleHRzLnRjX29UYWc7XG4gIGNvbnN0IHRjX2NUYWcgPSBhY29ybkpzeC50b2tDb250ZXh0cy50Y19jVGFnO1xuICBjb25zdCB0Y19leHByID0gYWNvcm5Kc3gudG9rQ29udGV4dHMudGNfZXhwcjtcbiAgY29uc3QgaXNOZXdMaW5lID0gYWNvcm4uaXNOZXdMaW5lO1xuICBjb25zdCBpc0lkZW50aWZpZXJTdGFydCA9IGFjb3JuLmlzSWRlbnRpZmllclN0YXJ0O1xuICBjb25zdCBpc0lkZW50aWZpZXJDaGFyID0gYWNvcm4uaXNJZGVudGlmaWVyQ2hhcjtcblxuICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBQYXJzZXIge1xuICAgIC8vIEV4cG9zZSBhY3R1YWwgYHRva1R5cGVzYCBhbmQgYHRva0NvbnRleHRzYCB0byBvdGhlciBwbHVnaW5zLlxuICAgIHN0YXRpYyBnZXQgYWNvcm5Kc3goKSB7XG4gICAgICByZXR1cm4gYWNvcm5Kc3g7XG4gICAgfVxuXG4gICAgLy8gUmVhZHMgaW5saW5lIEpTWCBjb250ZW50cyB0b2tlbi5cbiAgICBqc3hfcmVhZFRva2VuKCkge1xuICAgICAgbGV0IG91dCA9ICcnLCBjaHVua1N0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aClcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsICdVbnRlcm1pbmF0ZWQgSlNYIGNvbnRlbnRzJyk7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG5cbiAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICBjYXNlIDYwOiAvLyAnPCdcbiAgICAgICAgY2FzZSAxMjM6IC8vICd7J1xuICAgICAgICAgIGlmICh0aGlzLnBvcyA9PT0gdGhpcy5zdGFydCkge1xuICAgICAgICAgICAgaWYgKGNoID09PSA2MCAmJiB0aGlzLmV4cHJBbGxvd2VkKSB7XG4gICAgICAgICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHRvay5qc3hUYWdTdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbkZyb21Db2RlKGNoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHRvay5qc3hUZXh0LCBvdXQpO1xuXG4gICAgICAgIGNhc2UgMzg6IC8vICcmJ1xuICAgICAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5qc3hfcmVhZEVudGl0eSgpO1xuICAgICAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDYyOiAvLyAnPidcbiAgICAgICAgY2FzZSAxMjU6IC8vICd9J1xuICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICB0aGlzLnBvcyxcbiAgICAgICAgICAgIFwiVW5leHBlY3RlZCB0b2tlbiBgXCIgKyB0aGlzLmlucHV0W3RoaXMucG9zXSArIFwiYC4gRGlkIHlvdSBtZWFuIGBcIiArXG4gICAgICAgICAgICAgIChjaCA9PT0gNjIgPyBcIiZndDtcIiA6IFwiJnJicmFjZTtcIikgKyBcImAgb3IgXCIgKyBcImB7XFxcIlwiICsgdGhpcy5pbnB1dFt0aGlzLnBvc10gKyBcIlxcXCJ9XCIgKyBcImA/XCJcbiAgICAgICAgICApO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKGlzTmV3TGluZShjaCkpIHtcbiAgICAgICAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKTtcbiAgICAgICAgICAgIG91dCArPSB0aGlzLmpzeF9yZWFkTmV3TGluZSh0cnVlKTtcbiAgICAgICAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBqc3hfcmVhZE5ld0xpbmUobm9ybWFsaXplQ1JMRikge1xuICAgICAgbGV0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICAgIGxldCBvdXQ7XG4gICAgICArK3RoaXMucG9zO1xuICAgICAgaWYgKGNoID09PSAxMyAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSAxMCkge1xuICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICBvdXQgPSBub3JtYWxpemVDUkxGID8gJ1xcbicgOiAnXFxyXFxuJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgICAgKyt0aGlzLmN1ckxpbmU7XG4gICAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAganN4X3JlYWRTdHJpbmcocXVvdGUpIHtcbiAgICAgIGxldCBvdXQgPSAnJywgY2h1bmtTdGFydCA9ICsrdGhpcy5wb3M7XG4gICAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aClcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsICdVbnRlcm1pbmF0ZWQgc3RyaW5nIGNvbnN0YW50Jyk7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG4gICAgICAgIGlmIChjaCA9PT0gcXVvdGUpIGJyZWFrO1xuICAgICAgICBpZiAoY2ggPT09IDM4KSB7IC8vICcmJ1xuICAgICAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5qc3hfcmVhZEVudGl0eSgpO1xuICAgICAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgfSBlbHNlIGlmIChpc05ld0xpbmUoY2gpKSB7XG4gICAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICAgIG91dCArPSB0aGlzLmpzeF9yZWFkTmV3TGluZShmYWxzZSk7XG4gICAgICAgICAgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKyspO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuc3RyaW5nLCBvdXQpO1xuICAgIH1cblxuICAgIGpzeF9yZWFkRW50aXR5KCkge1xuICAgICAgbGV0IHN0ciA9ICcnLCBjb3VudCA9IDAsIGVudGl0eTtcbiAgICAgIGxldCBjaCA9IHRoaXMuaW5wdXRbdGhpcy5wb3NdO1xuICAgICAgaWYgKGNoICE9PSAnJicpXG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5wb3MsICdFbnRpdHkgbXVzdCBzdGFydCB3aXRoIGFuIGFtcGVyc2FuZCcpO1xuICAgICAgbGV0IHN0YXJ0UG9zID0gKyt0aGlzLnBvcztcbiAgICAgIHdoaWxlICh0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoICYmIGNvdW50KysgPCAxMCkge1xuICAgICAgICBjaCA9IHRoaXMuaW5wdXRbdGhpcy5wb3MrK107XG4gICAgICAgIGlmIChjaCA9PT0gJzsnKSB7XG4gICAgICAgICAgaWYgKHN0clswXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICBpZiAoc3RyWzFdID09PSAneCcpIHtcbiAgICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cigyKTtcbiAgICAgICAgICAgICAgaWYgKGhleE51bWJlci50ZXN0KHN0cikpXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChzdHIsIDE2KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICBpZiAoZGVjaW1hbE51bWJlci50ZXN0KHN0cikpXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChzdHIsIDEwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVudGl0eSA9IFhIVE1MRW50aXRpZXNbc3RyXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RyICs9IGNoO1xuICAgICAgfVxuICAgICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgICAgdGhpcy5wb3MgPSBzdGFydFBvcztcbiAgICAgICAgcmV0dXJuICcmJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfVxuXG4gICAgLy8gUmVhZCBhIEpTWCBpZGVudGlmaWVyICh2YWxpZCB0YWcgb3IgYXR0cmlidXRlIG5hbWUpLlxuICAgIC8vXG4gICAgLy8gT3B0aW1pemVkIHZlcnNpb24gc2luY2UgSlNYIGlkZW50aWZpZXJzIGNhbid0IGNvbnRhaW5cbiAgICAvLyBlc2NhcGUgY2hhcmFjdGVycyBhbmQgc28gY2FuIGJlIHJlYWQgYXMgc2luZ2xlIHNsaWNlLlxuICAgIC8vIEFsc28gYXNzdW1lcyB0aGF0IGZpcnN0IGNoYXJhY3RlciB3YXMgYWxyZWFkeSBjaGVja2VkXG4gICAgLy8gYnkgaXNJZGVudGlmaWVyU3RhcnQgaW4gcmVhZFRva2VuLlxuXG4gICAganN4X3JlYWRXb3JkKCkge1xuICAgICAgbGV0IGNoLCBzdGFydCA9IHRoaXMucG9zO1xuICAgICAgZG8ge1xuICAgICAgICBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKTtcbiAgICAgIH0gd2hpbGUgKGlzSWRlbnRpZmllckNoYXIoY2gpIHx8IGNoID09PSA0NSk7IC8vICctJ1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odG9rLmpzeE5hbWUsIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKSk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgbmV4dCB0b2tlbiBhcyBKU1ggaWRlbnRpZmllclxuXG4gICAganN4X3BhcnNlSWRlbnRpZmllcigpIHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHRvay5qc3hOYW1lKVxuICAgICAgICBub2RlLm5hbWUgPSB0aGlzLnZhbHVlO1xuICAgICAgZWxzZSBpZiAodGhpcy50eXBlLmtleXdvcmQpXG4gICAgICAgIG5vZGUubmFtZSA9IHRoaXMudHlwZS5rZXl3b3JkO1xuICAgICAgZWxzZVxuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCAnSlNYSWRlbnRpZmllcicpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIG5hbWVzcGFjZWQgaWRlbnRpZmllci5cblxuICAgIGpzeF9wYXJzZU5hbWVzcGFjZWROYW1lKCkge1xuICAgICAgbGV0IHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgbGV0IG5hbWUgPSB0aGlzLmpzeF9wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIGlmICghb3B0aW9ucy5hbGxvd05hbWVzcGFjZXMgfHwgIXRoaXMuZWF0KHR0LmNvbG9uKSkgcmV0dXJuIG5hbWU7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIG5vZGUubmFtZXNwYWNlID0gbmFtZTtcbiAgICAgIG5vZGUubmFtZSA9IHRoaXMuanN4X3BhcnNlSWRlbnRpZmllcigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCAnSlNYTmFtZXNwYWNlZE5hbWUnKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgZWxlbWVudCBuYW1lIGluIGFueSBmb3JtIC0gbmFtZXNwYWNlZCwgbWVtYmVyXG4gICAgLy8gb3Igc2luZ2xlIGlkZW50aWZpZXIuXG5cbiAgICBqc3hfcGFyc2VFbGVtZW50TmFtZSgpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHRvay5qc3hUYWdFbmQpIHJldHVybiAnJztcbiAgICAgIGxldCBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICAgIGxldCBub2RlID0gdGhpcy5qc3hfcGFyc2VOYW1lc3BhY2VkTmFtZSgpO1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHQuZG90ICYmIG5vZGUudHlwZSA9PT0gJ0pTWE5hbWVzcGFjZWROYW1lJyAmJiAhb3B0aW9ucy5hbGxvd05hbWVzcGFjZWRPYmplY3RzKSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHRoaXMuZWF0KHR0LmRvdCkpIHtcbiAgICAgICAgbGV0IG5ld05vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICAgIG5ld05vZGUub2JqZWN0ID0gbm9kZTtcbiAgICAgICAgbmV3Tm9kZS5wcm9wZXJ0eSA9IHRoaXMuanN4X3BhcnNlSWRlbnRpZmllcigpO1xuICAgICAgICBub2RlID0gdGhpcy5maW5pc2hOb2RlKG5ld05vZGUsICdKU1hNZW1iZXJFeHByZXNzaW9uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgYW55IHR5cGUgb2YgSlNYIGF0dHJpYnV0ZSB2YWx1ZS5cblxuICAgIGpzeF9wYXJzZUF0dHJpYnV0ZVZhbHVlKCkge1xuICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgIGNhc2UgdHQuYnJhY2VMOlxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuanN4X3BhcnNlRXhwcmVzc2lvbkNvbnRhaW5lcigpO1xuICAgICAgICBpZiAobm9kZS5leHByZXNzaW9uLnR5cGUgPT09ICdKU1hFbXB0eUV4cHJlc3Npb24nKVxuICAgICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgJ0pTWCBhdHRyaWJ1dGVzIG11c3Qgb25seSBiZSBhc3NpZ25lZCBhIG5vbi1lbXB0eSBleHByZXNzaW9uJyk7XG4gICAgICAgIHJldHVybiBub2RlO1xuXG4gICAgICBjYXNlIHRvay5qc3hUYWdTdGFydDpcbiAgICAgIGNhc2UgdHQuc3RyaW5nOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgJ0pTWCB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIGFuIGV4cHJlc3Npb24gb3IgYSBxdW90ZWQgSlNYIHRleHQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBKU1hFbXB0eUV4cHJlc3Npb24gaXMgdW5pcXVlIHR5cGUgc2luY2UgaXQgZG9lc24ndCBhY3R1YWxseSBwYXJzZSBhbnl0aGluZyxcbiAgICAvLyBhbmQgc28gaXQgc2hvdWxkIHN0YXJ0IGF0IHRoZSBlbmQgb2YgbGFzdCByZWFkIHRva2VuIChsZWZ0IGJyYWNlKSBhbmQgZmluaXNoXG4gICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBvbmUgKHJpZ2h0IGJyYWNlKS5cblxuICAgIGpzeF9wYXJzZUVtcHR5RXhwcmVzc2lvbigpIHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5zdGFydE5vZGVBdCh0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYyk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlQXQobm9kZSwgJ0pTWEVtcHR5RXhwcmVzc2lvbicsIHRoaXMuc3RhcnQsIHRoaXMuc3RhcnRMb2MpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBKU1ggZXhwcmVzc2lvbiBlbmNsb3NlZCBpbnRvIGN1cmx5IGJyYWNrZXRzLlxuXG4gICAganN4X3BhcnNlRXhwcmVzc2lvbkNvbnRhaW5lcigpIHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy50eXBlID09PSB0dC5icmFjZVJcbiAgICAgICAgPyB0aGlzLmpzeF9wYXJzZUVtcHR5RXhwcmVzc2lvbigpXG4gICAgICAgIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsICdKU1hFeHByZXNzaW9uQ29udGFpbmVyJyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIGZvbGxvd2luZyBKU1ggYXR0cmlidXRlIG5hbWUtdmFsdWUgcGFpci5cblxuICAgIGpzeF9wYXJzZUF0dHJpYnV0ZSgpIHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5icmFjZUwpKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmVsbGlwc2lzKTtcbiAgICAgICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZVIpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsICdKU1hTcHJlYWRBdHRyaWJ1dGUnKTtcbiAgICAgIH1cbiAgICAgIG5vZGUubmFtZSA9IHRoaXMuanN4X3BhcnNlTmFtZXNwYWNlZE5hbWUoKTtcbiAgICAgIG5vZGUudmFsdWUgPSB0aGlzLmVhdCh0dC5lcSkgPyB0aGlzLmpzeF9wYXJzZUF0dHJpYnV0ZVZhbHVlKCkgOiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCAnSlNYQXR0cmlidXRlJyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIEpTWCBvcGVuaW5nIHRhZyBzdGFydGluZyBhZnRlciAnPCcuXG5cbiAgICBqc3hfcGFyc2VPcGVuaW5nRWxlbWVudEF0KHN0YXJ0UG9zLCBzdGFydExvYykge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlLmF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgIGxldCBub2RlTmFtZSA9IHRoaXMuanN4X3BhcnNlRWxlbWVudE5hbWUoKTtcbiAgICAgIGlmIChub2RlTmFtZSkgbm9kZS5uYW1lID0gbm9kZU5hbWU7XG4gICAgICB3aGlsZSAodGhpcy50eXBlICE9PSB0dC5zbGFzaCAmJiB0aGlzLnR5cGUgIT09IHRvay5qc3hUYWdFbmQpXG4gICAgICAgIG5vZGUuYXR0cmlidXRlcy5wdXNoKHRoaXMuanN4X3BhcnNlQXR0cmlidXRlKCkpO1xuICAgICAgbm9kZS5zZWxmQ2xvc2luZyA9IHRoaXMuZWF0KHR0LnNsYXNoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHRvay5qc3hUYWdFbmQpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBub2RlTmFtZSA/ICdKU1hPcGVuaW5nRWxlbWVudCcgOiAnSlNYT3BlbmluZ0ZyYWdtZW50Jyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIEpTWCBjbG9zaW5nIHRhZyBzdGFydGluZyBhZnRlciAnPC8nLlxuXG4gICAganN4X3BhcnNlQ2xvc2luZ0VsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpIHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbGV0IG5vZGVOYW1lID0gdGhpcy5qc3hfcGFyc2VFbGVtZW50TmFtZSgpO1xuICAgICAgaWYgKG5vZGVOYW1lKSBub2RlLm5hbWUgPSBub2RlTmFtZTtcbiAgICAgIHRoaXMuZXhwZWN0KHRvay5qc3hUYWdFbmQpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBub2RlTmFtZSA/ICdKU1hDbG9zaW5nRWxlbWVudCcgOiAnSlNYQ2xvc2luZ0ZyYWdtZW50Jyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIGVudGlyZSBKU1ggZWxlbWVudCwgaW5jbHVkaW5nIGl0J3Mgb3BlbmluZyB0YWdcbiAgICAvLyAoc3RhcnRpbmcgYWZ0ZXIgJzwnKSwgYXR0cmlidXRlcywgY29udGVudHMgYW5kIGNsb3NpbmcgdGFnLlxuXG4gICAganN4X3BhcnNlRWxlbWVudEF0KHN0YXJ0UG9zLCBzdGFydExvYykge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICAgIGxldCBvcGVuaW5nRWxlbWVudCA9IHRoaXMuanN4X3BhcnNlT3BlbmluZ0VsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbGV0IGNsb3NpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgICAgaWYgKCFvcGVuaW5nRWxlbWVudC5zZWxmQ2xvc2luZykge1xuICAgICAgICBjb250ZW50czogZm9yICg7Oykge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgY2FzZSB0b2suanN4VGFnU3RhcnQ6XG4gICAgICAgICAgICBzdGFydFBvcyA9IHRoaXMuc3RhcnQ7IHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZWF0KHR0LnNsYXNoKSkge1xuICAgICAgICAgICAgICBjbG9zaW5nRWxlbWVudCA9IHRoaXMuanN4X3BhcnNlQ2xvc2luZ0VsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICAgICAgICBicmVhayBjb250ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5qc3hfcGFyc2VFbGVtZW50QXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgdG9rLmpzeFRleHQ6XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMucGFyc2VFeHByQXRvbSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSB0dC5icmFjZUw6XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuanN4X3BhcnNlRXhwcmVzc2lvbkNvbnRhaW5lcigpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UXVhbGlmaWVkSlNYTmFtZShjbG9zaW5nRWxlbWVudC5uYW1lKSAhPT0gZ2V0UXVhbGlmaWVkSlNYTmFtZShvcGVuaW5nRWxlbWVudC5uYW1lKSkge1xuICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICBjbG9zaW5nRWxlbWVudC5zdGFydCxcbiAgICAgICAgICAgICdFeHBlY3RlZCBjb3JyZXNwb25kaW5nIEpTWCBjbG9zaW5nIHRhZyBmb3IgPCcgKyBnZXRRdWFsaWZpZWRKU1hOYW1lKG9wZW5pbmdFbGVtZW50Lm5hbWUpICsgJz4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGZyYWdtZW50T3JFbGVtZW50ID0gb3BlbmluZ0VsZW1lbnQubmFtZSA/ICdFbGVtZW50JyA6ICdGcmFnbWVudCc7XG5cbiAgICAgIG5vZGVbJ29wZW5pbmcnICsgZnJhZ21lbnRPckVsZW1lbnRdID0gb3BlbmluZ0VsZW1lbnQ7XG4gICAgICBub2RlWydjbG9zaW5nJyArIGZyYWdtZW50T3JFbGVtZW50XSA9IGNsb3NpbmdFbGVtZW50O1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHQucmVsYXRpb25hbCAmJiB0aGlzLnZhbHVlID09PSBcIjxcIikge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiQWRqYWNlbnQgSlNYIGVsZW1lbnRzIG11c3QgYmUgd3JhcHBlZCBpbiBhbiBlbmNsb3NpbmcgdGFnXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCAnSlNYJyArIGZyYWdtZW50T3JFbGVtZW50KTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBKU1ggdGV4dFxuXG4gICAganN4X3BhcnNlVGV4dCgpIHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5wYXJzZUxpdGVyYWwodGhpcy52YWx1ZSk7XG4gICAgICBub2RlLnR5cGUgPSBcIkpTWFRleHRcIjtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBlbnRpcmUgSlNYIGVsZW1lbnQgZnJvbSBjdXJyZW50IHBvc2l0aW9uLlxuXG4gICAganN4X3BhcnNlRWxlbWVudCgpIHtcbiAgICAgIGxldCBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRoaXMuanN4X3BhcnNlRWxlbWVudEF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgfVxuXG4gICAgcGFyc2VFeHByQXRvbShyZWZTaG9ydEhhbmREZWZhdWx0UG9zKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09PSB0b2suanN4VGV4dClcbiAgICAgICAgcmV0dXJuIHRoaXMuanN4X3BhcnNlVGV4dCgpO1xuICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09PSB0b2suanN4VGFnU3RhcnQpXG4gICAgICAgIHJldHVybiB0aGlzLmpzeF9wYXJzZUVsZW1lbnQoKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlRXhwckF0b20ocmVmU2hvcnRIYW5kRGVmYXVsdFBvcyk7XG4gICAgfVxuXG4gICAgcmVhZFRva2VuKGNvZGUpIHtcbiAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5jdXJDb250ZXh0KCk7XG5cbiAgICAgIGlmIChjb250ZXh0ID09PSB0Y19leHByKSByZXR1cm4gdGhpcy5qc3hfcmVhZFRva2VuKCk7XG5cbiAgICAgIGlmIChjb250ZXh0ID09PSB0Y19vVGFnIHx8IGNvbnRleHQgPT09IHRjX2NUYWcpIHtcbiAgICAgICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KGNvZGUpKSByZXR1cm4gdGhpcy5qc3hfcmVhZFdvcmQoKTtcblxuICAgICAgICBpZiAoY29kZSA9PSA2Mikge1xuICAgICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odG9rLmpzeFRhZ0VuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5KSAmJiBjb250ZXh0ID09IHRjX29UYWcpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuanN4X3JlYWRTdHJpbmcoY29kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2RlID09PSA2MCAmJiB0aGlzLmV4cHJBbGxvd2VkICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpICE9PSAzMykge1xuICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0b2suanN4VGFnU3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLnJlYWRUb2tlbihjb2RlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVDb250ZXh0KHByZXZUeXBlKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09IHR0LmJyYWNlTCkge1xuICAgICAgICB2YXIgY3VyQ29udGV4dCA9IHRoaXMuY3VyQ29udGV4dCgpO1xuICAgICAgICBpZiAoY3VyQ29udGV4dCA9PSB0Y19vVGFnKSB0aGlzLmNvbnRleHQucHVzaCh0b2tDb250ZXh0cy5iX2V4cHIpO1xuICAgICAgICBlbHNlIGlmIChjdXJDb250ZXh0ID09IHRjX2V4cHIpIHRoaXMuY29udGV4dC5wdXNoKHRva0NvbnRleHRzLmJfdG1wbCk7XG4gICAgICAgIGVsc2Ugc3VwZXIudXBkYXRlQ29udGV4dChwcmV2VHlwZSk7XG4gICAgICAgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR0LnNsYXNoICYmIHByZXZUeXBlID09PSB0b2suanN4VGFnU3RhcnQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0Lmxlbmd0aCAtPSAyOyAvLyBkbyBub3QgY29uc2lkZXIgSlNYIGV4cHIgLT4gSlNYIG9wZW4gdGFnIC0+IC4uLiBhbnltb3JlXG4gICAgICAgIHRoaXMuY29udGV4dC5wdXNoKHRjX2NUYWcpOyAvLyByZWNvbnNpZGVyIGFzIGNsb3NpbmcgdGFnIGNvbnRleHRcbiAgICAgICAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnVwZGF0ZUNvbnRleHQocHJldlR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/acorn-jsx/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/acorn-jsx/xhtml.js":
/*!*****************************************!*\
  !*** ./node_modules/acorn-jsx/xhtml.js ***!
  \*****************************************/
/***/ ((module) => {

eval("module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/acorn-jsx/xhtml.js\n");

/***/ })

};
;