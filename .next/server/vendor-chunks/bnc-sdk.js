"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bnc-sdk";
exports.ids = ["vendor-chunks/bnc-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/bnc-sdk/dist/cjs/index.js":
/*!************************************************!*\
  !*** ./node_modules/bnc-sdk/dist/cjs/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar crypto = _interopDefault(__webpack_require__(/*! crypto */ \"crypto\"));\n\nconst networks = {\n  ethereum: {\n    '1': 'main',\n    '5': 'goerli',\n    '100': 'xdai',\n    '137': 'matic-main',\n    '80001': 'matic-mumbai'\n  }\n};\nconst DEPRECATED_NETWORK_IDS = [2, 3, 4, 42, 56, 250];\nconst DEFAULT_RATE_LIMIT_RULES = {\n  points: 150,\n  duration: 1\n};\nconst QUEUE_LIMIT = 10000;\n\nfunction validateType(options) {\n  const {\n    name,\n    value,\n    type,\n    optional,\n    customValidation\n  } = options;\n\n  if (!optional && typeof value === 'undefined') {\n    throw new Error(`\"${name}\" is required`);\n  }\n\n  if (typeof value !== 'undefined' && (type === 'array' ? Array.isArray(type) : typeof value !== type)) {\n    throw new Error(`\"${name}\" must be of type: ${type}, received type: ${typeof value} from value: ${value}`);\n  }\n\n  if (typeof value !== 'undefined' && customValidation && !customValidation(value)) {\n    throw new Error(`\"${value}\" is not a valid \"${name}\"`);\n  }\n}\n\nfunction validateOptions(options) {\n  validateType({\n    name: 'sdk options',\n    value: options,\n    type: 'object'\n  });\n  const {\n    dappId,\n    system,\n    name,\n    appVersion,\n    networkId,\n    transactionHandlers,\n    apiUrl,\n    ws,\n    onopen,\n    ondown,\n    onreopen,\n    onerror,\n    onclose,\n    ...otherParams\n  } = options;\n  invalidParams(otherParams, ['dappId', 'system', 'name', 'appVersion', 'networkId', 'transactionHandlers', 'apiUrl', 'ws', 'onopen', 'ondown', 'onreopen', 'onerror', 'onclose'], 'Initialization Options');\n  validateType({\n    name: 'dappId',\n    value: dappId,\n    type: 'string',\n    optional: true\n  });\n  validateType({\n    name: 'system',\n    value: system,\n    type: 'string',\n    optional: true,\n    customValidation: validSystem\n  });\n  validateType({\n    name: 'name',\n    value: name,\n    type: 'string',\n    optional: true\n  });\n  validateType({\n    name: 'appVersion',\n    value: appVersion,\n    type: 'string',\n    optional: true\n  });\n  validateType({\n    name: 'networkId',\n    value: networkId,\n    type: 'number'\n  });\n\n  if (DEPRECATED_NETWORK_IDS.includes(networkId)) {\n    console.error(`Blocknative SDK: Network with ID: ${networkId} has been deprecated and you will no longer receive transaction events on this network.`);\n  }\n\n  validateType({\n    name: 'transactionHandler',\n    value: transactionHandlers,\n    type: 'array',\n    optional: true\n  });\n\n  if (transactionHandlers) {\n    transactionHandlers.forEach(handler => validateType({\n      name: 'transactionHandler',\n      value: handler,\n      type: 'function'\n    }));\n  }\n\n  validateType({\n    name: 'apiUrl',\n    value: apiUrl,\n    type: 'string',\n    optional: true\n  });\n  validateType({\n    name: 'ws',\n    value: ws,\n    type: 'function',\n    optional: true\n  });\n  validateType({\n    name: 'onopen',\n    value: onopen,\n    type: 'function',\n    optional: true\n  });\n  validateType({\n    name: 'ondown',\n    value: ondown,\n    type: 'function',\n    optional: true\n  });\n  validateType({\n    name: 'onreopen',\n    value: onreopen,\n    type: 'function',\n    optional: true\n  });\n  validateType({\n    name: 'onerror',\n    value: onerror,\n    type: 'function',\n    optional: true\n  });\n  validateType({\n    name: 'onclose',\n    value: onclose,\n    type: 'function',\n    optional: true\n  });\n}\n\nfunction validSystem(system) {\n  return !!networks[system];\n}\n\nfunction invalidParams(params, validParams, functionName) {\n  const invalid = Object.keys(params);\n\n  if (invalid.length > 0) {\n    throw new Error(`${invalid[0]} is not a valid parameter for ${functionName}, must be one of the following valid parameters: ${validParams.join(', ')}`);\n  }\n}\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\n\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0:\n      return func.call(thisArg);\n\n    case 1:\n      return func.call(thisArg, args[0]);\n\n    case 2:\n      return func.call(thisArg, args[0], args[1]);\n\n    case 3:\n      return func.call(thisArg, args[0], args[1], args[2]);\n  }\n\n  return func.apply(thisArg, args);\n}\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\n\n\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n\n  return result;\n}\n/** Used for built-in method references. */\n\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\n\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n/**\n * Used by `_.defaults` to customize its `_.assignIn` use.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to assign.\n * @param {Object} object The parent object of `objValue`.\n * @returns {*} Returns the value to assign.\n */\n\n\nfunction assignInDefaults(objValue, srcValue, key, object) {\n  if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {\n    return srcValue;\n  }\n\n  return objValue;\n}\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\n\n\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n    object[key] = value;\n  }\n}\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\n\n\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\n\n\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n  return function () {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n\n    index = -1;\n    var otherArgs = Array(start + 1);\n\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\n\n\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n\n  return object;\n}\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\n\n\nfunction createAssigner(assigner) {\n  return baseRest(function (object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n\n    object = Object(object);\n\n    while (++index < length) {\n      var source = sources[index];\n\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n\n    return object;\n  });\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\n\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\n\n\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n\n  var type = typeof index;\n\n  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n    return eq(object[index], value);\n  }\n\n  return false;\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\n\n\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n  return value === proto;\n}\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\n\n\nfunction nativeKeysIn(object) {\n  var result = [];\n\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\n\n\nfunction eq(value, other) {\n  return value === other || value !== value && other !== other;\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\n\n\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\n\n\nvar isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\n\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\n\n\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\n\n\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\n\n\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\n\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\n\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n/**\n * This method is like `_.assignIn` except that it accepts `customizer`\n * which is invoked to produce the assigned values. If `customizer` returns\n * `undefined`, assignment is handled by the method instead. The `customizer`\n * is invoked with five arguments: (objValue, srcValue, key, object, source).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extendWith\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} [customizer] The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @see _.assignWith\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   return _.isUndefined(objValue) ? srcValue : objValue;\n * }\n *\n * var defaults = _.partialRight(_.assignInWith, customizer);\n *\n * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\n\n\nvar assignInWith = createAssigner(function (object, source, srcIndex, customizer) {\n  copyObject(source, keysIn(source), object, customizer);\n});\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\n\nvar defaults = baseRest(function (args) {\n  args.push(undefined, assignInDefaults);\n  return apply(assignInWith, undefined, args);\n});\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\n\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nvar lodash_defaults = defaults;\nvar dist = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var SHOULD_RECONNECT_FALSE_MESSAGE = \"Provided shouldReconnect() returned false. Closing permanently.\";\n  var SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\n  var SturdyWebSocket =\n  /** @class */\n  function () {\n    function SturdyWebSocket(url, protocolsOrOptions, options) {\n      this.url = url;\n      this.onclose = null;\n      this.onerror = null;\n      this.onmessage = null;\n      this.onopen = null;\n      this.ondown = null;\n      this.onreopen = null;\n      this.CONNECTING = SturdyWebSocket.CONNECTING;\n      this.OPEN = SturdyWebSocket.OPEN;\n      this.CLOSING = SturdyWebSocket.CLOSING;\n      this.CLOSED = SturdyWebSocket.CLOSED;\n      this.hasBeenOpened = false;\n      this.isClosed = false;\n      this.messageBuffer = [];\n      this.nextRetryTime = 0;\n      this.reconnectCount = 0;\n      this.lastKnownExtensions = \"\";\n      this.lastKnownProtocol = \"\";\n      this.listeners = {};\n\n      if (protocolsOrOptions == null || typeof protocolsOrOptions === \"string\" || Array.isArray(protocolsOrOptions)) {\n        this.protocols = protocolsOrOptions;\n      } else {\n        options = protocolsOrOptions;\n      }\n\n      this.options = lodash_defaults({}, options, SturdyWebSocket.DEFAULT_OPTIONS);\n\n      if (!this.options.wsConstructor) {\n        if (typeof WebSocket !== \"undefined\") {\n          this.options.wsConstructor = WebSocket;\n        } else {\n          throw new Error(\"WebSocket not present in global scope and no \" + \"wsConstructor option was provided.\");\n        }\n      }\n\n      this.openNewWebSocket();\n    }\n\n    Object.defineProperty(SturdyWebSocket.prototype, \"binaryType\", {\n      get: function () {\n        return this.binaryTypeInternal || \"blob\";\n      },\n      set: function (binaryType) {\n        this.binaryTypeInternal = binaryType;\n\n        if (this.ws) {\n          this.ws.binaryType = binaryType;\n        }\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"bufferedAmount\", {\n      get: function () {\n        var sum = this.ws ? this.ws.bufferedAmount : 0;\n        var hasUnknownAmount = false;\n        this.messageBuffer.forEach(function (data) {\n          var byteLength = getDataByteLength(data);\n\n          if (byteLength != null) {\n            sum += byteLength;\n          } else {\n            hasUnknownAmount = true;\n          }\n        });\n\n        if (hasUnknownAmount) {\n          this.debugLog(\"Some buffered data had unknown length. bufferedAmount()\" + \" return value may be below the correct amount.\");\n        }\n\n        return sum;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"extensions\", {\n      get: function () {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"protocol\", {\n      get: function () {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"readyState\", {\n      get: function () {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n      },\n      enumerable: true,\n      configurable: true\n    });\n\n    SturdyWebSocket.prototype.close = function (code, reason) {\n      if (this.ws) {\n        this.ws.close(code, reason);\n      }\n\n      this.shutdown();\n      this.debugLog(\"WebSocket permanently closed by client.\");\n    };\n\n    SturdyWebSocket.prototype.send = function (data) {\n      if (this.ws && this.ws.readyState === this.OPEN) {\n        this.ws.send(data);\n      } else {\n        this.messageBuffer.push(data);\n      }\n    };\n\n    SturdyWebSocket.prototype.addEventListener = function (type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n\n      this.listeners[type].push(listener);\n    };\n\n    SturdyWebSocket.prototype.dispatchEvent = function (event) {\n      return this.dispatchEventOfType(event.type, event);\n    };\n\n    SturdyWebSocket.prototype.removeEventListener = function (type, listener) {\n      if (this.listeners[type]) {\n        this.listeners[type] = this.listeners[type].filter(function (l) {\n          return l !== listener;\n        });\n      }\n    };\n\n    SturdyWebSocket.prototype.openNewWebSocket = function () {\n      var _this = this;\n\n      if (this.isClosed) {\n        return;\n      }\n\n      var _a = this.options,\n          connectTimeout = _a.connectTimeout,\n          wsConstructor = _a.wsConstructor;\n      this.debugLog(\"Opening new WebSocket to \" + this.url + \".\");\n      var ws = new wsConstructor(this.url, this.protocols);\n\n      ws.onclose = function (event) {\n        return _this.handleClose(event);\n      };\n\n      ws.onerror = function (event) {\n        return _this.handleError(event);\n      };\n\n      ws.onmessage = function (event) {\n        return _this.handleMessage(event);\n      };\n\n      ws.onopen = function (event) {\n        return _this.handleOpen(event);\n      };\n\n      this.connectTimeoutId = setTimeout(function () {\n        // If this is running, we still haven't opened the websocket.\n        // Kill it so we can try again.\n        _this.clearConnectTimeout();\n\n        ws.close();\n      }, connectTimeout);\n      this.ws = ws;\n    };\n\n    SturdyWebSocket.prototype.handleOpen = function (event) {\n      var _this = this;\n\n      if (!this.ws || this.isClosed) {\n        return;\n      }\n\n      var allClearResetTime = this.options.allClearResetTime;\n      this.debugLog(\"WebSocket opened.\");\n\n      if (this.binaryTypeInternal != null) {\n        this.ws.binaryType = this.binaryTypeInternal;\n      } else {\n        this.binaryTypeInternal = this.ws.binaryType;\n      }\n\n      this.clearConnectTimeout();\n\n      if (this.hasBeenOpened) {\n        this.dispatchEventOfType(\"reopen\", event);\n      } else {\n        this.dispatchEventOfType(\"open\", event);\n        this.hasBeenOpened = true;\n      }\n\n      this.messageBuffer.forEach(function (message) {\n        return _this.send(message);\n      });\n      this.messageBuffer = [];\n      this.allClearTimeoutId = setTimeout(function () {\n        _this.clearAllClearTimeout();\n\n        _this.nextRetryTime = 0;\n        _this.reconnectCount = 0;\n        var openTime = allClearResetTime / 1000 | 0;\n\n        _this.debugLog(\"WebSocket remained open for \" + openTime + \" seconds. Resetting\" + \" retry time and count.\");\n      }, allClearResetTime);\n    };\n\n    SturdyWebSocket.prototype.handleMessage = function (event) {\n      if (this.isClosed) {\n        return;\n      }\n\n      this.dispatchEventOfType(\"message\", event);\n    };\n\n    SturdyWebSocket.prototype.handleClose = function (event) {\n      var _this = this;\n\n      if (this.isClosed) {\n        return;\n      }\n\n      var _a = this.options,\n          maxReconnectAttempts = _a.maxReconnectAttempts,\n          shouldReconnect = _a.shouldReconnect;\n      this.clearConnectTimeout();\n      this.clearAllClearTimeout();\n\n      if (this.ws) {\n        this.lastKnownExtensions = this.ws.extensions;\n        this.lastKnownProtocol = this.ws.protocol;\n        this.ws = undefined;\n      }\n\n      this.dispatchEventOfType(\"down\", event);\n\n      if (this.reconnectCount >= maxReconnectAttempts) {\n        this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());\n        return;\n      }\n\n      var willReconnect = shouldReconnect(event);\n\n      if (typeof willReconnect === \"boolean\") {\n        this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);\n      } else {\n        willReconnect.then(function (willReconnectResolved) {\n          if (_this.isClosed) {\n            return;\n          }\n\n          _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);\n        });\n      }\n    };\n\n    SturdyWebSocket.prototype.handleError = function (event) {\n      this.dispatchEventOfType(\"error\", event);\n      this.debugLog(\"WebSocket encountered an error.\");\n    };\n\n    SturdyWebSocket.prototype.handleWillReconnect = function (willReconnect, event, denialReason) {\n      if (willReconnect) {\n        this.reconnect();\n      } else {\n        this.stopReconnecting(event, denialReason);\n      }\n    };\n\n    SturdyWebSocket.prototype.reconnect = function () {\n      var _this = this;\n\n      var _a = this.options,\n          minReconnectDelay = _a.minReconnectDelay,\n          maxReconnectDelay = _a.maxReconnectDelay,\n          reconnectBackoffFactor = _a.reconnectBackoffFactor;\n      this.reconnectCount++;\n      var retryTime = this.nextRetryTime;\n      this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));\n      setTimeout(function () {\n        return _this.openNewWebSocket();\n      }, retryTime);\n      var retryTimeSeconds = retryTime / 1000 | 0;\n      this.debugLog(\"WebSocket was closed. Re-opening in \" + retryTimeSeconds + \" seconds.\");\n    };\n\n    SturdyWebSocket.prototype.stopReconnecting = function (event, debugReason) {\n      this.debugLog(debugReason);\n      this.shutdown();\n      this.dispatchEventOfType(\"close\", event);\n    };\n\n    SturdyWebSocket.prototype.shutdown = function () {\n      this.isClosed = true;\n      this.clearAllTimeouts();\n      this.messageBuffer = [];\n    };\n\n    SturdyWebSocket.prototype.clearAllTimeouts = function () {\n      this.clearConnectTimeout();\n      this.clearAllClearTimeout();\n    };\n\n    SturdyWebSocket.prototype.clearConnectTimeout = function () {\n      if (this.connectTimeoutId != null) {\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = undefined;\n      }\n    };\n\n    SturdyWebSocket.prototype.clearAllClearTimeout = function () {\n      if (this.allClearTimeoutId != null) {\n        clearTimeout(this.allClearTimeoutId);\n        this.allClearTimeoutId = undefined;\n      }\n    };\n\n    SturdyWebSocket.prototype.dispatchEventOfType = function (type, event) {\n      var _this = this;\n\n      switch (type) {\n        case \"close\":\n          if (this.onclose) {\n            this.onclose(event);\n          }\n\n          break;\n\n        case \"error\":\n          if (this.onerror) {\n            this.onerror(event);\n          }\n\n          break;\n\n        case \"message\":\n          if (this.onmessage) {\n            this.onmessage(event);\n          }\n\n          break;\n\n        case \"open\":\n          if (this.onopen) {\n            this.onopen(event);\n          }\n\n          break;\n\n        case \"down\":\n          if (this.ondown) {\n            this.ondown(event);\n          }\n\n          break;\n\n        case \"reopen\":\n          if (this.onreopen) {\n            this.onreopen(event);\n          }\n\n          break;\n      }\n\n      if (type in this.listeners) {\n        this.listeners[type].slice().forEach(function (listener) {\n          return _this.callListener(listener, event);\n        });\n      }\n\n      return !event || !event.defaultPrevented;\n    };\n\n    SturdyWebSocket.prototype.callListener = function (listener, event) {\n      if (typeof listener === \"function\") {\n        listener.call(this, event);\n      } else {\n        listener.handleEvent.call(this, event);\n      }\n    };\n\n    SturdyWebSocket.prototype.debugLog = function (message) {\n      if (this.options.debug) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n      }\n    };\n\n    SturdyWebSocket.prototype.getTooManyFailedReconnectsMessage = function () {\n      var maxReconnectAttempts = this.options.maxReconnectAttempts;\n      return \"Failed to reconnect after \" + maxReconnectAttempts + \" \" + pluralize(\"attempt\", maxReconnectAttempts) + \". Closing permanently.\";\n    };\n\n    SturdyWebSocket.DEFAULT_OPTIONS = {\n      allClearResetTime: 5000,\n      connectTimeout: 5000,\n      debug: false,\n      minReconnectDelay: 1000,\n      maxReconnectDelay: 30000,\n      maxReconnectAttempts: Number.POSITIVE_INFINITY,\n      reconnectBackoffFactor: 1.5,\n      shouldReconnect: function () {\n        return true;\n      },\n      wsConstructor: undefined\n    };\n    SturdyWebSocket.CONNECTING = 0;\n    SturdyWebSocket.OPEN = 1;\n    SturdyWebSocket.CLOSING = 2;\n    SturdyWebSocket.CLOSED = 3;\n    return SturdyWebSocket;\n  }();\n\n  exports.default = SturdyWebSocket;\n\n  function getDataByteLength(data) {\n    if (typeof data === \"string\") {\n      // UTF-16 strings use two bytes per character.\n      return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n      return data.byteLength;\n    } else if (data instanceof Blob) {\n      return data.size;\n    } else {\n      return undefined;\n    }\n  }\n\n  function pluralize(s, n) {\n    return n === 1 ? s : s + \"s\";\n  }\n});\nvar SturdyWebSocket = unwrapExports(dist);\n/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\n\nclass Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create(...args) {\n    return new this(...args);\n  }\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n\n\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n\n\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n\n}\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\n\nclass WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor(words = [], sigBytes = words.length * 4) {\n    super();\n    let typedArray = words; // Convert buffers to uint8\n\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    } // Convert other array views to uint8\n\n\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    } // Handle Uint8Array\n\n\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength; // Extract bytes\n\n      const _words = [];\n\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      } // Initialize this word array\n\n\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n\n\n  static random(nBytes) {\n    const words = [];\n\n    const r = m_w => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n      return () => {\n        _m_z = 0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10) & mask;\n        _m_w = 0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10) & mask;\n        let result = (_m_z << 0x10) + _m_w & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push(_r() * 0x100000000 | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n\n\n  toString(encoder = Hex) {\n    return encoder.stringify(this);\n  }\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n\n\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n    this.clamp(); // Concat\n\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n      }\n    }\n\n    this.sigBytes += thatSigBytes; // Chainable\n\n    return this;\n  }\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n\n\n  clamp() {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = this; // Clamp\n\n    words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n    words.length = Math.ceil(sigBytes / 4);\n  }\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n    return clone;\n  }\n\n}\n/**\n * Hex encoding strategy.\n */\n\n\nconst Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray; // Convert\n\n    const hexChars = [];\n\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length; // Convert\n\n    const words = [];\n\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  }\n\n};\n/**\n * Latin1 encoding strategy.\n */\n\nconst Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray; // Convert\n\n    const latin1Chars = [];\n\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length; // Convert\n\n    const words = [];\n\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n    }\n\n    return new WordArray(words, latin1StrLength);\n  }\n\n};\n/**\n * UTF-8 encoding strategy.\n */\n\nconst Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n\n};\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\n\nclass BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n\n\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n\n\n  _append(data) {\n    let m_data = data; // Convert string to WordArray, else assume WordArray already\n\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    } // Append\n\n\n    this._data.concat(m_data);\n\n    this._nDataBytes += m_data.sigBytes;\n  }\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n\n\n  _process(doFlush) {\n    let processedWords; // Shortcuts\n\n    const {\n      _data: data,\n      blockSize\n    } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4; // Count blocks ready\n\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    } // Count words ready\n\n\n    const nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      } // Remove processed words\n\n\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    } // Return processed words\n\n\n    return new WordArray(processedWords, nBytesReady);\n  }\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n    return clone;\n  }\n\n}\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\n\n\nclass Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n    this.blockSize = 512 / 32;\n    /**\n     * Configuration options.\n     */\n\n    this.cfg = Object.assign(new Base(), cfg); // Set initial values\n\n    this.reset();\n  }\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n\n\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n\n\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n\n\n  reset() {\n    // Reset data buffer\n    super.reset.call(this); // Perform concrete-hasher logic\n\n    this._doReset();\n  }\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n\n\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate); // Update the hash\n\n\n    this._process(); // Chainable\n\n\n    return this;\n  }\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n\n\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    } // Perform concrete-hasher logic\n\n\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n\n}\n/**\n * HMAC algorithm.\n */\n\n\nclass HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n    const hasher = new SubHasher();\n    this._hasher = hasher; // Convert string to WordArray, else assume WordArray already\n\n    let _key = key;\n\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    } // Shortcuts\n\n\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    } // Clamp excess bits\n\n\n    _key.clamp(); // Clone key for inner and outer pads\n\n\n    const oKey = _key.clone();\n\n    this._oKey = oKey;\n\n    const iKey = _key.clone();\n\n    this._iKey = iKey; // Shortcuts\n\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words; // XOR keys with pad constants\n\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n    this.reset();\n  }\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n\n\n  reset() {\n    // Shortcut\n    const hasher = this._hasher; // Reset\n\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n\n\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate); // Chainable\n\n\n    return this;\n  }\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n\n\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher; // Compute HMAC\n\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n    return hmac;\n  }\n\n}\n\nconst X32WordArray = WordArray;\n/**\n * A 64-bit word.\n */\n\nclass X64Word extends Base {\n  /**\n   * Initializes a newly created 64-bit word.\n   *\n   * @param {number} high The high 32 bits.\n   * @param {number} low The low 32 bits.\n   *\n   * @example\n   *\n   *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n   */\n  constructor(high, low) {\n    super();\n    this.high = high;\n    this.low = low;\n  }\n\n}\n/**\n * An array of 64-bit words.\n *\n * @property {Array} words The array of CryptoJS.x64.Word objects.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\n\nclass X64WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create();\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ]);\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ], 10);\n   */\n  constructor(words = [], sigBytes = words.length * 8) {\n    super();\n    this.words = words;\n    this.sigBytes = sigBytes;\n  }\n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n\n\n  toX32() {\n    // Shortcuts\n    const x64Words = this.words;\n    const x64WordsLength = x64Words.length; // Convert\n\n    const x32Words = [];\n\n    for (let i = 0; i < x64WordsLength; i += 1) {\n      const x64Word = x64Words[i];\n      x32Words.push(x64Word.high);\n      x32Words.push(x64Word.low);\n    }\n\n    return X32WordArray.create(x32Words, this.sigBytes);\n  }\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {X64WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = x64WordArray.clone();\n   */\n\n\n  clone() {\n    const clone = super.clone.call(this); // Clone \"words\" array\n\n    clone.words = this.words.slice(0);\n    const {\n      words\n    } = clone; // Clone each X64Word object\n\n    const wordsLength = words.length;\n\n    for (let i = 0; i < wordsLength; i += 1) {\n      words[i] = words[i].clone();\n    }\n\n    return clone;\n  }\n\n}\n\nconst parseLoop = (base64Str, base64StrLength, reverseMap) => {\n  const words = [];\n  let nBytes = 0;\n\n  for (let i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n      const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n      const bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n      nBytes += 1;\n    }\n  }\n\n  return WordArray.create(words, nBytes);\n};\n/**\n * Base64 encoding strategy.\n */\n\n\nconst Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray;\n    const map = this._map; // Clamp excess bits\n\n    wordArray.clamp(); // Convert\n\n    const base64Chars = [];\n\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      const byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n      const byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n      const triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n      for (let j = 0; j < 4 && i + j * 0.75 < sigBytes; j += 1) {\n        base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n      }\n    } // Add padding\n\n\n    const paddingChar = map.charAt(64);\n\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = this._map;\n    let reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    } // Ignore padding\n\n\n    const paddingChar = map.charAt(64);\n\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    } // Convert\n\n\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n}; // Constants table\n\nconst T = []; // Compute constants\n\nfor (let i = 0; i < 64; i += 1) {\n  T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;\n}\n\nconst FF = (a, b, c, d, x, s, t) => {\n  const n = a + (b & c | ~b & d) + x + t;\n  return (n << s | n >>> 32 - s) + b;\n};\n\nconst GG = (a, b, c, d, x, s, t) => {\n  const n = a + (b & d | c & ~d) + x + t;\n  return (n << s | n >>> 32 - s) + b;\n};\n\nconst HH = (a, b, c, d, x, s, t) => {\n  const n = a + (b ^ c ^ d) + x + t;\n  return (n << s | n >>> 32 - s) + b;\n};\n\nconst II = (a, b, c, d, x, s, t) => {\n  const n = a + (c ^ (b | ~d)) + x + t;\n  return (n << s | n >>> 32 - s) + b;\n};\n/**\n * MD5 hash algorithm.\n */\n\n\nclass MD5Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M; // Swap endian\n\n    for (let i = 0; i < 16; i += 1) {\n      // Shortcuts\n      const offset_i = offset + i;\n      const M_offset_i = M[offset_i];\n      _M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n    } // Shortcuts\n\n\n    const H = this._hash.words;\n    const M_offset_0 = _M[offset + 0];\n    const M_offset_1 = _M[offset + 1];\n    const M_offset_2 = _M[offset + 2];\n    const M_offset_3 = _M[offset + 3];\n    const M_offset_4 = _M[offset + 4];\n    const M_offset_5 = _M[offset + 5];\n    const M_offset_6 = _M[offset + 6];\n    const M_offset_7 = _M[offset + 7];\n    const M_offset_8 = _M[offset + 8];\n    const M_offset_9 = _M[offset + 9];\n    const M_offset_10 = _M[offset + 10];\n    const M_offset_11 = _M[offset + 11];\n    const M_offset_12 = _M[offset + 12];\n    const M_offset_13 = _M[offset + 13];\n    const M_offset_14 = _M[offset + 14];\n    const M_offset_15 = _M[offset + 15]; // Working varialbes\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3]; // Computation\n\n    a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n    d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n    c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n    b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n    a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n    d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n    c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n    b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n    a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n    d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n    c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n    b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n    a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n    d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n    c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n    b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n    a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n    d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n    c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n    b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n    a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n    d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n    c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n    b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n    a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n    d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n    c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n    b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n    a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n    d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n    c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n    b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n    a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n    d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n    c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n    b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n    a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n    d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n    c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n    b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n    a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n    d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n    c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n    b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n    a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n    d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n    c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n    b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n    a = II(a, b, c, d, M_offset_0, 6, T[48]);\n    d = II(d, a, b, c, M_offset_7, 10, T[49]);\n    c = II(c, d, a, b, M_offset_14, 15, T[50]);\n    b = II(b, c, d, a, M_offset_5, 21, T[51]);\n    a = II(a, b, c, d, M_offset_12, 6, T[52]);\n    d = II(d, a, b, c, M_offset_3, 10, T[53]);\n    c = II(c, d, a, b, M_offset_10, 15, T[54]);\n    b = II(b, c, d, a, M_offset_1, 21, T[55]);\n    a = II(a, b, c, d, M_offset_8, 6, T[56]);\n    d = II(d, a, b, c, M_offset_15, 10, T[57]);\n    c = II(c, d, a, b, M_offset_6, 15, T[58]);\n    b = II(b, c, d, a, M_offset_13, 21, T[59]);\n    a = II(a, b, c, d, M_offset_4, 6, T[60]);\n    d = II(d, a, b, c, M_offset_11, 10, T[61]);\n    c = II(c, d, a, b, M_offset_2, 15, T[62]);\n    b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value\n\n    H[0] = H[0] + a | 0;\n    H[1] = H[1] + b | 0;\n    H[2] = H[2] + c | 0;\n    H[3] = H[3] + d | 0;\n  }\n  /* eslint-ensable no-param-reassign */\n\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n    const nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n    const nBitsTotalL = nBitsTotal;\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;\n    data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks\n\n    this._process(); // Shortcuts\n\n\n    const hash = this._hash;\n    const H = hash.words; // Swap endian\n\n    for (let i = 0; i < 4; i += 1) {\n      // Shortcut\n      const H_i = H[i];\n      H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n    } // Return final computed hash\n\n\n    return hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.MD5('message');\n *     var hash = CryptoJS.MD5(wordArray);\n */\n\n\nconst MD5 = Hasher._createHelper(MD5Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacMD5(message, key);\n */\n\n\nconst HmacMD5 = Hasher._createHmacHelper(MD5Algo);\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\n\n\nclass EvpKDFAlgo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n\n    this.cfg = Object.assign(new Base(), {\n      keySize: 128 / 32,\n      hasher: MD5Algo,\n      iterations: 1\n    }, cfg);\n  }\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n\n\n  compute(password, salt) {\n    let block; // Shortcut\n\n    const {\n      cfg\n    } = this; // Init hasher\n\n    const hasher = cfg.hasher.create(); // Initial values\n\n    const derivedKey = WordArray.create(); // Shortcuts\n\n    const derivedKeyWords = derivedKey.words;\n    const {\n      keySize,\n      iterations\n    } = cfg; // Generate key\n\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n\n      block = hasher.update(password).finalize(salt);\n      hasher.reset(); // Iterations\n\n      for (let i = 1; i < iterations; i += 1) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n\n      derivedKey.concat(block);\n    }\n\n    derivedKey.sigBytes = keySize * 4;\n    return derivedKey;\n  }\n\n}\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\n\n\nconst EvpKDF = (password, salt, cfg) => EvpKDFAlgo.create(cfg).compute(password, salt);\n/* eslint-disable no-use-before-define */\n\n/**\n * Abstract base cipher template.\n *\n * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n */\n\n\nclass Cipher extends BufferedBlockAlgorithm {\n  /**\n   * Initializes a newly created cipher.\n   *\n   * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.create(\n   *       CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray }\n   *     );\n   */\n  constructor(xformMode, key, cfg) {\n    super();\n    this.keySize = 128 / 32;\n    this.ivSize = 128 / 32;\n    /**\n     * Configuration options.\n     *\n     * @property {WordArray} iv The IV to use for this operation.\n     */\n\n    this.cfg = Object.assign(new Base(), cfg); // Store transform mode and key\n\n    this._xformMode = xformMode;\n    this._key = key; // Set initial values\n\n    this.reset();\n  }\n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {Cipher} A cipher instance.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n\n\n  static createEncryptor(key, cfg) {\n    return this.create(this._ENC_XFORM_MODE, key, cfg);\n  }\n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {Cipher} A cipher instance.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n\n\n  static createDecryptor(key, cfg) {\n    return this.create(this._DEC_XFORM_MODE, key, cfg);\n  }\n  /**\n   * Creates shortcut functions to a cipher's object interface.\n   *\n   * @param {Cipher} cipher The cipher to create a helper for.\n   *\n   * @return {Object} An object with encrypt and decrypt shortcut functions.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n   */\n\n\n  static _createHelper(SubCipher) {\n    const selectCipherStrategy = key => {\n      if (typeof key === 'string') {\n        return PasswordBasedCipher;\n      }\n\n      return SerializableCipher;\n    };\n\n    return {\n      encrypt(message, key, cfg) {\n        return selectCipherStrategy(key).encrypt(SubCipher, message, key, cfg);\n      },\n\n      decrypt(ciphertext, key, cfg) {\n        return selectCipherStrategy(key).decrypt(SubCipher, ciphertext, key, cfg);\n      }\n\n    };\n  }\n  /**\n   * Resets this cipher to its initial state.\n   *\n   * @example\n   *\n   *     cipher.reset();\n   */\n\n\n  reset() {\n    // Reset data buffer\n    super.reset.call(this); // Perform concrete-cipher logic\n\n    this._doReset();\n  }\n  /**\n   * Adds data to be encrypted or decrypted.\n   *\n   * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n   *\n   * @return {WordArray} The data after processing.\n   *\n   * @example\n   *\n   *     const encrypted = cipher.process('data');\n   *     const encrypted = cipher.process(wordArray);\n   */\n\n\n  process(dataUpdate) {\n    // Append\n    this._append(dataUpdate); // Process available blocks\n\n\n    return this._process();\n  }\n  /**\n   * Finalizes the encryption or decryption process.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n   *\n   * @return {WordArray} The data after final processing.\n   *\n   * @example\n   *\n   *     const encrypted = cipher.finalize();\n   *     const encrypted = cipher.finalize('data');\n   *     const encrypted = cipher.finalize(wordArray);\n   */\n\n\n  finalize(dataUpdate) {\n    // Final data update\n    if (dataUpdate) {\n      this._append(dataUpdate);\n    } // Perform concrete-cipher logic\n\n\n    const finalProcessedData = this._doFinalize();\n\n    return finalProcessedData;\n  }\n\n}\n\nCipher._ENC_XFORM_MODE = 1;\nCipher._DEC_XFORM_MODE = 2;\n/**\n * Abstract base stream cipher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n */\n\nclass StreamCipher extends Cipher {\n  constructor(...args) {\n    super(...args);\n    this.blockSize = 1;\n  }\n\n  _doFinalize() {\n    // Process partial blocks\n    const finalProcessedBlocks = this._process(!!'flush');\n\n    return finalProcessedBlocks;\n  }\n\n}\n/**\n * Abstract base block cipher mode template.\n */\n\n\nclass BlockCipherMode extends Base {\n  /**\n   * Initializes a newly created mode.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n   */\n  constructor(cipher, iv) {\n    super();\n    this._cipher = cipher;\n    this._iv = iv;\n  }\n  /**\n   * Creates this mode for encryption.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n   */\n\n\n  static createEncryptor(cipher, iv) {\n    return this.Encryptor.create(cipher, iv);\n  }\n  /**\n   * Creates this mode for decryption.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n   */\n\n\n  static createDecryptor(cipher, iv) {\n    return this.Decryptor.create(cipher, iv);\n  }\n\n}\n\nfunction xorBlock(words, offset, blockSize) {\n  const _words = words;\n  let block; // Shortcut\n\n  const iv = this._iv; // Choose mixing block\n\n  if (iv) {\n    block = iv; // Remove IV for subsequent blocks\n\n    this._iv = undefined;\n  } else {\n    block = this._prevBlock;\n  } // XOR blocks\n\n\n  for (let i = 0; i < blockSize; i += 1) {\n    _words[offset + i] ^= block[i];\n  }\n}\n/**\n * Cipher Block Chaining mode.\n */\n\n/**\n * Abstract base CBC mode.\n */\n\n\nclass CBC extends BlockCipherMode {}\n/**\n * CBC encryptor.\n */\n\n\nCBC.Encryptor = class extends CBC {\n  /**\n   * Processes the data block at offset.\n   *\n   * @param {Array} words The data words to operate on.\n   * @param {number} offset The offset where the block starts.\n   *\n   * @example\n   *\n   *     mode.processBlock(data.words, offset);\n   */\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher; // XOR and encrypt\n\n    xorBlock.call(this, words, offset, blockSize);\n    cipher.encryptBlock(words, offset); // Remember this block to use with next block\n\n    this._prevBlock = words.slice(offset, offset + blockSize);\n  }\n\n};\n/**\n * CBC decryptor.\n */\n\nCBC.Decryptor = class extends CBC {\n  /**\n   * Processes the data block at offset.\n   *\n   * @param {Array} words The data words to operate on.\n   * @param {number} offset The offset where the block starts.\n   *\n   * @example\n   *\n   *     mode.processBlock(data.words, offset);\n   */\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher; // Remember this block to use with next block\n\n    const thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR\n\n    cipher.decryptBlock(words, offset);\n    xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block\n\n    this._prevBlock = thisBlock;\n  }\n\n};\n/**\n * PKCS #5/7 padding strategy.\n */\n\nconst Pkcs7 = {\n  /**\n   * Pads data using the algorithm defined in PKCS #5/7.\n   *\n   * @param {WordArray} data The data to pad.\n   * @param {number} blockSize The multiple that the data should be padded to.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n   */\n  pad(data, blockSize) {\n    // Shortcut\n    const blockSizeBytes = blockSize * 4; // Count padding bytes\n\n    const nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word\n\n    const paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding\n\n    const paddingWords = [];\n\n    for (let i = 0; i < nPaddingBytes; i += 4) {\n      paddingWords.push(paddingWord);\n    }\n\n    const padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding\n\n    data.concat(padding);\n  },\n\n  /**\n   * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n   *\n   * @param {WordArray} data The data to unpad.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n   */\n  unpad(data) {\n    const _data = data; // Get number of padding bytes from last byte\n\n    const nPaddingBytes = _data.words[_data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n    _data.sigBytes -= nPaddingBytes;\n  }\n\n};\n/**\n * Abstract base block cipher template.\n *\n * @property {number} blockSize\n *\n *    The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n */\n\nclass BlockCipher extends Cipher {\n  constructor(xformMode, key, cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {Mode} mode The block mode to use. Default: CBC\n     * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n     */\n    super(xformMode, key, Object.assign({\n      mode: CBC,\n      padding: Pkcs7\n    }, cfg));\n    this.blockSize = 128 / 32;\n  }\n\n  reset() {\n    let modeCreator; // Reset cipher\n\n    super.reset.call(this); // Shortcuts\n\n    const {\n      cfg\n    } = this;\n    const {\n      iv,\n      mode\n    } = cfg; // Reset block mode\n\n    if (this._xformMode === this.constructor._ENC_XFORM_MODE) {\n      modeCreator = mode.createEncryptor;\n    } else\n      /* if (this._xformMode == this._DEC_XFORM_MODE) */\n      {\n        modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding\n\n        this._minBufferSize = 1;\n      }\n\n    this._mode = modeCreator.call(mode, this, iv && iv.words);\n    this._mode.__creator = modeCreator;\n  }\n\n  _doProcessBlock(words, offset) {\n    this._mode.processBlock(words, offset);\n  }\n\n  _doFinalize() {\n    let finalProcessedBlocks; // Shortcut\n\n    const {\n      padding\n    } = this.cfg; // Finalize\n\n    if (this._xformMode === this.constructor._ENC_XFORM_MODE) {\n      // Pad data\n      padding.pad(this._data, this.blockSize); // Process final blocks\n\n      finalProcessedBlocks = this._process(!!'flush');\n    } else\n      /* if (this._xformMode == this._DEC_XFORM_MODE) */\n      {\n        // Process final blocks\n        finalProcessedBlocks = this._process(!!'flush'); // Unpad data\n\n        padding.unpad(finalProcessedBlocks);\n      }\n\n    return finalProcessedBlocks;\n  }\n\n}\n/**\n * A collection of cipher parameters.\n *\n * @property {WordArray} ciphertext The raw ciphertext.\n * @property {WordArray} key The key to this ciphertext.\n * @property {WordArray} iv The IV used in the ciphering operation.\n * @property {WordArray} salt The salt used with a key derivation function.\n * @property {Cipher} algorithm The cipher algorithm.\n * @property {Mode} mode The block mode used in the ciphering operation.\n * @property {Padding} padding The padding scheme used in the ciphering operation.\n * @property {number} blockSize The block size of the cipher.\n * @property {Format} formatter\n *    The default formatting strategy to convert this cipher params object to a string.\n */\n\n\nclass CipherParams extends Base {\n  /**\n   * Initializes a newly created cipher params object.\n   *\n   * @param {Object} cipherParams An object with any of the possible cipher parameters.\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.lib.CipherParams.create({\n   *         ciphertext: ciphertextWordArray,\n   *         key: keyWordArray,\n   *         iv: ivWordArray,\n   *         salt: saltWordArray,\n   *         algorithm: CryptoJS.algo.AES,\n   *         mode: CryptoJS.mode.CBC,\n   *         padding: CryptoJS.pad.PKCS7,\n   *         blockSize: 4,\n   *         formatter: CryptoJS.format.OpenSSL\n   *     });\n   */\n  constructor(cipherParams) {\n    super();\n    this.mixIn(cipherParams);\n  }\n  /**\n   * Converts this cipher params object to a string.\n   *\n   * @param {Format} formatter (Optional) The formatting strategy to use.\n   *\n   * @return {string} The stringified cipher params.\n   *\n   * @throws Error If neither the formatter nor the default formatter is set.\n   *\n   * @example\n   *\n   *     var string = cipherParams + '';\n   *     var string = cipherParams.toString();\n   *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n   */\n\n\n  toString(formatter) {\n    return (formatter || this.formatter).stringify(this);\n  }\n\n}\n/**\n * OpenSSL formatting strategy.\n */\n\n\nconst OpenSSLFormatter = {\n  /**\n   * Converts a cipher params object to an OpenSSL-compatible string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The OpenSSL-compatible string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    let wordArray; // Shortcuts\n\n    const {\n      ciphertext,\n      salt\n    } = cipherParams; // Format\n\n    if (salt) {\n      wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n    } else {\n      wordArray = ciphertext;\n    }\n\n    return wordArray.toString(Base64);\n  },\n\n  /**\n   * Converts an OpenSSL-compatible string to a cipher params object.\n   *\n   * @param {string} openSSLStr The OpenSSL-compatible string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n   */\n  parse(openSSLStr) {\n    let salt; // Parse base64\n\n    const ciphertext = Base64.parse(openSSLStr); // Shortcut\n\n    const ciphertextWords = ciphertext.words; // Test for salt\n\n    if (ciphertextWords[0] === 0x53616c74 && ciphertextWords[1] === 0x65645f5f) {\n      // Extract salt\n      salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext\n\n      ciphertextWords.splice(0, 4);\n      ciphertext.sigBytes -= 16;\n    }\n\n    return CipherParams.create({\n      ciphertext,\n      salt\n    });\n  }\n\n};\n/**\n * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n */\n\nclass SerializableCipher extends Base {\n  /**\n   * Encrypts a message.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {WordArray|string} message The message to encrypt.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {CipherParams} A cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key);\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n   */\n  static encrypt(cipher, message, key, cfg) {\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg); // Encrypt\n\n\n    const encryptor = cipher.createEncryptor(key, _cfg);\n    const ciphertext = encryptor.finalize(message); // Shortcut\n\n    const cipherCfg = encryptor.cfg; // Create and return serializable cipher params\n\n    return CipherParams.create({\n      ciphertext,\n      key,\n      iv: cipherCfg.iv,\n      algorithm: cipher,\n      mode: cipherCfg.mode,\n      padding: cipherCfg.padding,\n      blockSize: encryptor.blockSize,\n      formatter: _cfg.format\n    });\n  }\n  /**\n   * Decrypts serialized ciphertext.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {WordArray} The plaintext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var plaintext = CryptoJS.lib.SerializableCipher\n   *       .decrypt(CryptoJS.algo.AES, formattedCiphertext, key,\n   *         { iv: iv, format: CryptoJS.format.OpenSSL });\n   *     var plaintext = CryptoJS.lib.SerializableCipher\n   *       .decrypt(CryptoJS.algo.AES, ciphertextParams, key,\n   *         { iv: iv, format: CryptoJS.format.OpenSSL });\n   */\n\n\n  static decrypt(cipher, ciphertext, key, cfg) {\n    let _ciphertext = ciphertext; // Apply config defaults\n\n    const _cfg = Object.assign(new Base(), this.cfg, cfg); // Convert string to CipherParams\n\n\n    _ciphertext = this._parse(_ciphertext, _cfg.format); // Decrypt\n\n    const plaintext = cipher.createDecryptor(key, _cfg).finalize(_ciphertext.ciphertext);\n    return plaintext;\n  }\n  /**\n   * Converts serialized ciphertext to CipherParams,\n   * else assumed CipherParams already and returns ciphertext unchanged.\n   *\n   * @param {CipherParams|string} ciphertext The ciphertext.\n   * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n   *\n   * @return {CipherParams} The unserialized ciphertext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       ._parse(ciphertextStringOrParams, format);\n   */\n\n\n  static _parse(ciphertext, format) {\n    if (typeof ciphertext === 'string') {\n      return format.parse(ciphertext, this);\n    }\n\n    return ciphertext;\n  }\n\n}\n/**\n * Configuration options.\n *\n * @property {Formatter} format\n *\n *    The formatting strategy to convert cipher param objects to and from a string.\n *    Default: OpenSSL\n */\n\n\nSerializableCipher.cfg = Object.assign(new Base(), {\n  format: OpenSSLFormatter\n});\n/**\n * OpenSSL key derivation function.\n */\n\nconst OpenSSLKdf = {\n  /**\n   * Derives a key and IV from a password.\n   *\n   * @param {string} password The password to derive from.\n   * @param {number} keySize The size in words of the key to generate.\n   * @param {number} ivSize The size in words of the IV to generate.\n   * @param {WordArray|string} salt\n   *     (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n   *\n   * @return {CipherParams} A cipher params object with the key, IV, and salt.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n   *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n   */\n  execute(password, keySize, ivSize, salt) {\n    let _salt = salt; // Generate random salt\n\n    if (!_salt) {\n      _salt = WordArray.random(64 / 8);\n    } // Derive key and IV\n\n\n    const key = EvpKDFAlgo.create({\n      keySize: keySize + ivSize\n    }).compute(password, _salt); // Separate key and IV\n\n    const iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n    key.sigBytes = keySize * 4; // Return params\n\n    return CipherParams.create({\n      key,\n      iv,\n      salt: _salt\n    });\n  }\n\n};\n/**\n * A serializable cipher wrapper that derives the key from a password,\n * and returns ciphertext as a serializable cipher params object.\n */\n\nclass PasswordBasedCipher extends SerializableCipher {\n  /**\n   * Encrypts a message using a password.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {WordArray|string} message The message to encrypt.\n   * @param {string} password The password.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {CipherParams} A cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher\n   *       .encrypt(CryptoJS.algo.AES, message, 'password');\n   *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher\n   *       .encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n   */\n  static encrypt(cipher, message, password, cfg) {\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg); // Derive key and other params\n\n\n    const derivedParams = _cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config\n\n\n    _cfg.iv = derivedParams.iv; // Encrypt\n\n    const ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, _cfg); // Mix in derived params\n\n    ciphertext.mixIn(derivedParams);\n    return ciphertext;\n  }\n  /**\n   * Decrypts serialized ciphertext using a password.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n   * @param {string} password The password.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {WordArray} The plaintext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var plaintext = CryptoJS.lib.PasswordBasedCipher\n   *       .decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password',\n   *         { format: CryptoJS.format.OpenSSL });\n   *     var plaintext = CryptoJS.lib.PasswordBasedCipher\n   *       .decrypt(CryptoJS.algo.AES, ciphertextParams, 'password',\n   *         { format: CryptoJS.format.OpenSSL });\n   */\n\n\n  static decrypt(cipher, ciphertext, password, cfg) {\n    let _ciphertext = ciphertext; // Apply config defaults\n\n    const _cfg = Object.assign(new Base(), this.cfg, cfg); // Convert string to CipherParams\n\n\n    _ciphertext = this._parse(_ciphertext, _cfg.format); // Derive key and other params\n\n    const derivedParams = _cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, _ciphertext.salt); // Add IV to config\n\n\n    _cfg.iv = derivedParams.iv; // Decrypt\n\n    const plaintext = SerializableCipher.decrypt.call(this, cipher, _ciphertext, derivedParams.key, _cfg);\n    return plaintext;\n  }\n\n}\n/**\n * Configuration options.\n *\n * @property {KDF} kdf\n *     The key derivation function to use to generate a key and IV from a password.\n *     Default: OpenSSL\n */\n\n\nPasswordBasedCipher.cfg = Object.assign(SerializableCipher.cfg, {\n  kdf: OpenSSLKdf\n});\n\nconst swapEndian = word => word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n/**\n * UTF-16 BE encoding strategy.\n */\n\n\nconst Utf16BE = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 BE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray; // Convert\n\n    const utf16Chars = [];\n\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 BE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 BE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length; // Convert\n\n    const words = [];\n\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n\n};\nconst Utf16 = Utf16BE;\n/**\n * UTF-16 LE encoding strategy.\n */\n\nconst Utf16LE = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 LE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray; // Convert\n\n    const utf16Chars = [];\n\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 LE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 LE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length; // Convert\n\n    const words = [];\n\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n\n}; // Reusable object\n\nconst W = [];\n/**\n * SHA-1 hash algorithm.\n */\n\nclass SHA1Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcut\n    const H = this._hash.words; // Working variables\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4]; // Computation\n\n    for (let i = 0; i < 80; i += 1) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n        W[i] = n << 1 | n >>> 31;\n      }\n\n      let t = (a << 5 | a >>> 27) + e + W[i];\n\n      if (i < 20) {\n        t += (b & c | ~b & d) + 0x5a827999;\n      } else if (i < 40) {\n        t += (b ^ c ^ d) + 0x6ed9eba1;\n      } else if (i < 60) {\n        t += (b & c | b & d | c & d) - 0x70e44324;\n      } else\n        /* if (i < 80) */\n        {\n          t += (b ^ c ^ d) - 0x359d3e2a;\n        }\n\n      e = d;\n      d = c;\n      c = b << 30 | b >>> 2;\n      b = a;\n      a = t;\n    } // Intermediate hash value\n\n\n    H[0] = H[0] + a | 0;\n    H[1] = H[1] + b | 0;\n    H[2] = H[2] + c | 0;\n    H[3] = H[3] + d | 0;\n    H[4] = H[4] + e | 0;\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n    this._process(); // Return final computed hash\n\n\n    return this._hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA1('message');\n *     var hash = CryptoJS.SHA1(wordArray);\n */\n\n\nconst SHA1 = Hasher._createHelper(SHA1Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA1(message, key);\n */\n\n\nconst HmacSHA1 = Hasher._createHmacHelper(SHA1Algo); // Initialization and round constants tables\n\n\nconst H = [];\nconst K = []; // Compute constants\n\nconst isPrime = n => {\n  const sqrtN = Math.sqrt(n);\n\n  for (let factor = 2; factor <= sqrtN; factor += 1) {\n    if (!(n % factor)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst getFractionalBits = n => (n - (n | 0)) * 0x100000000 | 0;\n\nlet n = 2;\nlet nPrime = 0;\n\nwhile (nPrime < 64) {\n  if (isPrime(n)) {\n    if (nPrime < 8) {\n      H[nPrime] = getFractionalBits(n ** (1 / 2));\n    }\n\n    K[nPrime] = getFractionalBits(n ** (1 / 3));\n    nPrime += 1;\n  }\n\n  n += 1;\n} // Reusable object\n\n\nconst W$1 = [];\n/**\n * SHA-256 hash algorithm.\n */\n\nclass SHA256Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray(H.slice(0));\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcut\n    const _H = this._hash.words; // Working variables\n\n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7]; // Computation\n\n    for (let i = 0; i < 64; i += 1) {\n      if (i < 16) {\n        W$1[i] = M[offset + i] | 0;\n      } else {\n        const gamma0x = W$1[i - 15];\n        const gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        const gamma1x = W$1[i - 2];\n        const gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W$1[i] = gamma0 + W$1[i - 7] + gamma1 + W$1[i - 16];\n      }\n\n      const ch = e & f ^ ~e & g;\n      const maj = a & b ^ a & c ^ b & c;\n      const sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      const sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      const t1 = h + sigma1 + ch + K[i] + W$1[i];\n      const t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    } // Intermediate hash value\n\n\n    _H[0] = _H[0] + a | 0;\n    _H[1] = _H[1] + b | 0;\n    _H[2] = _H[2] + c | 0;\n    _H[3] = _H[3] + d | 0;\n    _H[4] = _H[4] + e | 0;\n    _H[5] = _H[5] + f | 0;\n    _H[6] = _H[6] + g | 0;\n    _H[7] = _H[7] + h | 0;\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n    this._process(); // Return final computed hash\n\n\n    return this._hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA256('message');\n *     var hash = CryptoJS.SHA256(wordArray);\n */\n\n\nconst SHA256 = Hasher._createHelper(SHA256Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA256(message, key);\n */\n\n\nconst HmacSHA256 = Hasher._createHmacHelper(SHA256Algo);\n/**\n * SHA-224 hash algorithm.\n */\n\n\nclass SHA224Algo extends SHA256Algo {\n  _doReset() {\n    this._hash = new WordArray([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);\n  }\n\n  _doFinalize() {\n    const hash = super._doFinalize.call(this);\n\n    hash.sigBytes -= 4;\n    return hash;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA224('message');\n *     var hash = CryptoJS.SHA224(wordArray);\n */\n\n\nconst SHA224 = SHA256Algo._createHelper(SHA224Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA224(message, key);\n */\n\n\nconst HmacSHA224 = SHA256Algo._createHmacHelper(SHA224Algo); // Constants\n\n\nconst K$1 = [new X64Word(0x428a2f98, 0xd728ae22), new X64Word(0x71374491, 0x23ef65cd), new X64Word(0xb5c0fbcf, 0xec4d3b2f), new X64Word(0xe9b5dba5, 0x8189dbbc), new X64Word(0x3956c25b, 0xf348b538), new X64Word(0x59f111f1, 0xb605d019), new X64Word(0x923f82a4, 0xaf194f9b), new X64Word(0xab1c5ed5, 0xda6d8118), new X64Word(0xd807aa98, 0xa3030242), new X64Word(0x12835b01, 0x45706fbe), new X64Word(0x243185be, 0x4ee4b28c), new X64Word(0x550c7dc3, 0xd5ffb4e2), new X64Word(0x72be5d74, 0xf27b896f), new X64Word(0x80deb1fe, 0x3b1696b1), new X64Word(0x9bdc06a7, 0x25c71235), new X64Word(0xc19bf174, 0xcf692694), new X64Word(0xe49b69c1, 0x9ef14ad2), new X64Word(0xefbe4786, 0x384f25e3), new X64Word(0x0fc19dc6, 0x8b8cd5b5), new X64Word(0x240ca1cc, 0x77ac9c65), new X64Word(0x2de92c6f, 0x592b0275), new X64Word(0x4a7484aa, 0x6ea6e483), new X64Word(0x5cb0a9dc, 0xbd41fbd4), new X64Word(0x76f988da, 0x831153b5), new X64Word(0x983e5152, 0xee66dfab), new X64Word(0xa831c66d, 0x2db43210), new X64Word(0xb00327c8, 0x98fb213f), new X64Word(0xbf597fc7, 0xbeef0ee4), new X64Word(0xc6e00bf3, 0x3da88fc2), new X64Word(0xd5a79147, 0x930aa725), new X64Word(0x06ca6351, 0xe003826f), new X64Word(0x14292967, 0x0a0e6e70), new X64Word(0x27b70a85, 0x46d22ffc), new X64Word(0x2e1b2138, 0x5c26c926), new X64Word(0x4d2c6dfc, 0x5ac42aed), new X64Word(0x53380d13, 0x9d95b3df), new X64Word(0x650a7354, 0x8baf63de), new X64Word(0x766a0abb, 0x3c77b2a8), new X64Word(0x81c2c92e, 0x47edaee6), new X64Word(0x92722c85, 0x1482353b), new X64Word(0xa2bfe8a1, 0x4cf10364), new X64Word(0xa81a664b, 0xbc423001), new X64Word(0xc24b8b70, 0xd0f89791), new X64Word(0xc76c51a3, 0x0654be30), new X64Word(0xd192e819, 0xd6ef5218), new X64Word(0xd6990624, 0x5565a910), new X64Word(0xf40e3585, 0x5771202a), new X64Word(0x106aa070, 0x32bbd1b8), new X64Word(0x19a4c116, 0xb8d2d0c8), new X64Word(0x1e376c08, 0x5141ab53), new X64Word(0x2748774c, 0xdf8eeb99), new X64Word(0x34b0bcb5, 0xe19b48a8), new X64Word(0x391c0cb3, 0xc5c95a63), new X64Word(0x4ed8aa4a, 0xe3418acb), new X64Word(0x5b9cca4f, 0x7763e373), new X64Word(0x682e6ff3, 0xd6b2b8a3), new X64Word(0x748f82ee, 0x5defb2fc), new X64Word(0x78a5636f, 0x43172f60), new X64Word(0x84c87814, 0xa1f0ab72), new X64Word(0x8cc70208, 0x1a6439ec), new X64Word(0x90befffa, 0x23631e28), new X64Word(0xa4506ceb, 0xde82bde9), new X64Word(0xbef9a3f7, 0xb2c67915), new X64Word(0xc67178f2, 0xe372532b), new X64Word(0xca273ece, 0xea26619c), new X64Word(0xd186b8c7, 0x21c0c207), new X64Word(0xeada7dd6, 0xcde0eb1e), new X64Word(0xf57d4f7f, 0xee6ed178), new X64Word(0x06f067aa, 0x72176fba), new X64Word(0x0a637dc5, 0xa2c898a6), new X64Word(0x113f9804, 0xbef90dae), new X64Word(0x1b710b35, 0x131c471b), new X64Word(0x28db77f5, 0x23047d84), new X64Word(0x32caab7b, 0x40c72493), new X64Word(0x3c9ebe0a, 0x15c9bebc), new X64Word(0x431d67c4, 0x9c100d4c), new X64Word(0x4cc5d4be, 0xcb3e42b6), new X64Word(0x597f299c, 0xfc657e2a), new X64Word(0x5fcb6fab, 0x3ad6faec), new X64Word(0x6c44198c, 0x4a475817)]; // Reusable objects\n\nconst W$2 = [];\n\nfor (let i = 0; i < 80; i += 1) {\n  W$2[i] = new X64Word();\n}\n/**\n * SHA-512 hash algorithm.\n */\n\n\nclass SHA512Algo extends Hasher {\n  constructor() {\n    super();\n    this.blockSize = 1024 / 32;\n  }\n\n  _doReset() {\n    this._hash = new X64WordArray([new X64Word(0x6a09e667, 0xf3bcc908), new X64Word(0xbb67ae85, 0x84caa73b), new X64Word(0x3c6ef372, 0xfe94f82b), new X64Word(0xa54ff53a, 0x5f1d36f1), new X64Word(0x510e527f, 0xade682d1), new X64Word(0x9b05688c, 0x2b3e6c1f), new X64Word(0x1f83d9ab, 0xfb41bd6b), new X64Word(0x5be0cd19, 0x137e2179)]);\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcuts\n    const H = this._hash.words;\n    const H0 = H[0];\n    const H1 = H[1];\n    const H2 = H[2];\n    const H3 = H[3];\n    const H4 = H[4];\n    const H5 = H[5];\n    const H6 = H[6];\n    const H7 = H[7];\n    const H0h = H0.high;\n    let H0l = H0.low;\n    const H1h = H1.high;\n    let H1l = H1.low;\n    const H2h = H2.high;\n    let H2l = H2.low;\n    const H3h = H3.high;\n    let H3l = H3.low;\n    const H4h = H4.high;\n    let H4l = H4.low;\n    const H5h = H5.high;\n    let H5l = H5.low;\n    const H6h = H6.high;\n    let H6l = H6.low;\n    const H7h = H7.high;\n    let H7l = H7.low; // Working variables\n\n    let ah = H0h;\n    let al = H0l;\n    let bh = H1h;\n    let bl = H1l;\n    let ch = H2h;\n    let cl = H2l;\n    let dh = H3h;\n    let dl = H3l;\n    let eh = H4h;\n    let el = H4l;\n    let fh = H5h;\n    let fl = H5l;\n    let gh = H6h;\n    let gl = H6l;\n    let hh = H7h;\n    let hl = H7l; // Rounds\n\n    for (let i = 0; i < 80; i += 1) {\n      let Wil;\n      let Wih; // Shortcut\n\n      const Wi = W$2[i]; // Extend message\n\n      if (i < 16) {\n        Wi.high = M[offset + i * 2] | 0;\n        Wih = Wi.high;\n        Wi.low = M[offset + i * 2 + 1] | 0;\n        Wil = Wi.low;\n      } else {\n        // Gamma0\n        const gamma0x = W$2[i - 15];\n        const gamma0xh = gamma0x.high;\n        const gamma0xl = gamma0x.low;\n        const gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;\n        const gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25); // Gamma1\n\n        const gamma1x = W$2[i - 2];\n        const gamma1xh = gamma1x.high;\n        const gamma1xl = gamma1x.low;\n        const gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;\n        const gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\n        const Wi7 = W$2[i - 7];\n        const Wi7h = Wi7.high;\n        const Wi7l = Wi7.low;\n        const Wi16 = W$2[i - 16];\n        const Wi16h = Wi16.high;\n        const Wi16l = Wi16.low;\n        Wil = gamma0l + Wi7l;\n        Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);\n        Wil += gamma1l;\n        Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);\n        Wil += Wi16l;\n        Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);\n        Wi.high = Wih;\n        Wi.low = Wil;\n      }\n\n      const chh = eh & fh ^ ~eh & gh;\n      const chl = el & fl ^ ~el & gl;\n      const majh = ah & bh ^ ah & ch ^ bh & ch;\n      const majl = al & bl ^ al & cl ^ bl & cl;\n      const sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);\n      const sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);\n      const sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);\n      const sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9); // t1 = h + sigma1 + ch + K[i] + W[i]\n\n      const Ki = K$1[i];\n      const Kih = Ki.high;\n      const Kil = Ki.low;\n      let t1l = hl + sigma1l;\n      let t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);\n      t1l += chl;\n      t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);\n      t1l += Kil;\n      t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);\n      t1l += Wil;\n      t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0); // t2 = sigma0 + maj\n\n      const t2l = sigma0l + majl;\n      const t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0); // Update working variables\n\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = dl + t1l | 0;\n      eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = t1l + t2l | 0;\n      ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;\n    } // Intermediate hash value\n\n\n    H0.low = H0l + al;\n    H0l = H0.low;\n    H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);\n    H1.low = H1l + bl;\n    H1l = H1.low;\n    H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);\n    H2.low = H2l + cl;\n    H2l = H2.low;\n    H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);\n    H3.low = H3l + dl;\n    H3l = H3.low;\n    H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);\n    H4.low = H4l + el;\n    H4l = H4.low;\n    H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);\n    H5.low = H5l + fl;\n    H5l = H5.low;\n    H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);\n    H6.low = H6l + gl;\n    H6l = H6.low;\n    H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);\n    H7.low = H7l + hl;\n    H7l = H7.low;\n    H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n    dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n    this._process(); // Convert hash to 32-bit word array before returning\n\n\n    const hash = this._hash.toX32(); // Return final computed hash\n\n\n    return hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA512('message');\n *     var hash = CryptoJS.SHA512(wordArray);\n */\n\n\nconst SHA512 = Hasher._createHelper(SHA512Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA512(message, key);\n */\n\n\nconst HmacSHA512 = Hasher._createHmacHelper(SHA512Algo);\n/**\n * SHA-384 hash algorithm.\n */\n\n\nclass SHA384Algo extends SHA512Algo {\n  _doReset() {\n    this._hash = new X64WordArray([new X64Word(0xcbbb9d5d, 0xc1059ed8), new X64Word(0x629a292a, 0x367cd507), new X64Word(0x9159015a, 0x3070dd17), new X64Word(0x152fecd8, 0xf70e5939), new X64Word(0x67332667, 0xffc00b31), new X64Word(0x8eb44a87, 0x68581511), new X64Word(0xdb0c2e0d, 0x64f98fa7), new X64Word(0x47b5481d, 0xbefa4fa4)]);\n  }\n\n  _doFinalize() {\n    const hash = super._doFinalize.call(this);\n\n    hash.sigBytes -= 16;\n    return hash;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA384('message');\n *     var hash = CryptoJS.SHA384(wordArray);\n */\n\n\nconst SHA384 = SHA512Algo._createHelper(SHA384Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA384(message, key);\n */\n\n\nconst HmacSHA384 = SHA512Algo._createHmacHelper(SHA384Algo); // Constants tables\n\n\nconst RHO_OFFSETS = [];\nconst PI_INDEXES = [];\nconst ROUND_CONSTANTS = []; // Compute Constants\n// Compute rho offset constants\n\nlet _x = 1;\nlet _y = 0;\n\nfor (let t = 0; t < 24; t += 1) {\n  RHO_OFFSETS[_x + 5 * _y] = (t + 1) * (t + 2) / 2 % 64;\n  const newX = _y % 5;\n  const newY = (2 * _x + 3 * _y) % 5;\n  _x = newX;\n  _y = newY;\n} // Compute pi index constants\n\n\nfor (let x = 0; x < 5; x += 1) {\n  for (let y = 0; y < 5; y += 1) {\n    PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n  }\n} // Compute round constants\n\n\nlet LFSR = 0x01;\n\nfor (let i = 0; i < 24; i += 1) {\n  let roundConstantMsw = 0;\n  let roundConstantLsw = 0;\n\n  for (let j = 0; j < 7; j += 1) {\n    if (LFSR & 0x01) {\n      const bitPosition = (1 << j) - 1;\n\n      if (bitPosition < 32) {\n        roundConstantLsw ^= 1 << bitPosition;\n      } else\n        /* if (bitPosition >= 32) */\n        {\n          roundConstantMsw ^= 1 << bitPosition - 32;\n        }\n    } // Compute next LFSR\n\n\n    if (LFSR & 0x80) {\n      // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n      LFSR = LFSR << 1 ^ 0x71;\n    } else {\n      LFSR <<= 1;\n    }\n  }\n\n  ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n} // Reusable objects for temporary values\n\n\nconst T$1 = [];\n\nfor (let i = 0; i < 25; i += 1) {\n  T$1[i] = X64Word.create();\n}\n/**\n * SHA-3 hash algorithm.\n */\n\n\nclass SHA3Algo extends Hasher {\n  constructor(cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {number} outputLength\n     *   The desired number of bits in the output hash.\n     *   Only values permitted are: 224, 256, 384, 512.\n     *   Default: 512\n     */\n    super(Object.assign({\n      outputLength: 512\n    }, cfg));\n  }\n\n  _doReset() {\n    this._state = [];\n    const state = this._state;\n\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = new X64Word();\n    }\n\n    this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcuts\n    const state = this._state;\n    const nBlockSizeLanes = this.blockSize / 2; // Absorb\n\n    for (let i = 0; i < nBlockSizeLanes; i += 1) {\n      // Shortcuts\n      let M2i = M[offset + 2 * i];\n      let M2i1 = M[offset + 2 * i + 1]; // Swap endian\n\n      M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n      M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00; // Absorb message into state\n\n      const lane = state[i];\n      lane.high ^= M2i1;\n      lane.low ^= M2i;\n    } // Rounds\n\n\n    for (let round = 0; round < 24; round += 1) {\n      // Theta\n      for (let x = 0; x < 5; x += 1) {\n        // Mix column lanes\n        let tMsw = 0;\n        let tLsw = 0;\n\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          tMsw ^= lane.high;\n          tLsw ^= lane.low;\n        } // Temporary values\n\n\n        const Tx = T$1[x];\n        Tx.high = tMsw;\n        Tx.low = tLsw;\n      }\n\n      for (let x = 0; x < 5; x += 1) {\n        // Shortcuts\n        const Tx4 = T$1[(x + 4) % 5];\n        const Tx1 = T$1[(x + 1) % 5];\n        const Tx1Msw = Tx1.high;\n        const Tx1Lsw = Tx1.low; // Mix surrounding columns\n\n        const tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n        const tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          lane.high ^= tMsw;\n          lane.low ^= tLsw;\n        }\n      } // Rho Pi\n\n\n      for (let laneIndex = 1; laneIndex < 25; laneIndex += 1) {\n        let tMsw;\n        let tLsw; // Shortcuts\n\n        const lane = state[laneIndex];\n        const laneMsw = lane.high;\n        const laneLsw = lane.low;\n        const rhoOffset = RHO_OFFSETS[laneIndex]; // Rotate lanes\n\n        if (rhoOffset < 32) {\n          tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n          tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n        } else\n          /* if (rhoOffset >= 32) */\n          {\n            tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n            tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n          } // Transpose lanes\n\n\n        const TPiLane = T$1[PI_INDEXES[laneIndex]];\n        TPiLane.high = tMsw;\n        TPiLane.low = tLsw;\n      } // Rho pi at x = y = 0\n\n\n      const T0 = T$1[0];\n      const state0 = state[0];\n      T0.high = state0.high;\n      T0.low = state0.low; // Chi\n\n      for (let x = 0; x < 5; x += 1) {\n        for (let y = 0; y < 5; y += 1) {\n          // Shortcuts\n          const laneIndex = x + 5 * y;\n          const lane = state[laneIndex];\n          const TLane = T$1[laneIndex];\n          const Tx1Lane = T$1[(x + 1) % 5 + 5 * y];\n          const Tx2Lane = T$1[(x + 2) % 5 + 5 * y]; // Mix rows\n\n          lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n          lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n        }\n      } // Iota\n\n\n      const lane = state[0];\n      const roundConstant = ROUND_CONSTANTS[round];\n      lane.high ^= roundConstant.high;\n      lane.low ^= roundConstant.low;\n    }\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsLeft = data.sigBytes * 8;\n    const blockSizeBits = this.blockSize * 32; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n    dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n    data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n    this._process(); // Shortcuts\n\n\n    const state = this._state;\n    const outputLengthBytes = this.cfg.outputLength / 8;\n    const outputLengthLanes = outputLengthBytes / 8; // Squeeze\n\n    const hashWords = [];\n\n    for (let i = 0; i < outputLengthLanes; i += 1) {\n      // Shortcuts\n      const lane = state[i];\n      let laneMsw = lane.high;\n      let laneLsw = lane.low; // Swap endian\n\n      laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n      laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00; // Squeeze state to retrieve hash\n\n      hashWords.push(laneLsw);\n      hashWords.push(laneMsw);\n    } // Return final computed hash\n\n\n    return new WordArray(hashWords, outputLengthBytes);\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._state = this._state.slice(0);\n    const state = clone._state;\n\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = state[i].clone();\n    }\n\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA3('message');\n *     var hash = CryptoJS.SHA3(wordArray);\n */\n\n\nconst SHA3 = Hasher._createHelper(SHA3Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA3(message, key);\n */\n\n\nconst HmacSHA3 = Hasher._createHmacHelper(SHA3Algo);\n/** @preserve\n(c) 2012 by Cédric Mesnil. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted\nprovided that the following conditions are met:\n\n    - Redistributions of source code must retain the above copyright notice, this list of\n    conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list\n    of conditions and the following disclaimer in the documentation and/or other materials\n    provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\nWAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n// Constants table\n\n\nconst _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\n\nconst _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\n\nconst _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\n\nconst _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\n\nconst _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\nconst _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\nconst f1 = (x, y, z) => x ^ y ^ z;\n\nconst f2 = (x, y, z) => x & y | ~x & z;\n\nconst f3 = (x, y, z) => (x | ~y) ^ z;\n\nconst f4 = (x, y, z) => x & z | y & ~z;\n\nconst f5 = (x, y, z) => x ^ (y | ~z);\n\nconst rotl = (x, n) => x << n | x >>> 32 - n;\n/**\n * RIPEMD160 hash algorithm.\n */\n\n\nclass RIPEMD160Algo extends Hasher {\n  _doReset() {\n    this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M; // Swap endian\n\n    for (let i = 0; i < 16; i += 1) {\n      // Shortcuts\n      const offset_i = offset + i;\n      const M_offset_i = _M[offset_i]; // Swap\n\n      _M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n    } // Shortcut\n\n\n    const H = this._hash.words;\n    const hl = _hl.words;\n    const hr = _hr.words;\n    const zl = _zl.words;\n    const zr = _zr.words;\n    const sl = _sl.words;\n    const sr = _sr.words; // Working variables\n\n    let al = H[0];\n    let bl = H[1];\n    let cl = H[2];\n    let dl = H[3];\n    let el = H[4];\n    let ar = H[0];\n    let br = H[1];\n    let cr = H[2];\n    let dr = H[3];\n    let er = H[4]; // Computation\n\n    let t;\n\n    for (let i = 0; i < 80; i += 1) {\n      t = al + _M[offset + zl[i]] | 0;\n\n      if (i < 16) {\n        t += f1(bl, cl, dl) + hl[0];\n      } else if (i < 32) {\n        t += f2(bl, cl, dl) + hl[1];\n      } else if (i < 48) {\n        t += f3(bl, cl, dl) + hl[2];\n      } else if (i < 64) {\n        t += f4(bl, cl, dl) + hl[3];\n      } else {\n        // if (i<80) {\n        t += f5(bl, cl, dl) + hl[4];\n      }\n\n      t |= 0;\n      t = rotl(t, sl[i]);\n      t = t + el | 0;\n      al = el;\n      el = dl;\n      dl = rotl(cl, 10);\n      cl = bl;\n      bl = t;\n      t = ar + _M[offset + zr[i]] | 0;\n\n      if (i < 16) {\n        t += f5(br, cr, dr) + hr[0];\n      } else if (i < 32) {\n        t += f4(br, cr, dr) + hr[1];\n      } else if (i < 48) {\n        t += f3(br, cr, dr) + hr[2];\n      } else if (i < 64) {\n        t += f2(br, cr, dr) + hr[3];\n      } else {\n        // if (i<80) {\n        t += f1(br, cr, dr) + hr[4];\n      }\n\n      t |= 0;\n      t = rotl(t, sr[i]);\n      t = t + er | 0;\n      ar = er;\n      er = dr;\n      dr = rotl(cr, 10);\n      cr = br;\n      br = t;\n    } // Intermediate hash value\n\n\n    t = H[1] + cl + dr | 0;\n    H[1] = H[2] + dl + er | 0;\n    H[2] = H[3] + el + ar | 0;\n    H[3] = H[4] + al + br | 0;\n    H[4] = H[0] + bl + cr | 0;\n    H[0] = t;\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;\n    data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks\n\n    this._process(); // Shortcuts\n\n\n    const hash = this._hash;\n    const H = hash.words; // Swap endian\n\n    for (let i = 0; i < 5; i += 1) {\n      // Shortcut\n      const H_i = H[i]; // Swap\n\n      H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n    } // Return final computed hash\n\n\n    return hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.RIPEMD160('message');\n *     var hash = CryptoJS.RIPEMD160(wordArray);\n */\n\n\nconst RIPEMD160 = Hasher._createHelper(RIPEMD160Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n */\n\n\nconst HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160Algo);\n/**\n * Password-Based Key Derivation Function 2 algorithm.\n */\n\n\nclass PBKDF2Algo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.PBKDF2.create();\n   *     const kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hasher to use. Default: SHA1\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n\n    this.cfg = Object.assign(new Base(), {\n      keySize: 128 / 32,\n      hasher: SHA1Algo,\n      iterations: 1\n    }, cfg);\n  }\n  /**\n   * Computes the Password-Based Key Derivation Function 2.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n\n\n  compute(password, salt) {\n    // Shortcut\n    const {\n      cfg\n    } = this; // Init HMAC\n\n    const hmac = HMAC.create(cfg.hasher, password); // Initial values\n\n    const derivedKey = WordArray.create();\n    const blockIndex = WordArray.create([0x00000001]); // Shortcuts\n\n    const derivedKeyWords = derivedKey.words;\n    const blockIndexWords = blockIndex.words;\n    const {\n      keySize,\n      iterations\n    } = cfg; // Generate key\n\n    while (derivedKeyWords.length < keySize) {\n      const block = hmac.update(salt).finalize(blockIndex);\n      hmac.reset(); // Shortcuts\n\n      const blockWords = block.words;\n      const blockWordsLength = blockWords.length; // Iterations\n\n      let intermediate = block;\n\n      for (let i = 1; i < iterations; i += 1) {\n        intermediate = hmac.finalize(intermediate);\n        hmac.reset(); // Shortcut\n\n        const intermediateWords = intermediate.words; // XOR intermediate with block\n\n        for (let j = 0; j < blockWordsLength; j += 1) {\n          blockWords[j] ^= intermediateWords[j];\n        }\n      }\n\n      derivedKey.concat(block);\n      blockIndexWords[0] += 1;\n    }\n\n    derivedKey.sigBytes = keySize * 4;\n    return derivedKey;\n  }\n\n}\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.PBKDF2(password, salt);\n *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n */\n\n\nconst PBKDF2 = (password, salt, cfg) => PBKDF2Algo.create(cfg).compute(password, salt); // Lookup tables\n\n\nconst _SBOX = [];\nconst INV_SBOX = [];\nconst _SUB_MIX_0 = [];\nconst _SUB_MIX_1 = [];\nconst _SUB_MIX_2 = [];\nconst _SUB_MIX_3 = [];\nconst INV_SUB_MIX_0 = [];\nconst INV_SUB_MIX_1 = [];\nconst INV_SUB_MIX_2 = [];\nconst INV_SUB_MIX_3 = []; // Compute lookup tables\n// Compute double table\n\nconst d = [];\n\nfor (let i = 0; i < 256; i += 1) {\n  if (i < 128) {\n    d[i] = i << 1;\n  } else {\n    d[i] = i << 1 ^ 0x11b;\n  }\n} // Walk GF(2^8)\n\n\nlet x = 0;\nlet xi = 0;\n\nfor (let i = 0; i < 256; i += 1) {\n  // Compute sbox\n  let sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n  sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n  _SBOX[x] = sx;\n  INV_SBOX[sx] = x; // Compute multiplication\n\n  const x2 = d[x];\n  const x4 = d[x2];\n  const x8 = d[x4]; // Compute sub bytes, mix columns tables\n\n  let t = d[sx] * 0x101 ^ sx * 0x1010100;\n  _SUB_MIX_0[x] = t << 24 | t >>> 8;\n  _SUB_MIX_1[x] = t << 16 | t >>> 16;\n  _SUB_MIX_2[x] = t << 8 | t >>> 24;\n  _SUB_MIX_3[x] = t; // Compute inv sub bytes, inv mix columns tables\n\n  t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n  INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n  INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n  INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n  INV_SUB_MIX_3[sx] = t; // Compute next counter\n\n  if (!x) {\n    xi = 1;\n    x = xi;\n  } else {\n    x = x2 ^ d[d[d[x8 ^ x2]]];\n    xi ^= d[d[xi]];\n  }\n} // Precomputed Rcon lookup\n\n\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n/**\n * AES block cipher algorithm.\n */\n\nclass AESAlgo extends BlockCipher {\n  constructor(...args) {\n    super(...args);\n    this.keySize = 256 / 32;\n  }\n\n  _doReset() {\n    let t; // Skip reset of nRounds has been set before and key did not change\n\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    } // Shortcuts\n\n\n    this._keyPriorReset = this._key;\n    const key = this._keyPriorReset;\n    const keyWords = key.words;\n    const keySize = key.sigBytes / 4; // Compute number of rounds\n\n    this._nRounds = keySize + 6;\n    const nRounds = this._nRounds; // Compute number of key schedule rows\n\n    const ksRows = (nRounds + 1) * 4; // Compute key schedule\n\n    this._keySchedule = [];\n    const keySchedule = this._keySchedule;\n\n    for (let ksRow = 0; ksRow < ksRows; ksRow += 1) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      } else {\n        t = keySchedule[ksRow - 1];\n\n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = t << 8 | t >>> 24; // Sub word\n\n          t = _SBOX[t >>> 24] << 24 | _SBOX[t >>> 16 & 0xff] << 16 | _SBOX[t >>> 8 & 0xff] << 8 | _SBOX[t & 0xff]; // Mix Rcon\n\n          t ^= RCON[ksRow / keySize | 0] << 24;\n        } else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = _SBOX[t >>> 24] << 24 | _SBOX[t >>> 16 & 0xff] << 16 | _SBOX[t >>> 8 & 0xff] << 8 | _SBOX[t & 0xff];\n        }\n\n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    } // Compute inv key schedule\n\n\n    this._invKeySchedule = [];\n    const invKeySchedule = this._invKeySchedule;\n\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow += 1) {\n      const ksRow = ksRows - invKsRow;\n\n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = INV_SUB_MIX_0[_SBOX[t >>> 24]] ^ INV_SUB_MIX_1[_SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[_SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[_SBOX[t & 0xff]];\n      }\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._keySchedule, _SUB_MIX_0, _SUB_MIX_1, _SUB_MIX_2, _SUB_MIX_3, _SBOX);\n  }\n\n  decryptBlock(M, offset) {\n    const _M = M; // Swap 2nd and 4th rows\n\n    let t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n\n    this._doCryptBlock(_M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX); // Inv swap 2nd and 4th rows\n\n\n    t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n  }\n\n  _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n    const _M = M; // Shortcut\n\n    const nRounds = this._nRounds; // Get input, add round key\n\n    let s0 = _M[offset] ^ keySchedule[0];\n    let s1 = _M[offset + 1] ^ keySchedule[1];\n    let s2 = _M[offset + 2] ^ keySchedule[2];\n    let s3 = _M[offset + 3] ^ keySchedule[3]; // Key schedule row counter\n\n    let ksRow = 4; // Rounds\n\n    for (let round = 1; round < nRounds; round += 1) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1; // Update state\n\n      s0 = t0;\n      s1 = t1;\n      s2 = t2;\n      s3 = t3;\n    } // Shift rows, sub bytes, add round key\n\n\n    const t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1; // Set output\n\n    _M[offset] = t0;\n    _M[offset + 1] = t1;\n    _M[offset + 2] = t2;\n    _M[offset + 3] = t3;\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n */\n\n\nconst AES = BlockCipher._createHelper(AESAlgo); // Permuted Choice 1 constants\n\n\nconst PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]; // Permuted Choice 2 constants\n\nconst PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]; // Cumulative bit shift constants\n\nconst BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28]; // SBOXes and round permutation constants\n\nconst SBOX_P = [{\n  0x0: 0x808200,\n  0x10000000: 0x8000,\n  0x20000000: 0x808002,\n  0x30000000: 0x2,\n  0x40000000: 0x200,\n  0x50000000: 0x808202,\n  0x60000000: 0x800202,\n  0x70000000: 0x800000,\n  0x80000000: 0x202,\n  0x90000000: 0x800200,\n  0xa0000000: 0x8200,\n  0xb0000000: 0x808000,\n  0xc0000000: 0x8002,\n  0xd0000000: 0x800002,\n  0xe0000000: 0x0,\n  0xf0000000: 0x8202,\n  0x8000000: 0x0,\n  0x18000000: 0x808202,\n  0x28000000: 0x8202,\n  0x38000000: 0x8000,\n  0x48000000: 0x808200,\n  0x58000000: 0x200,\n  0x68000000: 0x808002,\n  0x78000000: 0x2,\n  0x88000000: 0x800200,\n  0x98000000: 0x8200,\n  0xa8000000: 0x808000,\n  0xb8000000: 0x800202,\n  0xc8000000: 0x800002,\n  0xd8000000: 0x8002,\n  0xe8000000: 0x202,\n  0xf8000000: 0x800000,\n  0x1: 0x8000,\n  0x10000001: 0x2,\n  0x20000001: 0x808200,\n  0x30000001: 0x800000,\n  0x40000001: 0x808002,\n  0x50000001: 0x8200,\n  0x60000001: 0x200,\n  0x70000001: 0x800202,\n  0x80000001: 0x808202,\n  0x90000001: 0x808000,\n  0xa0000001: 0x800002,\n  0xb0000001: 0x8202,\n  0xc0000001: 0x202,\n  0xd0000001: 0x800200,\n  0xe0000001: 0x8002,\n  0xf0000001: 0x0,\n  0x8000001: 0x808202,\n  0x18000001: 0x808000,\n  0x28000001: 0x800000,\n  0x38000001: 0x200,\n  0x48000001: 0x8000,\n  0x58000001: 0x800002,\n  0x68000001: 0x2,\n  0x78000001: 0x8202,\n  0x88000001: 0x8002,\n  0x98000001: 0x800202,\n  0xa8000001: 0x202,\n  0xb8000001: 0x808200,\n  0xc8000001: 0x800200,\n  0xd8000001: 0x0,\n  0xe8000001: 0x8200,\n  0xf8000001: 0x808002\n}, {\n  0x0: 0x40084010,\n  0x1000000: 0x4000,\n  0x2000000: 0x80000,\n  0x3000000: 0x40080010,\n  0x4000000: 0x40000010,\n  0x5000000: 0x40084000,\n  0x6000000: 0x40004000,\n  0x7000000: 0x10,\n  0x8000000: 0x84000,\n  0x9000000: 0x40004010,\n  0xa000000: 0x40000000,\n  0xb000000: 0x84010,\n  0xc000000: 0x80010,\n  0xd000000: 0x0,\n  0xe000000: 0x4010,\n  0xf000000: 0x40080000,\n  0x800000: 0x40004000,\n  0x1800000: 0x84010,\n  0x2800000: 0x10,\n  0x3800000: 0x40004010,\n  0x4800000: 0x40084010,\n  0x5800000: 0x40000000,\n  0x6800000: 0x80000,\n  0x7800000: 0x40080010,\n  0x8800000: 0x80010,\n  0x9800000: 0x0,\n  0xa800000: 0x4000,\n  0xb800000: 0x40080000,\n  0xc800000: 0x40000010,\n  0xd800000: 0x84000,\n  0xe800000: 0x40084000,\n  0xf800000: 0x4010,\n  0x10000000: 0x0,\n  0x11000000: 0x40080010,\n  0x12000000: 0x40004010,\n  0x13000000: 0x40084000,\n  0x14000000: 0x40080000,\n  0x15000000: 0x10,\n  0x16000000: 0x84010,\n  0x17000000: 0x4000,\n  0x18000000: 0x4010,\n  0x19000000: 0x80000,\n  0x1a000000: 0x80010,\n  0x1b000000: 0x40000010,\n  0x1c000000: 0x84000,\n  0x1d000000: 0x40004000,\n  0x1e000000: 0x40000000,\n  0x1f000000: 0x40084010,\n  0x10800000: 0x84010,\n  0x11800000: 0x80000,\n  0x12800000: 0x40080000,\n  0x13800000: 0x4000,\n  0x14800000: 0x40004000,\n  0x15800000: 0x40084010,\n  0x16800000: 0x10,\n  0x17800000: 0x40000000,\n  0x18800000: 0x40084000,\n  0x19800000: 0x40000010,\n  0x1a800000: 0x40004010,\n  0x1b800000: 0x80010,\n  0x1c800000: 0x0,\n  0x1d800000: 0x4010,\n  0x1e800000: 0x40080010,\n  0x1f800000: 0x84000\n}, {\n  0x0: 0x104,\n  0x100000: 0x0,\n  0x200000: 0x4000100,\n  0x300000: 0x10104,\n  0x400000: 0x10004,\n  0x500000: 0x4000004,\n  0x600000: 0x4010104,\n  0x700000: 0x4010000,\n  0x800000: 0x4000000,\n  0x900000: 0x4010100,\n  0xa00000: 0x10100,\n  0xb00000: 0x4010004,\n  0xc00000: 0x4000104,\n  0xd00000: 0x10000,\n  0xe00000: 0x4,\n  0xf00000: 0x100,\n  0x80000: 0x4010100,\n  0x180000: 0x4010004,\n  0x280000: 0x0,\n  0x380000: 0x4000100,\n  0x480000: 0x4000004,\n  0x580000: 0x10000,\n  0x680000: 0x10004,\n  0x780000: 0x104,\n  0x880000: 0x4,\n  0x980000: 0x100,\n  0xa80000: 0x4010000,\n  0xb80000: 0x10104,\n  0xc80000: 0x10100,\n  0xd80000: 0x4000104,\n  0xe80000: 0x4010104,\n  0xf80000: 0x4000000,\n  0x1000000: 0x4010100,\n  0x1100000: 0x10004,\n  0x1200000: 0x10000,\n  0x1300000: 0x4000100,\n  0x1400000: 0x100,\n  0x1500000: 0x4010104,\n  0x1600000: 0x4000004,\n  0x1700000: 0x0,\n  0x1800000: 0x4000104,\n  0x1900000: 0x4000000,\n  0x1a00000: 0x4,\n  0x1b00000: 0x10100,\n  0x1c00000: 0x4010000,\n  0x1d00000: 0x104,\n  0x1e00000: 0x10104,\n  0x1f00000: 0x4010004,\n  0x1080000: 0x4000000,\n  0x1180000: 0x104,\n  0x1280000: 0x4010100,\n  0x1380000: 0x0,\n  0x1480000: 0x10004,\n  0x1580000: 0x4000100,\n  0x1680000: 0x100,\n  0x1780000: 0x4010004,\n  0x1880000: 0x10000,\n  0x1980000: 0x4010104,\n  0x1a80000: 0x10104,\n  0x1b80000: 0x4000004,\n  0x1c80000: 0x4000104,\n  0x1d80000: 0x4010000,\n  0x1e80000: 0x4,\n  0x1f80000: 0x10100\n}, {\n  0x0: 0x80401000,\n  0x10000: 0x80001040,\n  0x20000: 0x401040,\n  0x30000: 0x80400000,\n  0x40000: 0x0,\n  0x50000: 0x401000,\n  0x60000: 0x80000040,\n  0x70000: 0x400040,\n  0x80000: 0x80000000,\n  0x90000: 0x400000,\n  0xa0000: 0x40,\n  0xb0000: 0x80001000,\n  0xc0000: 0x80400040,\n  0xd0000: 0x1040,\n  0xe0000: 0x1000,\n  0xf0000: 0x80401040,\n  0x8000: 0x80001040,\n  0x18000: 0x40,\n  0x28000: 0x80400040,\n  0x38000: 0x80001000,\n  0x48000: 0x401000,\n  0x58000: 0x80401040,\n  0x68000: 0x0,\n  0x78000: 0x80400000,\n  0x88000: 0x1000,\n  0x98000: 0x80401000,\n  0xa8000: 0x400000,\n  0xb8000: 0x1040,\n  0xc8000: 0x80000000,\n  0xd8000: 0x400040,\n  0xe8000: 0x401040,\n  0xf8000: 0x80000040,\n  0x100000: 0x400040,\n  0x110000: 0x401000,\n  0x120000: 0x80000040,\n  0x130000: 0x0,\n  0x140000: 0x1040,\n  0x150000: 0x80400040,\n  0x160000: 0x80401000,\n  0x170000: 0x80001040,\n  0x180000: 0x80401040,\n  0x190000: 0x80000000,\n  0x1a0000: 0x80400000,\n  0x1b0000: 0x401040,\n  0x1c0000: 0x80001000,\n  0x1d0000: 0x400000,\n  0x1e0000: 0x40,\n  0x1f0000: 0x1000,\n  0x108000: 0x80400000,\n  0x118000: 0x80401040,\n  0x128000: 0x0,\n  0x138000: 0x401000,\n  0x148000: 0x400040,\n  0x158000: 0x80000000,\n  0x168000: 0x80001040,\n  0x178000: 0x40,\n  0x188000: 0x80000040,\n  0x198000: 0x1000,\n  0x1a8000: 0x80001000,\n  0x1b8000: 0x80400040,\n  0x1c8000: 0x1040,\n  0x1d8000: 0x80401000,\n  0x1e8000: 0x400000,\n  0x1f8000: 0x401040\n}, {\n  0x0: 0x80,\n  0x1000: 0x1040000,\n  0x2000: 0x40000,\n  0x3000: 0x20000000,\n  0x4000: 0x20040080,\n  0x5000: 0x1000080,\n  0x6000: 0x21000080,\n  0x7000: 0x40080,\n  0x8000: 0x1000000,\n  0x9000: 0x20040000,\n  0xa000: 0x20000080,\n  0xb000: 0x21040080,\n  0xc000: 0x21040000,\n  0xd000: 0x0,\n  0xe000: 0x1040080,\n  0xf000: 0x21000000,\n  0x800: 0x1040080,\n  0x1800: 0x21000080,\n  0x2800: 0x80,\n  0x3800: 0x1040000,\n  0x4800: 0x40000,\n  0x5800: 0x20040080,\n  0x6800: 0x21040000,\n  0x7800: 0x20000000,\n  0x8800: 0x20040000,\n  0x9800: 0x0,\n  0xa800: 0x21040080,\n  0xb800: 0x1000080,\n  0xc800: 0x20000080,\n  0xd800: 0x21000000,\n  0xe800: 0x1000000,\n  0xf800: 0x40080,\n  0x10000: 0x40000,\n  0x11000: 0x80,\n  0x12000: 0x20000000,\n  0x13000: 0x21000080,\n  0x14000: 0x1000080,\n  0x15000: 0x21040000,\n  0x16000: 0x20040080,\n  0x17000: 0x1000000,\n  0x18000: 0x21040080,\n  0x19000: 0x21000000,\n  0x1a000: 0x1040000,\n  0x1b000: 0x20040000,\n  0x1c000: 0x40080,\n  0x1d000: 0x20000080,\n  0x1e000: 0x0,\n  0x1f000: 0x1040080,\n  0x10800: 0x21000080,\n  0x11800: 0x1000000,\n  0x12800: 0x1040000,\n  0x13800: 0x20040080,\n  0x14800: 0x20000000,\n  0x15800: 0x1040080,\n  0x16800: 0x80,\n  0x17800: 0x21040000,\n  0x18800: 0x40080,\n  0x19800: 0x21040080,\n  0x1a800: 0x0,\n  0x1b800: 0x21000000,\n  0x1c800: 0x1000080,\n  0x1d800: 0x40000,\n  0x1e800: 0x20040000,\n  0x1f800: 0x20000080\n}, {\n  0x0: 0x10000008,\n  0x100: 0x2000,\n  0x200: 0x10200000,\n  0x300: 0x10202008,\n  0x400: 0x10002000,\n  0x500: 0x200000,\n  0x600: 0x200008,\n  0x700: 0x10000000,\n  0x800: 0x0,\n  0x900: 0x10002008,\n  0xa00: 0x202000,\n  0xb00: 0x8,\n  0xc00: 0x10200008,\n  0xd00: 0x202008,\n  0xe00: 0x2008,\n  0xf00: 0x10202000,\n  0x80: 0x10200000,\n  0x180: 0x10202008,\n  0x280: 0x8,\n  0x380: 0x200000,\n  0x480: 0x202008,\n  0x580: 0x10000008,\n  0x680: 0x10002000,\n  0x780: 0x2008,\n  0x880: 0x200008,\n  0x980: 0x2000,\n  0xa80: 0x10002008,\n  0xb80: 0x10200008,\n  0xc80: 0x0,\n  0xd80: 0x10202000,\n  0xe80: 0x202000,\n  0xf80: 0x10000000,\n  0x1000: 0x10002000,\n  0x1100: 0x10200008,\n  0x1200: 0x10202008,\n  0x1300: 0x2008,\n  0x1400: 0x200000,\n  0x1500: 0x10000000,\n  0x1600: 0x10000008,\n  0x1700: 0x202000,\n  0x1800: 0x202008,\n  0x1900: 0x0,\n  0x1a00: 0x8,\n  0x1b00: 0x10200000,\n  0x1c00: 0x2000,\n  0x1d00: 0x10002008,\n  0x1e00: 0x10202000,\n  0x1f00: 0x200008,\n  0x1080: 0x8,\n  0x1180: 0x202000,\n  0x1280: 0x200000,\n  0x1380: 0x10000008,\n  0x1480: 0x10002000,\n  0x1580: 0x2008,\n  0x1680: 0x10202008,\n  0x1780: 0x10200000,\n  0x1880: 0x10202000,\n  0x1980: 0x10200008,\n  0x1a80: 0x2000,\n  0x1b80: 0x202008,\n  0x1c80: 0x200008,\n  0x1d80: 0x0,\n  0x1e80: 0x10000000,\n  0x1f80: 0x10002008\n}, {\n  0x0: 0x100000,\n  0x10: 0x2000401,\n  0x20: 0x400,\n  0x30: 0x100401,\n  0x40: 0x2100401,\n  0x50: 0x0,\n  0x60: 0x1,\n  0x70: 0x2100001,\n  0x80: 0x2000400,\n  0x90: 0x100001,\n  0xa0: 0x2000001,\n  0xb0: 0x2100400,\n  0xc0: 0x2100000,\n  0xd0: 0x401,\n  0xe0: 0x100400,\n  0xf0: 0x2000000,\n  0x8: 0x2100001,\n  0x18: 0x0,\n  0x28: 0x2000401,\n  0x38: 0x2100400,\n  0x48: 0x100000,\n  0x58: 0x2000001,\n  0x68: 0x2000000,\n  0x78: 0x401,\n  0x88: 0x100401,\n  0x98: 0x2000400,\n  0xa8: 0x2100000,\n  0xb8: 0x100001,\n  0xc8: 0x400,\n  0xd8: 0x2100401,\n  0xe8: 0x1,\n  0xf8: 0x100400,\n  0x100: 0x2000000,\n  0x110: 0x100000,\n  0x120: 0x2000401,\n  0x130: 0x2100001,\n  0x140: 0x100001,\n  0x150: 0x2000400,\n  0x160: 0x2100400,\n  0x170: 0x100401,\n  0x180: 0x401,\n  0x190: 0x2100401,\n  0x1a0: 0x100400,\n  0x1b0: 0x1,\n  0x1c0: 0x0,\n  0x1d0: 0x2100000,\n  0x1e0: 0x2000001,\n  0x1f0: 0x400,\n  0x108: 0x100400,\n  0x118: 0x2000401,\n  0x128: 0x2100001,\n  0x138: 0x1,\n  0x148: 0x2000000,\n  0x158: 0x100000,\n  0x168: 0x401,\n  0x178: 0x2100400,\n  0x188: 0x2000001,\n  0x198: 0x2100000,\n  0x1a8: 0x0,\n  0x1b8: 0x2100401,\n  0x1c8: 0x100401,\n  0x1d8: 0x400,\n  0x1e8: 0x2000400,\n  0x1f8: 0x100001\n}, {\n  0x0: 0x8000820,\n  0x1: 0x20000,\n  0x2: 0x8000000,\n  0x3: 0x20,\n  0x4: 0x20020,\n  0x5: 0x8020820,\n  0x6: 0x8020800,\n  0x7: 0x800,\n  0x8: 0x8020000,\n  0x9: 0x8000800,\n  0xa: 0x20800,\n  0xb: 0x8020020,\n  0xc: 0x820,\n  0xd: 0x0,\n  0xe: 0x8000020,\n  0xf: 0x20820,\n  0x80000000: 0x800,\n  0x80000001: 0x8020820,\n  0x80000002: 0x8000820,\n  0x80000003: 0x8000000,\n  0x80000004: 0x8020000,\n  0x80000005: 0x20800,\n  0x80000006: 0x20820,\n  0x80000007: 0x20,\n  0x80000008: 0x8000020,\n  0x80000009: 0x820,\n  0x8000000a: 0x20020,\n  0x8000000b: 0x8020800,\n  0x8000000c: 0x0,\n  0x8000000d: 0x8020020,\n  0x8000000e: 0x8000800,\n  0x8000000f: 0x20000,\n  0x10: 0x20820,\n  0x11: 0x8020800,\n  0x12: 0x20,\n  0x13: 0x800,\n  0x14: 0x8000800,\n  0x15: 0x8000020,\n  0x16: 0x8020020,\n  0x17: 0x20000,\n  0x18: 0x0,\n  0x19: 0x20020,\n  0x1a: 0x8020000,\n  0x1b: 0x8000820,\n  0x1c: 0x8020820,\n  0x1d: 0x20800,\n  0x1e: 0x820,\n  0x1f: 0x8000000,\n  0x80000010: 0x20000,\n  0x80000011: 0x800,\n  0x80000012: 0x8020020,\n  0x80000013: 0x20820,\n  0x80000014: 0x20,\n  0x80000015: 0x8020000,\n  0x80000016: 0x8000000,\n  0x80000017: 0x8000820,\n  0x80000018: 0x8020820,\n  0x80000019: 0x8000020,\n  0x8000001a: 0x8000800,\n  0x8000001b: 0x0,\n  0x8000001c: 0x20800,\n  0x8000001d: 0x820,\n  0x8000001e: 0x20020,\n  0x8000001f: 0x8020800\n}]; // Masks that select the SBOX input\n\nconst SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f]; // Swap bits across the left and right words\n\nfunction exchangeLR(offset, mask) {\n  const t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n  this._rBlock ^= t;\n  this._lBlock ^= t << offset;\n}\n\nfunction exchangeRL(offset, mask) {\n  const t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n  this._lBlock ^= t;\n  this._rBlock ^= t << offset;\n}\n/**\n * DES block cipher algorithm.\n */\n\n\nclass DESAlgo extends BlockCipher {\n  constructor(...args) {\n    super(...args);\n    this.keySize = 64 / 32;\n    this.ivSize = 64 / 32;\n    this.blockSize = 64 / 32;\n  }\n\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words; // Select 56 bits according to PC1\n\n    const keyBits = [];\n\n    for (let i = 0; i < 56; i += 1) {\n      const keyBitPos = PC1[i] - 1;\n      keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n    } // Assemble 16 subkeys\n\n\n    this._subKeys = [];\n    const subKeys = this._subKeys;\n\n    for (let nSubKey = 0; nSubKey < 16; nSubKey += 1) {\n      // Create subkey\n      subKeys[nSubKey] = [];\n      const subKey = subKeys[nSubKey]; // Shortcut\n\n      const bitShift = BIT_SHIFTS[nSubKey]; // Select 48 bits according to PC2\n\n      for (let i = 0; i < 24; i += 1) {\n        // Select from the left 28 key bits\n        subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6; // Select from the right 28 key bits\n\n        subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;\n      } // Since each subkey is applied to an expanded 32-bit input,\n      // the subkey can be broken into 8 values scaled to 32-bits,\n      // which allows the key to be used without expansion\n\n\n      subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n\n      for (let i = 1; i < 7; i += 1) {\n        subKey[i] >>>= (i - 1) * 4 + 3;\n      }\n\n      subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n    } // Compute inverse subkeys\n\n\n    this._invSubKeys = [];\n    const invSubKeys = this._invSubKeys;\n\n    for (let i = 0; i < 16; i += 1) {\n      invSubKeys[i] = subKeys[15 - i];\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._subKeys);\n  }\n\n  decryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._invSubKeys);\n  }\n\n  _doCryptBlock(M, offset, subKeys) {\n    const _M = M; // Get input\n\n    this._lBlock = M[offset];\n    this._rBlock = M[offset + 1]; // Initial permutation\n\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeLR.call(this, 1, 0x55555555); // Rounds\n\n    for (let round = 0; round < 16; round += 1) {\n      // Shortcuts\n      const subKey = subKeys[round];\n      const lBlock = this._lBlock;\n      const rBlock = this._rBlock; // Feistel function\n\n      let f = 0;\n\n      for (let i = 0; i < 8; i += 1) {\n        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n      }\n\n      this._lBlock = rBlock;\n      this._rBlock = lBlock ^ f;\n    } // Undo swap from last round\n\n\n    const t = this._lBlock;\n    this._lBlock = this._rBlock;\n    this._rBlock = t; // Final permutation\n\n    exchangeLR.call(this, 1, 0x55555555);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeLR.call(this, 4, 0x0f0f0f0f); // Set output\n\n    _M[offset] = this._lBlock;\n    _M[offset + 1] = this._rBlock;\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n */\n\n\nconst DES = BlockCipher._createHelper(DESAlgo);\n/**\n * Triple-DES block cipher algorithm.\n */\n\n\nclass TripleDESAlgo extends BlockCipher {\n  constructor(...args) {\n    super(...args);\n    this.keySize = 192 / 32;\n    this.ivSize = 64 / 32;\n    this.blockSize = 64 / 32;\n  }\n\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words; // Create DES instances\n\n    this._des1 = DESAlgo.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n    this._des2 = DESAlgo.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n    this._des3 = DESAlgo.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n  }\n\n  encryptBlock(M, offset) {\n    this._des1.encryptBlock(M, offset);\n\n    this._des2.decryptBlock(M, offset);\n\n    this._des3.encryptBlock(M, offset);\n  }\n\n  decryptBlock(M, offset) {\n    this._des3.decryptBlock(M, offset);\n\n    this._des2.encryptBlock(M, offset);\n\n    this._des1.decryptBlock(M, offset);\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n */\n\n\nconst TripleDES = BlockCipher._createHelper(TripleDESAlgo); // Reusable objects\n\n\nconst S = [];\nconst C_ = [];\nconst G = [];\n\nfunction nextState() {\n  // Shortcuts\n  const X = this._X;\n  const C = this._C; // Save old counter values\n\n  for (let i = 0; i < 8; i += 1) {\n    C_[i] = C[i];\n  } // Calculate new counter values\n\n\n  C[0] = C[0] + 0x4d34d34d + this._b | 0;\n  C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n  C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n  C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n  C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n  C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n  C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n  C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n  this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0; // Calculate the g-values\n\n  for (let i = 0; i < 8; i += 1) {\n    const gx = X[i] + C[i]; // Construct high and low argument for squaring\n\n    const ga = gx & 0xffff;\n    const gb = gx >>> 16; // Calculate high and low result of squaring\n\n    const gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n    const gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low\n\n    G[i] = gh ^ gl;\n  } // Calculate new state values\n\n\n  X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n  X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n  X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n  X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n  X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n  X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n  X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n  X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n}\n/**\n * Rabbit stream cipher algorithm\n */\n\n\nclass RabbitAlgo extends StreamCipher {\n  constructor(...args) {\n    super(...args);\n    this.blockSize = 128 / 32;\n    this.ivSize = 64 / 32;\n  }\n\n  _doReset() {\n    // Shortcuts\n    const K = this._key.words;\n    const {\n      iv\n    } = this.cfg; // Swap endian\n\n    for (let i = 0; i < 4; i += 1) {\n      K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;\n    } // Generate initial state values\n\n\n    this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];\n    const X = this._X; // Generate initial counter values\n\n    this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n    const C = this._C; // Carry bit\n\n    this._b = 0; // Iterate the system four times\n\n    for (let i = 0; i < 4; i += 1) {\n      nextState.call(this);\n    } // Modify the counters\n\n\n    for (let i = 0; i < 8; i += 1) {\n      C[i] ^= X[i + 4 & 7];\n    } // IV setup\n\n\n    if (iv) {\n      // Shortcuts\n      const IV = iv.words;\n      const IV_0 = IV[0];\n      const IV_1 = IV[1]; // Generate four subvectors\n\n      const i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n      const i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n      const i1 = i0 >>> 16 | i2 & 0xffff0000;\n      const i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values\n\n      C[0] ^= i0;\n      C[1] ^= i1;\n      C[2] ^= i2;\n      C[3] ^= i3;\n      C[4] ^= i0;\n      C[5] ^= i1;\n      C[6] ^= i2;\n      C[7] ^= i3; // Iterate the system four times\n\n      for (let i = 0; i < 4; i += 1) {\n        nextState.call(this);\n      }\n    }\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M; // Shortcut\n\n    const X = this._X; // Iterate the system\n\n    nextState.call(this); // Generate four keystream words\n\n    S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n    S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n    S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n    S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n    for (let i = 0; i < 4; i += 1) {\n      // Swap endian\n      S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00; // Encrypt\n\n      _M[offset + i] ^= S[i];\n    }\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n */\n\n\nconst Rabbit = StreamCipher._createHelper(RabbitAlgo); // Reusable objects\n\n\nconst S$1 = [];\nconst C_$1 = [];\nconst G$1 = [];\n\nfunction nextState$1() {\n  // Shortcuts\n  const X = this._X;\n  const C = this._C; // Save old counter values\n\n  for (let i = 0; i < 8; i += 1) {\n    C_$1[i] = C[i];\n  } // Calculate new counter values\n\n\n  C[0] = C[0] + 0x4d34d34d + this._b | 0;\n  C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_$1[0] >>> 0 ? 1 : 0) | 0;\n  C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_$1[1] >>> 0 ? 1 : 0) | 0;\n  C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_$1[2] >>> 0 ? 1 : 0) | 0;\n  C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_$1[3] >>> 0 ? 1 : 0) | 0;\n  C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_$1[4] >>> 0 ? 1 : 0) | 0;\n  C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_$1[5] >>> 0 ? 1 : 0) | 0;\n  C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_$1[6] >>> 0 ? 1 : 0) | 0;\n  this._b = C[7] >>> 0 < C_$1[7] >>> 0 ? 1 : 0; // Calculate the g-values\n\n  for (let i = 0; i < 8; i += 1) {\n    const gx = X[i] + C[i]; // Construct high and low argument for squaring\n\n    const ga = gx & 0xffff;\n    const gb = gx >>> 16; // Calculate high and low result of squaring\n\n    const gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n    const gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low\n\n    G$1[i] = gh ^ gl;\n  } // Calculate new state values\n\n\n  X[0] = G$1[0] + (G$1[7] << 16 | G$1[7] >>> 16) + (G$1[6] << 16 | G$1[6] >>> 16) | 0;\n  X[1] = G$1[1] + (G$1[0] << 8 | G$1[0] >>> 24) + G$1[7] | 0;\n  X[2] = G$1[2] + (G$1[1] << 16 | G$1[1] >>> 16) + (G$1[0] << 16 | G$1[0] >>> 16) | 0;\n  X[3] = G$1[3] + (G$1[2] << 8 | G$1[2] >>> 24) + G$1[1] | 0;\n  X[4] = G$1[4] + (G$1[3] << 16 | G$1[3] >>> 16) + (G$1[2] << 16 | G$1[2] >>> 16) | 0;\n  X[5] = G$1[5] + (G$1[4] << 8 | G$1[4] >>> 24) + G$1[3] | 0;\n  X[6] = G$1[6] + (G$1[5] << 16 | G$1[5] >>> 16) + (G$1[4] << 16 | G$1[4] >>> 16) | 0;\n  X[7] = G$1[7] + (G$1[6] << 8 | G$1[6] >>> 24) + G$1[5] | 0;\n}\n/**\n * Rabbit stream cipher algorithm.\n *\n * This is a legacy version that neglected to convert the key to little-endian.\n * This error doesn't affect the cipher's security,\n * but it does affect its compatibility with other implementations.\n */\n\n\nclass RabbitLegacyAlgo extends StreamCipher {\n  constructor(...args) {\n    super(...args);\n    this.blockSize = 128 / 32;\n    this.ivSize = 64 / 32;\n  }\n\n  _doReset() {\n    // Shortcuts\n    const K = this._key.words;\n    const {\n      iv\n    } = this.cfg; // Generate initial state values\n\n    this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];\n    const X = this._X; // Generate initial counter values\n\n    this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n    const C = this._C; // Carry bit\n\n    this._b = 0; // Iterate the system four times\n\n    for (let i = 0; i < 4; i += 1) {\n      nextState$1.call(this);\n    } // Modify the counters\n\n\n    for (let i = 0; i < 8; i += 1) {\n      C[i] ^= X[i + 4 & 7];\n    } // IV setup\n\n\n    if (iv) {\n      // Shortcuts\n      const IV = iv.words;\n      const IV_0 = IV[0];\n      const IV_1 = IV[1]; // Generate four subvectors\n\n      const i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n      const i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n      const i1 = i0 >>> 16 | i2 & 0xffff0000;\n      const i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values\n\n      C[0] ^= i0;\n      C[1] ^= i1;\n      C[2] ^= i2;\n      C[3] ^= i3;\n      C[4] ^= i0;\n      C[5] ^= i1;\n      C[6] ^= i2;\n      C[7] ^= i3; // Iterate the system four times\n\n      for (let i = 0; i < 4; i += 1) {\n        nextState$1.call(this);\n      }\n    }\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M; // Shortcut\n\n    const X = this._X; // Iterate the system\n\n    nextState$1.call(this); // Generate four keystream words\n\n    S$1[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n    S$1[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n    S$1[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n    S$1[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n    for (let i = 0; i < 4; i += 1) {\n      // Swap endian\n      S$1[i] = (S$1[i] << 8 | S$1[i] >>> 24) & 0x00ff00ff | (S$1[i] << 24 | S$1[i] >>> 8) & 0xff00ff00; // Encrypt\n\n      _M[offset + i] ^= S$1[i];\n    }\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n */\n\n\nconst RabbitLegacy = StreamCipher._createHelper(RabbitLegacyAlgo);\n\nfunction generateKeystreamWord() {\n  // Shortcuts\n  const S = this._S;\n  let i = this._i;\n  let j = this._j; // Generate keystream word\n\n  let keystreamWord = 0;\n\n  for (let n = 0; n < 4; n += 1) {\n    i = (i + 1) % 256;\n    j = (j + S[i]) % 256; // Swap\n\n    const t = S[i];\n    S[i] = S[j];\n    S[j] = t;\n    keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n  } // Update counters\n\n\n  this._i = i;\n  this._j = j;\n  return keystreamWord;\n}\n/**\n * RC4 stream cipher algorithm.\n */\n\n\nclass RC4Algo extends StreamCipher {\n  constructor(...args) {\n    super(...args);\n    this.keySize = 256 / 32;\n    this.ivSize = 0;\n  }\n\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    const keySigBytes = key.sigBytes; // Init sbox\n\n    this._S = [];\n    const S = this._S;\n\n    for (let i = 0; i < 256; i += 1) {\n      S[i] = i;\n    } // Key setup\n\n\n    for (let i = 0, j = 0; i < 256; i += 1) {\n      const keyByteIndex = i % keySigBytes;\n      const keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n      j = (j + S[i] + keyByte) % 256; // Swap\n\n      const t = S[i];\n      S[i] = S[j];\n      S[j] = t;\n    } // Counters\n\n\n    this._j = 0;\n    this._i = this._j;\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M;\n    _M[offset] ^= generateKeystreamWord.call(this);\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n */\n\n\nconst RC4 = StreamCipher._createHelper(RC4Algo);\n/**\n * Modified RC4 stream cipher algorithm.\n */\n\n\nclass RC4DropAlgo extends RC4Algo {\n  constructor(...args) {\n    super(...args);\n    /**\n     * Configuration options.\n     *\n     * @property {number} drop The number of keystream words to drop. Default 192\n     */\n\n    Object.assign(this.cfg, {\n      drop: 192\n    });\n  }\n\n  _doReset() {\n    super._doReset.call(this); // Drop\n\n\n    for (let i = this.cfg.drop; i > 0; i -= 1) {\n      generateKeystreamWord.call(this);\n    }\n  }\n\n}\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n */\n\n\nconst RC4Drop = StreamCipher._createHelper(RC4DropAlgo);\n\nfunction generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n  const _words = words;\n  let keystream; // Shortcut\n\n  const iv = this._iv; // Generate keystream\n\n  if (iv) {\n    keystream = iv.slice(0); // Remove IV for subsequent blocks\n\n    this._iv = undefined;\n  } else {\n    keystream = this._prevBlock;\n  }\n\n  cipher.encryptBlock(keystream, 0); // Encrypt\n\n  for (let i = 0; i < blockSize; i += 1) {\n    _words[offset + i] ^= keystream[i];\n  }\n}\n/**\n * Cipher Feedback block mode.\n */\n\n\nclass CFB extends BlockCipherMode {}\n\nCFB.Encryptor = class extends CFB {\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // Remember this block to use with next block\n\n    this._prevBlock = words.slice(offset, offset + blockSize);\n  }\n\n};\nCFB.Decryptor = class extends CFB {\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher; // Remember this block to use with next block\n\n    const thisBlock = words.slice(offset, offset + blockSize);\n    generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // This block becomes the previous block\n\n    this._prevBlock = thisBlock;\n  }\n\n};\n/**\n * Counter block mode.\n */\n\nclass CTR extends BlockCipherMode {}\n\nCTR.Encryptor = class extends CTR {\n  processBlock(words, offset) {\n    const _words = words; // Shortcuts\n\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    const iv = this._iv;\n    let counter = this._counter; // Generate keystream\n\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter; // Remove IV for subsequent blocks\n\n      this._iv = undefined;\n    }\n\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0); // Increment counter\n\n    counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0; // Encrypt\n\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n\n};\nCTR.Decryptor = CTR.Encryptor;\n\nconst incWord = word => {\n  let _word = word;\n\n  if ((word >> 24 & 0xff) === 0xff) {\n    // overflow\n    let b1 = word >> 16 & 0xff;\n    let b2 = word >> 8 & 0xff;\n    let b3 = word & 0xff;\n\n    if (b1 === 0xff) {\n      // overflow b1\n      b1 = 0;\n\n      if (b2 === 0xff) {\n        b2 = 0;\n\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n\n    _word = 0;\n    _word += b1 << 16;\n    _word += b2 << 8;\n    _word += b3;\n  } else {\n    _word += 0x01 << 24;\n  }\n\n  return _word;\n};\n\nconst incCounter = counter => {\n  const _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n\n  return _counter;\n};\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\n\n\nclass CTRGladman extends BlockCipherMode {}\n\nCTRGladman.Encryptor = class extends CTRGladman {\n  processBlock(words, offset) {\n    const _words = words; // Shortcuts\n\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    const iv = this._iv;\n    let counter = this._counter; // Generate keystream\n\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter; // Remove IV for subsequent blocks\n\n      this._iv = undefined;\n    }\n\n    incCounter(counter);\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0); // Encrypt\n\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n\n};\nCTRGladman.Decryptor = CTRGladman.Encryptor;\n/**\n * Electronic Codebook block mode.\n */\n\nclass ECB extends BlockCipherMode {}\n\nECB.Encryptor = class extends ECB {\n  processBlock(words, offset) {\n    this._cipher.encryptBlock(words, offset);\n  }\n\n};\nECB.Decryptor = class extends ECB {\n  processBlock(words, offset) {\n    this._cipher.decryptBlock(words, offset);\n  }\n\n};\n/**\n * Output Feedback block mode.\n */\n\nclass OFB extends BlockCipherMode {}\n\nOFB.Encryptor = class extends OFB {\n  processBlock(words, offset) {\n    const _words = words; // Shortcuts\n\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    const iv = this._iv;\n    let keystream = this._keystream; // Generate keystream\n\n    if (iv) {\n      this._keystream = iv.slice(0);\n      keystream = this._keystream; // Remove IV for subsequent blocks\n\n      this._iv = undefined;\n    }\n\n    cipher.encryptBlock(keystream, 0); // Encrypt\n\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n\n};\nOFB.Decryptor = OFB.Encryptor;\n/**\n * ANSI X.923 padding strategy.\n */\n\nconst AnsiX923 = {\n  pad(data, blockSize) {\n    const _data = data; // Shortcuts\n\n    const dataSigBytes = _data.sigBytes;\n    const blockSizeBytes = blockSize * 4; // Count padding bytes\n\n    const nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes; // Compute last byte position\n\n    const lastBytePos = dataSigBytes + nPaddingBytes - 1; // Pad\n\n    _data.clamp();\n\n    _data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n    _data.sigBytes += nPaddingBytes;\n  },\n\n  unpad(data) {\n    const _data = data; // Get number of padding bytes from last byte\n\n    const nPaddingBytes = _data.words[_data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n    _data.sigBytes -= nPaddingBytes;\n  }\n\n};\n/**\n * ISO 10126 padding strategy.\n */\n\nconst Iso10126 = {\n  pad(data, blockSize) {\n    // Shortcut\n    const blockSizeBytes = blockSize * 4; // Count padding bytes\n\n    const nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Pad\n\n    data.concat(WordArray.random(nPaddingBytes - 1)).concat(WordArray.create([nPaddingBytes << 24], 1));\n  },\n\n  unpad(data) {\n    const _data = data; // Get number of padding bytes from last byte\n\n    const nPaddingBytes = _data.words[_data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n    _data.sigBytes -= nPaddingBytes;\n  }\n\n};\n/**\n * Zero padding strategy.\n */\n\nconst ZeroPadding = {\n  pad(data, blockSize) {\n    const _data = data; // Shortcut\n\n    const blockSizeBytes = blockSize * 4; // Pad\n\n    _data.clamp();\n\n    _data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);\n  },\n\n  unpad(data) {\n    const _data = data; // Shortcut\n\n    const dataWords = _data.words; // Unpad\n\n    for (let i = _data.sigBytes - 1; i >= 0; i -= 1) {\n      if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {\n        _data.sigBytes = i + 1;\n        break;\n      }\n    }\n  }\n\n};\n/**\n * ISO/IEC 9797-1 Padding Method 2.\n */\n\nconst Iso97971 = {\n  pad(data, blockSize) {\n    // Add 0x80 byte\n    data.concat(WordArray.create([0x80000000], 1)); // Zero pad the rest\n\n    ZeroPadding.pad(data, blockSize);\n  },\n\n  unpad(data) {\n    const _data = data; // Remove zero padding\n\n    ZeroPadding.unpad(_data); // Remove one more byte -- the 0x80 byte\n\n    _data.sigBytes -= 1;\n  }\n\n};\n/**\n * A noop padding strategy.\n */\n\nconst NoPadding = {\n  pad() {},\n\n  unpad() {}\n\n};\nconst HexFormatter = {\n  /**\n   * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The hexadecimally encoded string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    return cipherParams.ciphertext.toString(Hex);\n  },\n\n  /**\n   * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n   *\n   * @param {string} input The hexadecimally encoded string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n   */\n  parse(input) {\n    const ciphertext = Hex.parse(input);\n    return CipherParams.create({\n      ciphertext\n    });\n  }\n\n};\nvar CryptoEs = {\n  lib: {\n    Base,\n    WordArray,\n    BufferedBlockAlgorithm,\n    Hasher,\n    Cipher,\n    StreamCipher,\n    BlockCipherMode,\n    BlockCipher,\n    CipherParams,\n    SerializableCipher,\n    PasswordBasedCipher\n  },\n  x64: {\n    Word: X64Word,\n    WordArray: X64WordArray\n  },\n  enc: {\n    Hex,\n    Latin1,\n    Utf8,\n    Utf16,\n    Utf16BE,\n    Utf16LE,\n    Base64\n  },\n  algo: {\n    HMAC,\n    MD5: MD5Algo,\n    SHA1: SHA1Algo,\n    SHA224: SHA224Algo,\n    SHA256: SHA256Algo,\n    SHA384: SHA384Algo,\n    SHA512: SHA512Algo,\n    SHA3: SHA3Algo,\n    RIPEMD160: RIPEMD160Algo,\n    PBKDF2: PBKDF2Algo,\n    EvpKDF: EvpKDFAlgo,\n    AES: AESAlgo,\n    DES: DESAlgo,\n    TripleDES: TripleDESAlgo,\n    Rabbit: RabbitAlgo,\n    RabbitLegacy: RabbitLegacyAlgo,\n    RC4: RC4Algo,\n    RC4Drop: RC4DropAlgo\n  },\n  mode: {\n    CBC,\n    CFB,\n    CTR,\n    CTRGladman,\n    ECB,\n    OFB\n  },\n  pad: {\n    Pkcs7,\n    AnsiX923,\n    Iso10126,\n    Iso97971,\n    NoPadding,\n    ZeroPadding\n  },\n  format: {\n    OpenSSL: OpenSSLFormatter,\n    Hex: HexFormatter\n  },\n  kdf: {\n    OpenSSL: OpenSSLKdf\n  },\n  MD5,\n  HmacMD5,\n  SHA1,\n  HmacSHA1,\n  SHA224,\n  HmacSHA224,\n  SHA256,\n  HmacSHA256,\n  SHA384,\n  HmacSHA384,\n  SHA512,\n  HmacSHA512,\n  SHA3,\n  HmacSHA3,\n  RIPEMD160,\n  HmacRIPEMD160,\n  PBKDF2,\n  EvpKDF,\n  AES,\n  DES,\n  TripleDES,\n  Rabbit,\n  RabbitLegacy,\n  RC4,\n  RC4Drop\n};\n\nfunction createEmitter() {\n  return {\n    listeners: {},\n    on: function (eventCode, listener) {\n      // check if valid eventCode\n      switch (eventCode) {\n        case 'txSent':\n        case 'txPool':\n        case 'txConfirmed':\n        case 'txSpeedUp':\n        case 'txCancel':\n        case 'txFailed':\n        case 'txDropped':\n        case 'txRequest':\n        case 'nsfFail':\n        case 'txRepeat':\n        case 'txAwaitingApproval':\n        case 'txConfirmReminder':\n        case 'txSendFail':\n        case 'txError':\n        case 'txUnderPriced':\n        case 'txPoolSimulation':\n        case 'all':\n          break;\n\n        default:\n          throw new Error(`${eventCode} is not a valid event code, for a list of valid event codes see: https://docs.blocknative.com/notify-sdk#event-codes`);\n      } // check that listener is a function\n\n\n      if (typeof listener !== 'function') {\n        throw new Error('Listener must be a function');\n      } // add listener for the eventCode\n\n\n      this.listeners[eventCode] = listener;\n    },\n    off: function (eventCode) {\n      delete this.listeners[eventCode];\n    },\n    emit: function (state) {\n      if (this.listeners[state.eventCode]) {\n        return this.listeners[state.eventCode](state);\n      }\n\n      if (this.listeners.all) {\n        return this.listeners.all(state);\n      }\n    }\n  };\n}\n\nfunction networkName(blockchain, id) {\n  return networks[blockchain][id];\n}\n\nfunction serverEcho(eventCode) {\n  switch (eventCode) {\n    case 'txRequest':\n    case 'nsfFail':\n    case 'txRepeat':\n    case 'txAwaitingApproval':\n    case 'txConfirmReminder':\n    case 'txSendFail':\n    case 'txError':\n    case 'txUnderPriced':\n    case 'txSent':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction last(arr) {\n  return arr.reverse()[0];\n} // isAddress and isTxid are not meant to perform real validation,\n// just needs to work out if it is an address or a transaction id\n// the server will do more thorough validation\n\n\nfunction isAddress(blockchain, addressOrHash) {\n  switch (blockchain) {\n    case 'ethereum':\n      return addressOrHash.length === 42;\n\n    case 'bitcoin':\n      return addressOrHash.length !== 64;\n\n    default:\n      return false;\n  }\n}\n\nfunction isTxid(blockchain, addressOrHash) {\n  switch (blockchain) {\n    case 'ethereum':\n      return addressOrHash.length === 66;\n\n    case 'bitcoin':\n      return addressOrHash.length === 64;\n\n    default:\n      return false;\n  }\n}\n\nfunction wait(time) {\n  return new Promise(resolve => {\n    setTimeout(resolve, time);\n  });\n}\n\nconst jsonPreserveUndefined = (k, v) => v === undefined ? 'undefined' : v;\n/**\r\n * Tests if LocalStorage may be used. Accounts for environments where\r\n * LocalStorage is not supported, as well as those where it is blocked.\r\n *\r\n * @returns `true` if LocalStorage is supported and accessible, `false` otherwise.\r\n */\n\n\nfunction isLocalStorageAvailable() {\n  const isSupported = typeof window !== 'undefined' && 'localStorage' in window;\n\n  if (isSupported) {\n    const testKey = '__testLocalStorage';\n\n    try {\n      window.localStorage.setItem(testKey, '1');\n      window.localStorage.removeItem(testKey);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction transaction(hash, id) {\n  if (this._destroyed) throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.'); // create startTime for transaction\n\n  const startTime = Date.now(); // create emitter for transaction\n\n  const emitter = createEmitter(); // create eventCode for transaction\n\n  const eventCode = 'txSent'; // put in queue\n\n  this.watchedTransactions.push({\n    hash,\n    emitter\n  });\n  const transactionId = this._system === 'ethereum' ? {\n    hash\n  } : {\n    txid: hash\n  };\n  const transaction = { ...transactionId,\n    id: id || hash,\n    startTime,\n    status: 'sent'\n  };\n  const newState = { ...transaction,\n    eventCode\n  }; // logEvent to server\n\n  this._sendMessage({\n    eventCode,\n    categoryCode: 'activeTransaction',\n    transaction\n  });\n\n  const transactionObj = {\n    details: newState,\n    emitter\n  };\n\n  function emitState() {\n    const emitterResult = emitter.emit(newState);\n\n    this._transactionHandlers.forEach(handler => handler({\n      transaction: newState,\n      emitterResult\n    }));\n  } // emit after delay to allow for listener to be registered\n\n\n  setTimeout(emitState.bind(this), 5);\n  return transactionObj;\n}\n\nfunction account(address) {\n  if (this._destroyed) throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.'); // lowercase the address if Ethereum\n\n  address = this._system === 'ethereum' ? address.toLowerCase() : address; // create emitter for transaction\n\n  const emitter = createEmitter(); // create eventCode for transaction\n\n  const eventCode = 'watch';\n  const existingAddressWatcher = this.watchedAccounts.find(ac => ac.address === address);\n\n  if (existingAddressWatcher) {\n    // add to existing emitters array\n    existingAddressWatcher.emitters.push(emitter);\n  } else {\n    // put in accounts queue\n    this.watchedAccounts.push({\n      address,\n      emitters: [emitter]\n    });\n  } // logEvent to server\n\n\n  this._sendMessage({\n    eventCode,\n    categoryCode: 'accountAddress',\n    account: {\n      address\n    }\n  });\n\n  return {\n    emitter,\n    details: {\n      address\n    }\n  };\n}\n\nfunction event(eventObj) {\n  if (this._destroyed) throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.');\n\n  this._sendMessage(eventObj);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction isFunction$1(x) {\n  return typeof x === 'function';\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nvar config = {\n  Promise: undefined,\n\n  set useDeprecatedSynchronousErrorHandling(value) {\n    if (value) {\n      var error = /*@__PURE__*/new Error();\n      /*@__PURE__*/\n\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    }\n\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  }\n\n};\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\nfunction hostReportError(err) {\n  setTimeout(function () {\n    throw err;\n  }, 0);\n}\n/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\n\n\nvar empty = {\n  closed: true,\n  next: function (value) {},\n  error: function (err) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete: function () {}\n};\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\nvar isArray$1 = /*@__PURE__*/function () {\n  return Array.isArray || function (x) {\n    return x && typeof x.length === 'number';\n  };\n}();\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction isObject$1(x) {\n  return x !== null && typeof x === 'object';\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar UnsubscriptionErrorImpl = /*@__PURE__*/function () {\n  function UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) {\n      return i + 1 + \") \" + err.toString();\n    }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);\n  return UnsubscriptionErrorImpl;\n}();\n\nvar UnsubscriptionError = UnsubscriptionErrorImpl;\n/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */\n\nvar Subscription = /*@__PURE__*/function () {\n  function Subscription(unsubscribe) {\n    this.closed = false;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._ctorUnsubscribe = true;\n      this._unsubscribe = unsubscribe;\n    }\n  }\n\n  Subscription.prototype.unsubscribe = function () {\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parentOrParents = _a._parentOrParents,\n        _ctorUnsubscribe = _a._ctorUnsubscribe,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (var index = 0; index < _parentOrParents.length; ++index) {\n        var parent_1 = _parentOrParents[index];\n        parent_1.remove(this);\n      }\n    }\n\n    if (isFunction$1(_unsubscribe)) {\n      if (_ctorUnsubscribe) {\n        this._unsubscribe = undefined;\n      }\n\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray$1(_subscriptions)) {\n      var index = -1;\n      var len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject$1(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  };\n\n  Subscription.prototype.add = function (teardown) {\n    var subscription = teardown;\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n\n        break;\n\n      default:\n        {\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n    }\n\n    var _parentOrParents = subscription._parentOrParents;\n\n    if (_parentOrParents === null) {\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        return subscription;\n      }\n\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      _parentOrParents.push(this);\n    } else {\n      return subscription;\n    }\n\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  };\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n  }, []);\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar rxSubscriber = /*@__PURE__*/function () {\n  return typeof Symbol === 'function' ? /*@__PURE__*/Symbol('rxSubscriber') : '@@rxSubscriber_' + /*@__PURE__*/Math.random();\n}();\n/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\n\n\nvar Subscriber = /*@__PURE__*/function (_super) {\n  __extends(Subscriber, _super);\n\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        _this.destination = empty;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = empty;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n\n    return _this;\n  }\n\n  Subscriber.prototype[rxSubscriber] = function () {\n    return this;\n  };\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription);\n\nvar SafeSubscriber = /*@__PURE__*/function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n\n    if (isFunction$1(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== empty) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction$1(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\n\n\nfunction canReportError(observer) {\n  while (observer) {\n    var _a = observer,\n        closed_1 = _a.closed,\n        destination = _a.destination,\n        isStopped = _a.isStopped;\n\n    if (closed_1 || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n\n  return true;\n}\n/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\n\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return nextOrObserver;\n    }\n\n    if (nextOrObserver[rxSubscriber]) {\n      return nextOrObserver[rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(empty);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar observable = /*@__PURE__*/function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n}();\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction identity(x) {\n  return x;\n}\n/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */\n\n\nfunction pipeFromArray(fns) {\n  if (fns.length === 0) {\n    return identity;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input) {\n    return fns.reduce(function (prev, fn) {\n      return fn(prev);\n    }, input);\n  };\n}\n/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\n\n\nvar Observable = /*@__PURE__*/function () {\n  function Observable(subscribe) {\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var operator = this.operator;\n    var sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  };\n\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  };\n\n  Observable.prototype.forEach = function (next, promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    });\n  };\n\n  Observable.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n    return source && source.subscribe(subscriber);\n  };\n\n  Observable.prototype[observable] = function () {\n    return this;\n  };\n\n  Observable.prototype.pipe = function () {\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n\n    if (operations.length === 0) {\n      return this;\n    }\n\n    return pipeFromArray(operations)(this);\n  };\n\n  Observable.prototype.toPromise = function (promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var value;\n\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n}();\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar subscribeToArray = function (array) {\n  return function (subscriber) {\n    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n\n    subscriber.complete();\n  };\n};\n/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\n\n\nvar subscribeToPromise = function (promise) {\n  return function (subscriber) {\n    promise.then(function (value) {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    }, function (err) {\n      return subscriber.error(err);\n    }).then(null, hostReportError);\n    return subscriber;\n  };\n};\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction getSymbolIterator() {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator';\n  }\n\n  return Symbol.iterator;\n}\n\nvar iterator = /*@__PURE__*/getSymbolIterator();\n/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\n\nvar subscribeToIterable = function (iterable) {\n  return function (subscriber) {\n    var iterator$1 = iterable[iterator]();\n\n    do {\n      var item = void 0;\n\n      try {\n        item = iterator$1.next();\n      } catch (err) {\n        subscriber.error(err);\n        return subscriber;\n      }\n\n      if (item.done) {\n        subscriber.complete();\n        break;\n      }\n\n      subscriber.next(item.value);\n\n      if (subscriber.closed) {\n        break;\n      }\n    } while (true);\n\n    if (typeof iterator$1.return === 'function') {\n      subscriber.add(function () {\n        if (iterator$1.return) {\n          iterator$1.return();\n        }\n      });\n    }\n\n    return subscriber;\n  };\n};\n/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\n\n\nvar subscribeToObservable = function (obj) {\n  return function (subscriber) {\n    var obs = obj[observable]();\n\n    if (typeof obs.subscribe !== 'function') {\n      throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    } else {\n      return obs.subscribe(subscriber);\n    }\n  };\n};\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar isArrayLike$1 = function (x) {\n  return x && typeof x.length === 'number' && typeof x !== 'function';\n};\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction isPromise(value) {\n  return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\n\n\nvar subscribeTo = function (result) {\n  if (!!result && typeof result[observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike$1(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject$1(result) ? 'an invalid object' : \"'\" + result + \"'\";\n    var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */\n\n\nvar SimpleInnerSubscriber = /*@__PURE__*/function (_super) {\n  __extends(SimpleInnerSubscriber, _super);\n\n  function SimpleInnerSubscriber(parent) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    return _this;\n  }\n\n  SimpleInnerSubscriber.prototype._next = function (value) {\n    this.parent.notifyNext(value);\n  };\n\n  SimpleInnerSubscriber.prototype._error = function (error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  };\n\n  SimpleInnerSubscriber.prototype._complete = function () {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  };\n\n  return SimpleInnerSubscriber;\n}(Subscriber);\n\nvar SimpleOuterSubscriber = /*@__PURE__*/function (_super) {\n  __extends(SimpleOuterSubscriber, _super);\n\n  function SimpleOuterSubscriber() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  SimpleOuterSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n\n  SimpleOuterSubscriber.prototype.notifyComplete = function () {\n    this.destination.complete();\n  };\n\n  return SimpleOuterSubscriber;\n}(Subscriber);\n\nfunction innerSubscribe(result, innerSubscriber) {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n\n  return subscribeTo(result)(innerSubscriber);\n}\n/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\n\n\nvar Action = /*@__PURE__*/function (_super) {\n  __extends(Action, _super);\n\n  function Action(scheduler, work) {\n    return _super.call(this) || this;\n  }\n\n  Action.prototype.schedule = function (state, delay) {\n    return this;\n  };\n\n  return Action;\n}(Subscription);\n/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\n\n\nvar AsyncAction = /*@__PURE__*/function (_super) {\n  __extends(AsyncAction, _super);\n\n  function AsyncAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n\n  AsyncAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (this.closed) {\n      return this;\n    }\n\n    this.state = state;\n    var id = this.id;\n    var scheduler = this.scheduler;\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.pending = true;\n    this.delay = delay;\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  };\n\n  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  };\n\n  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n\n    clearInterval(id);\n    return undefined;\n  };\n\n  AsyncAction.prototype.execute = function (state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n\n    var error = this._execute(state, delay);\n\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  };\n\n  AsyncAction.prototype._execute = function (state, delay) {\n    var errored = false;\n    var errorValue = undefined;\n\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  };\n\n  AsyncAction.prototype._unsubscribe = function () {\n    var id = this.id;\n    var scheduler = this.scheduler;\n    var actions = scheduler.actions;\n    var index = actions.indexOf(this);\n    this.work = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  };\n\n  return AsyncAction;\n}(Action);\n\nvar Scheduler = /*@__PURE__*/function () {\n  function Scheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    this.SchedulerAction = SchedulerAction;\n    this.now = now;\n  }\n\n  Scheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return new this.SchedulerAction(this, work).schedule(state, delay);\n  };\n\n  Scheduler.now = function () {\n    return Date.now();\n  };\n\n  return Scheduler;\n}();\n/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\n\n\nvar AsyncScheduler = /*@__PURE__*/function (_super) {\n  __extends(AsyncScheduler, _super);\n\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    var _this = _super.call(this, SchedulerAction, function () {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    }) || this;\n\n    _this.actions = [];\n    _this.active = false;\n    _this.scheduled = undefined;\n    return _this;\n  }\n\n  AsyncScheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return _super.prototype.schedule.call(this, work, delay, state);\n    }\n  };\n\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    var error;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsyncScheduler;\n}(Scheduler);\n/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\n\n\nvar asyncScheduler = /*@__PURE__*/new AsyncScheduler(AsyncAction);\nvar async = asyncScheduler;\n/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\n\nfunction isNumeric(val) {\n  return !isArray$1(val) && val - parseFloat(val) + 1 >= 0;\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction isScheduler(value) {\n  return value && typeof value.schedule === 'function';\n}\n/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\n\n\nfunction timer(dueTime, periodOrScheduler, scheduler) {\n  if (dueTime === void 0) {\n    dueTime = 0;\n  }\n\n  var period = -1;\n\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(function (subscriber) {\n    var due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();\n    return scheduler.schedule(dispatch, due, {\n      index: 0,\n      period: period,\n      subscriber: subscriber\n    });\n  });\n}\n\nfunction dispatch(state) {\n  var index = state.index,\n      period = state.period,\n      subscriber = state.subscriber;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\n\n\nfunction scheduleArray(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var i = 0;\n    sub.add(scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n        return;\n      }\n\n      subscriber.next(input[i++]);\n\n      if (!subscriber.closed) {\n        sub.add(this.schedule());\n      }\n    }));\n    return sub;\n  });\n}\n/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */\n\n\nfunction fromArray(input, scheduler) {\n  if (!scheduler) {\n    return new Observable(subscribeToArray(input));\n  } else {\n    return scheduleArray(input, scheduler);\n  }\n}\n/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */\n\n\nfunction scheduleObservable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      var observable$1 = input[observable]();\n      sub.add(observable$1.subscribe({\n        next: function (value) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.next(value);\n          }));\n        },\n        error: function (err) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.error(err);\n          }));\n        },\n        complete: function () {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\n\n\nfunction schedulePromise(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      return input.then(function (value) {\n        sub.add(scheduler.schedule(function () {\n          subscriber.next(value);\n          sub.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }));\n      }, function (err) {\n        sub.add(scheduler.schedule(function () {\n          return subscriber.error(err);\n        }));\n      });\n    }));\n    return sub;\n  });\n}\n/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\n\n\nfunction scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator$1;\n    sub.add(function () {\n      if (iterator$1 && typeof iterator$1.return === 'function') {\n        iterator$1.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator$1 = input[iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n\n        var value;\n        var done;\n\n        try {\n          var result = iterator$1.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\n\n\nfunction isInteropObservable(input) {\n  return input && typeof input[observable] === 'function';\n}\n/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\n\n\nfunction isIterable(input) {\n  return input && typeof input[iterator] === 'function';\n}\n/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */\n\n\nfunction scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike$1(input)) {\n      return scheduleArray(input, scheduler);\n    } else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */\n\n\nfunction from(input, scheduler) {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n\n    return new Observable(subscribeTo(input));\n  } else {\n    return scheduled(input, scheduler);\n  }\n}\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n\n\nfunction map(project, thisArg) {\n  return function mapOperation(source) {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nvar MapOperator = /*@__PURE__*/function () {\n  function MapOperator(project, thisArg) {\n    this.project = project;\n    this.thisArg = thisArg;\n  }\n\n  MapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  };\n\n  return MapOperator;\n}();\n\nvar MapSubscriber = /*@__PURE__*/function (_super) {\n  __extends(MapSubscriber, _super);\n\n  function MapSubscriber(destination, project, thisArg) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.count = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n\n  MapSubscriber.prototype._next = function (value) {\n    var result;\n\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return MapSubscriber;\n}(Subscriber);\n/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\n\n\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\n\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  __extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\n/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\n\n\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return mergeMap(identity, concurrent);\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nfunction isDate(value) {\n  return value instanceof Date && !isNaN(+value);\n}\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n\n\nvar EMPTY = /*@__PURE__*/new Observable(function (subscriber) {\n  return subscriber.complete();\n});\n\nfunction empty$1(scheduler) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler) {\n  return new Observable(function (subscriber) {\n    return scheduler.schedule(function () {\n      return subscriber.complete();\n    });\n  });\n}\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n\n\nfunction throwError(error, scheduler) {\n  if (!scheduler) {\n    return new Observable(function (subscriber) {\n      return subscriber.error(error);\n    });\n  } else {\n    return new Observable(function (subscriber) {\n      return scheduler.schedule(dispatch$1, 0, {\n        error: error,\n        subscriber: subscriber\n      });\n    });\n  }\n}\n\nfunction dispatch$1(_a) {\n  var error = _a.error,\n      subscriber = _a.subscriber;\n  subscriber.error(error);\n}\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar ArgumentOutOfRangeErrorImpl = /*@__PURE__*/function () {\n  function ArgumentOutOfRangeErrorImpl() {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n  }\n\n  ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);\n  return ArgumentOutOfRangeErrorImpl;\n}();\n\nvar ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n\nfunction filter(predicate, thisArg) {\n  return function filterOperatorFunction(source) {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nvar FilterOperator = /*@__PURE__*/function () {\n  function FilterOperator(predicate, thisArg) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n  }\n\n  FilterOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  };\n\n  return FilterOperator;\n}();\n\nvar FilterSubscriber = /*@__PURE__*/function (_super) {\n  __extends(FilterSubscriber, _super);\n\n  function FilterSubscriber(destination, predicate, thisArg) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.count = 0;\n    return _this;\n  }\n\n  FilterSubscriber.prototype._next = function (value) {\n    var result;\n\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.destination.next(value);\n    }\n  };\n\n  return FilterSubscriber;\n}(Subscriber);\n/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\n\n\nfunction take(count) {\n  return function (source) {\n    if (count === 0) {\n      return empty$1();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nvar TakeOperator = /*@__PURE__*/function () {\n  function TakeOperator(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  TakeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  };\n\n  return TakeOperator;\n}();\n\nvar TakeSubscriber = /*@__PURE__*/function (_super) {\n  __extends(TakeSubscriber, _super);\n\n  function TakeSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.total = total;\n    _this.count = 0;\n    return _this;\n  }\n\n  TakeSubscriber.prototype._next = function (value) {\n    var total = this.total;\n    var count = ++this.count;\n\n    if (count <= total) {\n      this.destination.next(value);\n\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  };\n\n  return TakeSubscriber;\n}(Subscriber);\n/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\n\n\nfunction finalize(callback) {\n  return function (source) {\n    return source.lift(new FinallyOperator(callback));\n  };\n}\n\nvar FinallyOperator = /*@__PURE__*/function () {\n  function FinallyOperator(callback) {\n    this.callback = callback;\n  }\n\n  FinallyOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  };\n\n  return FinallyOperator;\n}();\n\nvar FinallySubscriber = /*@__PURE__*/function (_super) {\n  __extends(FinallySubscriber, _super);\n\n  function FinallySubscriber(destination, callback) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.add(new Subscription(callback));\n\n    return _this;\n  }\n\n  return FinallySubscriber;\n}(Subscriber);\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar ObjectUnsubscribedErrorImpl = /*@__PURE__*/function () {\n  function ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);\n  return ObjectUnsubscribedErrorImpl;\n}();\n\nvar ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\n\nvar SubjectSubscription = /*@__PURE__*/function (_super) {\n  __extends(SubjectSubscription, _super);\n\n  function SubjectSubscription(subject, subscriber) {\n    var _this = _super.call(this) || this;\n\n    _this.subject = subject;\n    _this.subscriber = subscriber;\n    _this.closed = false;\n    return _this;\n  }\n\n  SubjectSubscription.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n    var subject = this.subject;\n    var observers = subject.observers;\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    var subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  };\n\n  return SubjectSubscription;\n}(Subscription);\n/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\n\n\nvar SubjectSubscriber = /*@__PURE__*/function (_super) {\n  __extends(SubjectSubscriber, _super);\n\n  function SubjectSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.destination = destination;\n    return _this;\n  }\n\n  return SubjectSubscriber;\n}(Subscriber);\n\nvar Subject = /*@__PURE__*/function (_super) {\n  __extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.observers = [];\n    _this.closed = false;\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype[rxSubscriber] = function () {\n    return new SubjectSubscriber(this);\n  };\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype.next = function (value) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    if (!this.isStopped) {\n      var observers = this.observers;\n      var len = observers.length;\n      var copy = observers.slice();\n\n      for (var i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  };\n\n  Subject.prototype.error = function (err) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.complete = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  };\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return _super.prototype._trySubscribe.call(this, subscriber);\n    }\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable);\n\nvar AnonymousSubject = /*@__PURE__*/function (_super) {\n  __extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var destination = this.destination;\n\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var destination = this.destination;\n\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var destination = this.destination;\n\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  };\n\n  return AnonymousSubject;\n}(Subject);\n/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\n\n\nfunction merge() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n  var last = observables[observables.length - 1];\n\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n\n\nfunction takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\n\nvar TakeWhileOperator = /*@__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  };\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber = /*@__PURE__*/function (_super) {\n  __extends(TakeWhileSubscriber, _super);\n\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  };\n\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n\n      destination.complete();\n    }\n  };\n\n  return TakeWhileSubscriber;\n}(Subscriber);\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n\nvar TimeoutErrorImpl = /*@__PURE__*/function () {\n  function TimeoutErrorImpl() {\n    Error.call(this);\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    return this;\n  }\n\n  TimeoutErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);\n  return TimeoutErrorImpl;\n}();\n\nvar TimeoutError = TimeoutErrorImpl;\n/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_innerSubscribe PURE_IMPORTS_END */\n\nfunction timeoutWith(due, withObservable, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return function (source) {\n    var absoluteTimeout = isDate(due);\n    var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nvar TimeoutWithOperator = /*@__PURE__*/function () {\n  function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n    this.waitFor = waitFor;\n    this.absoluteTimeout = absoluteTimeout;\n    this.withObservable = withObservable;\n    this.scheduler = scheduler;\n  }\n\n  TimeoutWithOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n  };\n\n  return TimeoutWithOperator;\n}();\n\nvar TimeoutWithSubscriber = /*@__PURE__*/function (_super) {\n  __extends(TimeoutWithSubscriber, _super);\n\n  function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.absoluteTimeout = absoluteTimeout;\n    _this.waitFor = waitFor;\n    _this.withObservable = withObservable;\n    _this.scheduler = scheduler;\n\n    _this.scheduleTimeout();\n\n    return _this;\n  }\n\n  TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n    var withObservable = subscriber.withObservable;\n\n    subscriber._unsubscribeAndRecycle();\n\n    subscriber.add(innerSubscribe(withObservable, new SimpleInnerSubscriber(subscriber)));\n  };\n\n  TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n    var action = this.action;\n\n    if (action) {\n      this.action = action.schedule(this, this.waitFor);\n    } else {\n      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n    }\n  };\n\n  TimeoutWithSubscriber.prototype._next = function (value) {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n\n    _super.prototype._next.call(this, value);\n  };\n\n  TimeoutWithSubscriber.prototype._unsubscribe = function () {\n    this.action = undefined;\n    this.scheduler = null;\n    this.withObservable = null;\n  };\n\n  return TimeoutWithSubscriber;\n}(SimpleOuterSubscriber);\n/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */\n\n\nfunction timeout(due, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return timeoutWith(due, throwError(new TimeoutError()), scheduler);\n}\n\nlet urlAlphabet = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\nconst POOL_SIZE_MULTIPLIER = 128;\nlet pool, poolOffset;\n\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\n    crypto.randomFillSync(pool);\n    poolOffset = 0;\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool);\n    poolOffset = 0;\n  }\n\n  poolOffset += bytes;\n};\n\nlet nanoid = (size = 21) => {\n  fillPool(size -= 0);\n  let id = '';\n\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63];\n  }\n\n  return id;\n};\n/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\n\n\nfunction fromEvent(target, eventName, options, resultSelector) {\n  if (isFunction$1(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n\n  if (resultSelector) {\n    return fromEvent(target, eventName, options).pipe(map(function (args) {\n      return isArray$1(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n    }));\n  }\n\n  return new Observable(function (subscriber) {\n    function handler(e) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n\n    setupSubscription(target, eventName, handler, subscriber, options);\n  });\n}\n\nfunction setupSubscription(sourceObj, eventName, handler, subscriber, options) {\n  var unsubscribe;\n\n  if (isEventTarget(sourceObj)) {\n    var source_1 = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n\n    unsubscribe = function () {\n      return source_1.removeEventListener(eventName, handler, options);\n    };\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    var source_2 = sourceObj;\n    sourceObj.on(eventName, handler);\n\n    unsubscribe = function () {\n      return source_2.off(eventName, handler);\n    };\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    var source_3 = sourceObj;\n    sourceObj.addListener(eventName, handler);\n\n    unsubscribe = function () {\n      return source_3.removeListener(eventName, handler);\n    };\n  } else if (sourceObj && sourceObj.length) {\n    for (var i = 0, len = sourceObj.length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj) {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj) {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj) {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nconst simulations$ = new Subject();\n\nfunction simulate(system, network, transaction) {\n  if (this._destroyed) throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.');\n  const id = nanoid(); // send payload to server\n\n  this._sendMessage({\n    categoryCode: 'simulate',\n    eventCode: 'txSimulation',\n    eventId: id,\n    transaction: transaction\n  });\n\n  return new Promise((resolve, reject) => {\n    simulations$.pipe(filter(({\n      eventId\n    }) => {\n      return eventId === id;\n    }), take(1)).subscribe({\n      next: ({\n        transaction\n      }) => resolve(transaction),\n      error: ({\n        error\n      }) => reject(error.message)\n    });\n  });\n}\n\nfunction multiSim(transactions) {\n  if (this._destroyed) throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.');\n  const id = nanoid(); // send payload to server\n\n  this._sendMessage({\n    categoryCode: 'simulate',\n    eventCode: 'txSimulation',\n    eventId: id,\n    transaction: transactions\n  });\n\n  return new Promise((resolve, reject) => {\n    simulations$.pipe(filter(({\n      eventId\n    }) => {\n      return eventId === id;\n    }), take(1)).subscribe({\n      next: ({\n        transaction\n      }) => resolve(transaction),\n      error: ({\n        error\n      }) => reject(error.message)\n    });\n  });\n}\n\nfunction unsubscribe(addressOrHash) {\n  if (this._destroyed) throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.');\n  const address = isAddress(this._system, addressOrHash);\n  const txid = isTxid(this._system, addressOrHash); // check if it is an address or a hash\n\n  if (address) {\n    const normalizedAddress = this._system === 'ethereum' ? addressOrHash.toLowerCase() : addressOrHash; // remove address from accounts\n\n    this.watchedAccounts = this.watchedAccounts.filter(ac => ac.address !== normalizedAddress); // remove configuration from memory\n\n    this.configurations.delete(normalizedAddress); // logEvent to server\n\n    this._sendMessage({\n      categoryCode: 'accountAddress',\n      eventCode: 'unwatch',\n      account: {\n        address: normalizedAddress\n      }\n    });\n  } else if (txid) {\n    // remove transaction from transactions\n    this.watchedTransactions = this.watchedTransactions.filter(tx => tx.hash !== addressOrHash);\n    const transactionId = this._system === 'ethereum' ? {\n      hash: addressOrHash\n    } : {\n      txid: addressOrHash\n    };\n    const transaction = { ...transactionId,\n      id: addressOrHash,\n      status: 'unsubscribed'\n    }; // logEvent to server\n\n    this._sendMessage({\n      categoryCode: 'activeTransaction',\n      eventCode: 'unwatch',\n      transaction\n    });\n  } else {\n    throw new Error(`Error trying to unsubscribe ${addressOrHash}: not a valid address or transaction id/hash`);\n  }\n}\n\nfunction configuration(config) {\n  if (this._destroyed) {\n    throw new Error('The WebSocket instance has been destroyed, re-initialize to continue making requests.');\n  }\n\n  const casedScope = this._system === 'ethereum' ? config.scope.toLowerCase() : config.scope; // resolve previous configuration if exists\n\n  const previousConfiguration = this.configurations.get(casedScope);\n  previousConfiguration && previousConfiguration.subscription && previousConfiguration.subscription.next();\n  const subscription = new Subject(); // create emitter for transaction\n\n  const emitter = config.watchAddress ? {\n    emitter: createEmitter()\n  } : {};\n  this.configurations.set(casedScope, { ...config,\n    ...emitter,\n    subscription\n  });\n\n  this._sendMessage({\n    categoryCode: 'configs',\n    eventCode: 'put',\n    config\n  });\n\n  return new Promise((resolve, reject) => {\n    subscription.pipe(take(1), timeout(5000)).subscribe({\n      next: () => resolve({ ...emitter,\n        details: {\n          config\n        }\n      }),\n      error: error => {\n        const message = error.message === 'Timeout has occurred' ? `Configuration with scope: ${config.scope} has been sent to the Blocknative server, but has not received a reply within 5 seconds.` : error.message;\n\n        if (this._onerror) {\n          this._onerror({\n            message\n          });\n\n          resolve(`Error: ${message}`);\n        } else {\n          reject(message);\n        }\n      }\n    });\n  });\n}\n\nfunction subscribe(subscription) {\n  const {\n    id,\n    chainId,\n    type\n  } = subscription;\n\n  if (!networkName('ethereum', parseInt(chainId, 16))) {\n    throw new Error(`chainId: ${chainId} is an unsupported network`);\n  }\n\n  if (!this.connections[chainId]) {\n    this.connections[chainId] = new this.Blocknative({\n      system: 'ethereum',\n      networkId: parseInt(chainId, 16),\n      dappId: this.apiKey,\n      ws: this.ws,\n      apiUrl: this.apiUrl,\n      transactionHandlers: [({\n        transaction\n      }) => {\n        this.onTransaction$.next(transaction);\n      }],\n      onerror: error => this.errors$.next(error)\n    });\n  }\n\n  const sdk = this.connections[chainId];\n\n  if (type === 'account') {\n    const {\n      filters = [],\n      abi\n    } = subscription;\n    sdk.configuration({\n      scope: id,\n      filters,\n      ...(abi ? {\n        abi\n      } : {}),\n      watchAddress: true\n    });\n    return this.transactions$.pipe(filter(({\n      watchedAddress\n    }) => watchedAddress === id), finalize(() => {\n      this.unsubscribe({\n        id,\n        chainId\n      });\n    }));\n  } else {\n    const {\n      emitter\n    } = sdk.transaction(id);\n    return fromEvent( // eslint-disable-next-line\n    // @ts-ignore - string does not match specific eventcode string\n    emitter, 'all').pipe( // automatically complete stream on a finalized status\n    takeWhile(({\n      status\n    }) => status !== 'confirmed' && status !== 'failed' && status !== 'dropped', true), // cleanup subscription and SDK on completion\n    finalize(() => {\n      this.unsubscribe({\n        id,\n        chainId\n      });\n    }));\n  }\n}\n\nfunction unsubscribe$1(options) {\n  const {\n    id,\n    chainId,\n    timeout = 0\n  } = options;\n  const time$ = timer(timeout);\n  const transactionEvent$ = this.transactions$.pipe(filter(({\n    hash,\n    watchedAddress\n  }) => hash === id || watchedAddress === id));\n  merge(transactionEvent$, time$).pipe(take(1)) // take just first event\n  .subscribe(res => {\n    // if number, then timeout with no transaction events, so go ahead and unsub\n    if (typeof res === 'number') {\n      const sdkConnections = Object.entries(this.connections).filter(([chainId, sdk]) => sdk !== null);\n      sdkConnections.forEach(([connectionChainId, sdk]) => {\n        // if chainId is passed and it doesn't match, then no unsub (return early)\n        if (chainId && connectionChainId !== chainId) return;\n        sdk.unsubscribe(id); // if no remaining subscriptions, destroy connection and set to null\n\n        if (!sdk.watchedAccounts.length && !sdk.watchedTransactions.length && !sdk.configurations.size) {\n          sdk.destroy();\n          this.connections[connectionChainId] = null;\n        }\n      });\n    } else {\n      // otherwise a transaction event received, so call unsub again for another timeout\n      this.unsubscribe(options);\n    }\n  });\n} //**Experimental API that is not yet finalized and is in BETA*/\n\n\nclass MultiChain {\n  constructor(options, Blocknative) {\n    const {\n      ws\n    } = options;\n    const {\n      apiKey\n    } = options;\n    const {\n      apiUrl\n    } = options;\n    this.apiKey = apiKey;\n    this.apiUrl = apiUrl;\n    this.ws = ws;\n    this.connections = {};\n    this.onTransaction$ = new Subject();\n    this.transactions$ = this.onTransaction$.asObservable();\n    this.errors$ = new Subject();\n    this.Blocknative = Blocknative;\n    this.subscribe = subscribe.bind(this);\n    this.unsubscribe = unsubscribe$1.bind(this);\n  }\n\n}\n\nvar version = \"4.6.7\";\n\nfunction sendMessage(msg) {\n  if (this._queuedMessages.length > QUEUE_LIMIT) {\n    throw new Error(`Queue limit of ${QUEUE_LIMIT} messages has been reached.`);\n  }\n\n  this._queuedMessages.push(createEventLog.bind(this)(msg));\n\n  if (!this._processingQueue) {\n    this._processQueue();\n  }\n}\n\nasync function processQueue() {\n  this._processingQueue = true;\n\n  if (!this._connected) {\n    await waitForConnectionOpen.bind(this)();\n  }\n\n  while (this._queuedMessages.length > 0) {\n    // small wait to allow response from server to take affect\n    await wait(1);\n\n    if (this._waitToRetry !== null) {\n      // have been rate limited so wait\n      await this._waitToRetry;\n      this._waitToRetry = null;\n    }\n\n    const msg = this._queuedMessages.shift();\n\n    const delay = this._limitRules.duration / this._limitRules.points * 1000;\n    await wait(delay);\n\n    this._socket.send(msg);\n  }\n\n  this._processingQueue = false;\n  this._limitRules = DEFAULT_RATE_LIMIT_RULES;\n}\n\nfunction handleMessage(msg) {\n  const {\n    status,\n    reason,\n    event,\n    connectionId,\n    serverVersion,\n    retryMs,\n    limitRules,\n    blockedMsg,\n    dispatchTimestamp\n  } = JSON.parse(msg.data);\n\n  if (connectionId) {\n    if (isLocalStorageAvailable()) {\n      window.localStorage.setItem(this._storageKey, connectionId);\n    }\n\n    this._connectionId = connectionId;\n  } // handle any errors from the server\n\n\n  if (status === 'error') {\n    if (reason.includes('ratelimit') && !reason.match(/IP (PendingSimulation|Notification) ratelimit reached/)) {\n      this._waitToRetry = wait(retryMs);\n      this._limitRules = limitRules; // add blocked msg to the front of the queue\n\n      blockedMsg && this._queuedMessages.unshift(blockedMsg);\n      return;\n    }\n\n    if (reason.includes('upgrade your plan')) {\n      if (this._onerror) {\n        this._onerror({\n          message: reason\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    }\n\n    if (reason.includes('not a valid API key')) {\n      if (this._onerror) {\n        this._onerror({\n          message: reason\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    }\n\n    if (reason.includes('network not supported')) {\n      if (this._onerror) {\n        this._onerror({\n          message: reason\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    }\n\n    if (reason.includes('maximum allowed amount')) {\n      if (this._onerror) {\n        this._onerror({\n          message: reason\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    } // handle bitcoin txid error\n\n\n    if (reason.includes('invalid txid')) {\n      const reason = `${event.transaction.txid} is an invalid txid`;\n\n      if (this._onerror) {\n        this._onerror({\n          message: reason,\n          transaction: event.transaction.txid\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    } // handle ethereum transaction hash error\n\n\n    if (reason.includes('invalid hash')) {\n      const reason = `${event.transaction.hash} is an invalid transaction hash`;\n\n      if (this._onerror) {\n        this._onerror({\n          message: reason,\n          transaction: event.transaction.hash\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    } // handle general address error\n\n\n    if (reason.includes('invalid address')) {\n      const reason = `${event.account.address} is an invalid address`;\n\n      if (this._onerror) {\n        this._onerror({\n          message: reason,\n          account: event.account.address\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    } // handle bitcoin specific address error\n\n\n    if (reason.includes('not a valid Bitcoin')) {\n      if (this._onerror) {\n        this._onerror({\n          message: reason,\n          account: event.account.address\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    } // handle ethereum specific address error\n\n\n    if (reason.includes('not a valid Ethereum')) {\n      if (this._onerror) {\n        this._onerror({\n          message: reason,\n          account: event.account.address\n        });\n\n        return;\n      } else {\n        throw new Error(reason);\n      }\n    }\n\n    if (event && event.categoryCode === 'simulate') {\n      simulations$.error({\n        eventId: event.eventId,\n        error: {\n          message: reason\n        }\n      });\n      return;\n    } // handle config error\n\n\n    if (event && event.config) {\n      const configuration = this.configurations.get(event.config.scope);\n\n      if (configuration && configuration.subscription) {\n        configuration.subscription.error({\n          message: reason\n        });\n      }\n\n      return;\n    } // throw error that comes back from the server without formatting the message\n\n\n    if (this._onerror) {\n      this._onerror({\n        message: reason\n      });\n\n      return;\n    } else {\n      throw new Error(reason);\n    }\n  }\n\n  if (event && event.config) {\n    const casedScope = this._system === 'ethereum' ? event.config.scope.toLowerCase() : event.config.scope;\n    const configuration = this.configurations.get(casedScope);\n\n    if (configuration && configuration.subscription) {\n      configuration.subscription.next();\n    }\n  }\n\n  if (event && event.transaction) {\n    const {\n      eventId,\n      transaction,\n      eventCode,\n      contractCall,\n      timeStamp,\n      blockchain: {\n        system,\n        network\n      }\n    } = event; // flatten in to one object\n\n    const newState = this._system === 'ethereum' ? { ...transaction,\n      serverVersion,\n      eventCode,\n      timeStamp,\n      dispatchTimestamp,\n      system,\n      network,\n      contractCall\n    } : { ...transaction,\n      serverVersion,\n      eventCode,\n      timeStamp,\n      dispatchTimestamp,\n      system,\n      network\n    }; // ignore server echo and unsubscribe messages\n\n    if (serverEcho(eventCode) || transaction.status === 'unsubscribed') {\n      return;\n    } // replace originalHash to match webhook API\n\n\n    if (newState.originalHash) {\n      newState.replaceHash = newState.hash;\n      newState.hash = newState.originalHash;\n      delete newState.originalHash;\n    } // replace status to match webhook API\n\n\n    if (eventCode === 'txSpeedUp' && newState.status !== 'speedup') {\n      newState.status = 'speedup';\n    } // replace status to match webhook API\n\n\n    if (eventCode === 'txCancel' && newState.status !== 'cancel') {\n      newState.status = 'cancel';\n    } // handle change of hash in speedup and cancel events\n\n\n    if (eventCode === 'txSpeedUp' || eventCode === 'txCancel') {\n      this.watchedTransactions = this.watchedTransactions.map(tx => {\n        if (tx.hash === newState.replaceHash) {\n          // reassign hash parameter in transaction queue to new hash or txid\n          tx.hash = transaction.hash || transaction.txid;\n        }\n\n        return tx;\n      });\n    }\n\n    if (event && event.categoryCode === 'simulate') {\n      newState.contractCall = event.transaction.contractCall;\n      delete newState.dispatchTimestamp;\n      simulations$.next({\n        eventId,\n        transaction: newState\n      });\n      return;\n    }\n\n    const watchedAddress = transaction.watchedAddress && this._system === 'ethereum' ? transaction.watchedAddress.toLowerCase() : transaction.watchedAddress;\n\n    if (watchedAddress) {\n      const accountObj = this.watchedAccounts.find(ac => ac.address === watchedAddress);\n      const accountEmitterResult = accountObj ? last(accountObj.emitters.map(emitter => emitter.emit(newState))) : false;\n      const configuration = this.configurations.get(watchedAddress);\n      const emitterResult = configuration && configuration.emitter ? configuration.emitter.emit(newState) || accountEmitterResult : accountEmitterResult;\n\n      this._transactionHandlers.forEach(handler => handler({\n        transaction: newState,\n        emitterResult\n      }));\n    } else {\n      const transactionObj = this.watchedTransactions.find(tx => tx.hash === newState.hash || newState.txid);\n      const emitterResult = transactionObj && transactionObj.emitter.emit(newState);\n\n      this._transactionHandlers.forEach(handler => handler({\n        transaction: newState,\n        emitterResult\n      })); // replace the emitter hash to the replace hash on replacement txs\n\n\n      if (newState.status === 'speedup' || newState.status === 'cancel') {\n        this.watchedTransactions = this.watchedTransactions.map(tx => {\n          if (tx.hash === newState.hash || newState.txid) {\n            return { ...tx,\n              hash: newState.replaceHash\n            };\n          }\n\n          return tx;\n        });\n      }\n    }\n  }\n}\n\nfunction createEventLog(msg) {\n  return JSON.stringify({\n    timeStamp: new Date().toISOString(),\n    dappId: this._dappId,\n    version,\n    appName: this._appName,\n    appVersion: this._appVersion,\n    blockchain: {\n      system: this._system,\n      network: networkName(this._system, this._networkId) || 'local'\n    },\n    ...msg\n  }, msg.categoryCode === 'configs' ? jsonPreserveUndefined : undefined);\n}\n\nfunction waitForConnectionOpen() {\n  return new Promise(resolve => {\n    const interval = setInterval(() => {\n      if (this._connected) {\n        setTimeout(resolve, 100);\n        clearInterval(interval);\n      }\n    });\n  });\n}\n\nconst DEFAULT_APP_NAME = 'unknown';\nconst DEFAULT_APP_VERSION = 'unknown';\nconst DEFAULT_SYSTEM = 'ethereum';\n\nclass SDK {\n  constructor(options) {\n    validateOptions(options);\n    const {\n      system = DEFAULT_SYSTEM,\n      name = DEFAULT_APP_NAME,\n      appVersion = DEFAULT_APP_VERSION,\n      networkId,\n      transactionHandlers = [],\n      ws,\n      onopen,\n      ondown,\n      onreopen,\n      onerror,\n      onclose\n    } = options;\n    const {\n      apiUrl\n    } = options;\n    const {\n      dappId\n    } = options; // override default timeout to allow for slow connections\n\n    const timeout = {\n      connectTimeout: 10000\n    };\n    const socket = new SturdyWebSocket(apiUrl || 'wss://api.blocknative.com/v0', ws ? {\n      wsConstructor: ws,\n      ...timeout\n    } : { ...timeout\n    });\n    socket.onopen = onOpen.bind(this, onopen);\n    socket.ondown = onDown.bind(this, ondown);\n    socket.onreopen = onReopen.bind(this, onreopen);\n    socket.onmessage = handleMessage.bind(this);\n\n    socket.onerror = error => onerror && onerror({\n      message: 'There was a WebSocket error',\n      error\n    });\n\n    socket.onclose = () => {\n      this._pingTimeout && clearInterval(this._pingTimeout);\n      onclose && onclose();\n    };\n\n    const storageKey = CryptoEs.SHA1(`${dappId} - ${name}`).toString();\n    const storedConnectionId = isLocalStorageAvailable() && window.localStorage.getItem(storageKey);\n    this._storageKey = storageKey;\n    this._connectionId = storedConnectionId || undefined;\n    this._dappId = dappId;\n    this._system = system;\n    this._networkId = networkId;\n    this._appName = name;\n    this._appVersion = appVersion;\n    this._transactionHandlers = transactionHandlers;\n    this._socket = socket;\n    this._connected = false;\n    this._sendMessage = sendMessage.bind(this);\n    this._pingTimeout = undefined;\n    this._destroyed = false;\n    this._onerror = onerror;\n    this._queuedMessages = [];\n    this._limitRules = DEFAULT_RATE_LIMIT_RULES;\n    this._waitToRetry = null;\n    this._processingQueue = false;\n    this._processQueue = processQueue.bind(this);\n\n    if (this._socket.ws.on) {\n      this._heartbeat = () => {\n        this._pingTimeout && clearTimeout(this._pingTimeout);\n        this._pingTimeout = setTimeout(() => {\n          // terminate connection if we haven't heard the server ping after server timeout plus conservative latency delay\n          // Sturdy Websocket will handle the new connection logic\n          this._socket.ws.terminate();\n        }, 30000 + 1000);\n      };\n\n      this._socket.ws.on('ping', () => {\n        this._heartbeat && this._heartbeat();\n      });\n    } // public API\n\n\n    this.watchedTransactions = [];\n    this.watchedAccounts = [];\n    this.configurations = new Map();\n    this.transaction = transaction.bind(this);\n    this.account = account.bind(this);\n    this.event = event.bind(this);\n    this.simulate = simulate.bind(this);\n    this.multiSim = multiSim.bind(this);\n    this.unsubscribe = unsubscribe.bind(this);\n    this.configuration = configuration.bind(this);\n\n    this.destroy = () => {\n      this._socket.close();\n\n      this._destroyed = true; // call onclose manually here as SturdyWebSocket doesn't currently work as expected\n      // https://github.com/dphilipson/sturdy-websocket/issues/5\n\n      this._socket.onclose();\n    };\n  }\n\n  static multichain(options) {\n    return new MultiChain(options, this);\n  }\n\n}\n\nfunction onOpen(handler) {\n  this._connected = true;\n  const msg = {\n    categoryCode: 'initialize',\n    eventCode: 'checkDappId',\n    connectionId: this._connectionId\n  }; // send this message directly rather than put in queue\n\n  this._socket.send(createEventLog.bind(this)(msg));\n\n  this._heartbeat && this._heartbeat();\n  handler && handler();\n}\n\nfunction onDown(handler, closeEvent) {\n  this._connected = false;\n\n  if (handler) {\n    handler(closeEvent);\n  }\n\n  this._pingTimeout && clearTimeout(this._pingTimeout);\n}\n\nasync function onReopen(handler) {\n  this._connected = true;\n  const msg = {\n    categoryCode: 'initialize',\n    eventCode: 'checkDappId',\n    connectionId: this._connectionId\n  };\n\n  this._socket.send(createEventLog.bind(this)(msg)); // re-register all configurations on re-connection\n\n\n  const configurations = Array.from(this.configurations.values()); // register global config first and wait for it to complete\n\n  const globalConfiguration = this.configurations.get('global');\n\n  if (globalConfiguration) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emitter,\n        subscription,\n        ...config\n      } = globalConfiguration;\n      await this.configuration(config);\n    } catch (error) {\n      console.warn('Error re-sending global configuration upon reconnection:', error);\n    }\n  }\n\n  const addressConfigurations = configurations.filter(({\n    scope\n  }) => scope !== 'global');\n  addressConfigurations.forEach(enhancedConfig => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      emitter,\n      subscription,\n      ...config\n    } = enhancedConfig;\n\n    this._sendMessage({\n      categoryCode: 'configs',\n      eventCode: 'put',\n      config\n    });\n  }); // re-register all accounts to be watched by server upon\n  // re-connection as they don't get transferred over automatically\n  // to the new connection like tx hashes do\n\n  this.watchedAccounts.forEach(account => {\n    this._sendMessage({\n      eventCode: 'accountAddress',\n      categoryCode: 'watch',\n      account: {\n        address: account.address\n      }\n    });\n  });\n\n  if (handler) {\n    handler();\n  }\n\n  if (this._socket.ws && this._socket.ws.on) {\n    // need to re-register ping event since new connection\n    this._socket.ws.on('ping', () => {\n      this._heartbeat && this._heartbeat();\n    });\n\n    this._heartbeat();\n  }\n}\n\nmodule.exports = SDK;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bnc-sdk/dist/cjs/index.js\n");

/***/ })

};
;